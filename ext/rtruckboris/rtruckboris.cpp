/*--SWIGINCLUDE*/
/*includes for the compiler*/
#include "HeaderParser.h"
/*--ENDSWIGINCLUDE*/
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGRUBY


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Ruby 1.9.1 has a "memoisation optimisation" when compiling with GCC which
 * breaks using rb_intern as an lvalue, as SWIG does.  We work around this
 * issue for now by disabling this.
 * https://sourceforge.net/tracker/?func=detail&aid=2859614&group_id=1645&atid=101645
 */
#ifdef rb_intern
# undef rb_intern
#endif

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif
#ifdef bind
# undef bind
#endif
#ifdef close
# undef close
#endif
#ifdef connect
# undef connect
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif



/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a function in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from 
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif


/* Global Ruby hash table to store Trackings from C/C++
   structs to Ruby Objects. 
*/
static VALUE swig_ruby_trackings = Qnil;

/* Global variable that stores a reference to the ruby
   hash table delete function. */
static ID swig_ruby_hash_delete;

/* Setup a Ruby hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a ruby hash table to store Trackings from C++ 
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a 
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  ID trackings_id = rb_intern( "@__trackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  swig_ruby_trackings = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* No, it hasn't.  Create one ourselves */ 
  if ( swig_ruby_trackings == Qnil )
    {
      swig_ruby_trackings = rb_hash_new();
      rb_ivar_set( _mSWIG, trackings_id, swig_ruby_trackings );
    }

  /* Now store a reference to the hash table delete function
     so that we only have to look it up once.*/
  swig_ruby_hash_delete = rb_intern("delete");
}

/* Get a Ruby number to reference a pointer */
SWIGRUNTIME VALUE SWIG_RubyPtrToReference(void* ptr) {
  /* We cast the pointer to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the pointer to a Ruby number */
  return SWIG2NUM(ptr);
}

/* Get a Ruby number to reference an object */
SWIGRUNTIME VALUE SWIG_RubyObjectToReference(VALUE object) {
  /* We cast the object to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the Object to a Ruby number */
  return SWIG2NUM(object);
}

/* Get a Ruby object from a previously stored reference */
SWIGRUNTIME VALUE SWIG_RubyReferenceToObject(VALUE reference) {
  /* The provided Ruby number object is a reference
     to the Ruby object we want.*/

  /* Convert the Ruby number to a Ruby object */
  return NUM2SWIG(reference);
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* In a Ruby hash table we store the pointer and
     the associated Ruby object.  The trick here is
     that we cannot store the Ruby object directly - if
     we do then it cannot be garbage collected.  So
     instead we typecast it as a unsigned long and
     convert it to a Ruby number object.*/

  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Get a reference to the Ruby object as a Ruby number */
  VALUE value = SWIG_RubyObjectToReference(object);

  /* Store the mapping to the global hash table. */
  rb_hash_aset(swig_ruby_trackings, key, value);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Now lookup the value stored in the global hash table */
  VALUE value = rb_hash_aref(swig_ruby_trackings, key);
	
  if (value == Qnil) {
    /* No object exists - return nil. */
    return Qnil;
  }
  else {
    /* Convert this value to Ruby object */
    return SWIG_RubyReferenceToObject(value);
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Delete the object from the hash table by calling Ruby's
     do this we need to call the Hash.delete method.*/
  rb_funcall(swig_ruby_trackings, swig_ruby_hash_delete, 1, key);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    DATA_PTR(object) = 0;
  }
}


#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), "%s", msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, "%s", x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;
  
  if (!ptr)
    return Qnil;
  
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);
      
      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        const char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  
  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef void (*ruby_owntype)(void*);

SWIGRUNTIME ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, ruby_owntype own) {
  if (obj) {
    ruby_owntype oldown = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own;
    return oldown;
  } else {
    return 0;
  }
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) *own = RDATA(obj)->dfree;
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
        *ptr = vptr;
        return SWIG_OK;
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  } else {
    *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void *SWIGUNUSEDPARM(clientdata))
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) )
    {
      VALUE num = rb_funcall( proc, swig_arity_id, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg);; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_TruckBoris__Enum swig_types[0]
#define SWIGTYPE_p_TruckBoris__EnumConstant swig_types[1]
#define SWIGTYPE_p_TruckBoris__Field swig_types[2]
#define SWIGTYPE_p_TruckBoris__Function swig_types[3]
#define SWIGTYPE_p_TruckBoris__HeaderParser swig_types[4]
#define SWIGTYPE_p_TruckBoris__Parameter swig_types[5]
#define SWIGTYPE_p_TruckBoris__Structure swig_types[6]
#define SWIGTYPE_p_TruckBoris__TagDeclaration swig_types[7]
#define SWIGTYPE_p_TruckBoris__Type swig_types[8]
#define SWIGTYPE_p_TruckBoris__Typedef swig_types[9]
#define SWIGTYPE_p_TruckBoris__Union swig_types[10]
#define SWIGTYPE_p_allocator_type swig_types[11]
#define SWIGTYPE_p_char swig_types[12]
#define SWIGTYPE_p_clang__EnumConstantDecl swig_types[13]
#define SWIGTYPE_p_clang__FieldDecl swig_types[14]
#define SWIGTYPE_p_clang__FunctionDecl swig_types[15]
#define SWIGTYPE_p_clang__LangOptions swig_types[16]
#define SWIGTYPE_p_clang__ParmVarDecl swig_types[17]
#define SWIGTYPE_p_clang__QualType swig_types[18]
#define SWIGTYPE_p_clang__SourceManager swig_types[19]
#define SWIGTYPE_p_clang__TagDecl swig_types[20]
#define SWIGTYPE_p_clang__Type swig_types[21]
#define SWIGTYPE_p_clang__TypedefDecl swig_types[22]
#define SWIGTYPE_p_difference_type swig_types[23]
#define SWIGTYPE_p_p_void swig_types[24]
#define SWIGTYPE_p_size_type swig_types[25]
#define SWIGTYPE_p_std__allocatorT_TruckBoris__EnumConstant_t swig_types[26]
#define SWIGTYPE_p_std__allocatorT_TruckBoris__Enum_t swig_types[27]
#define SWIGTYPE_p_std__allocatorT_TruckBoris__Field_t swig_types[28]
#define SWIGTYPE_p_std__allocatorT_TruckBoris__Function_t swig_types[29]
#define SWIGTYPE_p_std__allocatorT_TruckBoris__Parameter_t swig_types[30]
#define SWIGTYPE_p_std__allocatorT_TruckBoris__Structure_t swig_types[31]
#define SWIGTYPE_p_std__allocatorT_TruckBoris__Typedef_t swig_types[32]
#define SWIGTYPE_p_std__allocatorT_std__string_t swig_types[33]
#define SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t swig_types[34]
#define SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t swig_types[35]
#define SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t swig_types[36]
#define SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t swig_types[37]
#define SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t swig_types[38]
#define SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t swig_types[39]
#define SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t swig_types[40]
#define SWIGTYPE_p_std__vectorT_TruckBoris__Union_std__allocatorT_TruckBoris__Union_t_t swig_types[41]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[42]
#define SWIGTYPE_p_swig__ConstIterator swig_types[43]
#define SWIGTYPE_p_swig__GC_VALUE swig_types[44]
#define SWIGTYPE_p_swig__Iterator swig_types[45]
#define SWIGTYPE_p_value_type swig_types[46]
#define SWIGTYPE_p_void swig_types[47]
static swig_type_info *swig_types[49];
static swig_module_info swig_module = {swig_types, 48, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_rtruckboris
#define SWIG_name    "Rtruckboris"

static VALUE mRtruckboris;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIGVERSION 0x030002 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <string>


#include <iostream>


#include <stdexcept>


namespace swig {
  class SwigGCReferences {
    // Hash of all GC_VALUE's currently in use
    static SwigGCReferences s_references;

    VALUE _hash;

    SwigGCReferences() : _hash(Qnil) {
    }
    ~SwigGCReferences() {
      if (_hash != Qnil)
        rb_gc_unregister_address(&_hash);
    }
    static void EndProcHandler(VALUE) {
      // Ruby interpreter ending - _hash can no longer be accessed.
      s_references._hash = Qnil;
    }
  public:
    static SwigGCReferences& instance() {
      return s_references;
    }
    static void initialize() {
      if (s_references._hash == Qnil) {
        rb_set_end_proc(&EndProcHandler, Qnil);
        s_references._hash = rb_hash_new();
        rb_gc_register_address(&s_references._hash);
      }
    }
    void GC_register(VALUE& obj) {
      if (FIXNUM_P(obj) || SPECIAL_CONST_P(obj) || SYMBOL_P(obj))
        return;
      if (_hash != Qnil) {
        VALUE val = rb_hash_aref(_hash, obj);
        unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 0;
        ++n;
        rb_hash_aset(_hash, obj, INT2NUM(n));
      }
    }
    void GC_unregister(const VALUE& obj) {
      if (FIXNUM_P(obj) || SPECIAL_CONST_P(obj) || SYMBOL_P(obj))
        return;
      // this test should not be needed but I've noticed some very erratic
      // behavior of none being unregistered in some very rare situations.
      if (BUILTIN_TYPE(obj) == T_NONE)
        return;
      if (_hash != Qnil) {
        VALUE val = rb_hash_aref(s_references._hash, obj);
        unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 1;
        --n;
        if (n)
          rb_hash_aset(s_references._hash, obj, INT2NUM(n));
        else
          rb_hash_delete(s_references._hash, obj);
      }
    }
  };

  class GC_VALUE {
  protected:
    VALUE  _obj;

    static ID hash_id;
    static ID   lt_id;
    static ID   gt_id;
    static ID   eq_id;
    static ID   le_id;
    static ID   ge_id;

    static ID  pos_id;
    static ID  neg_id;
    static ID  inv_id;

    static ID  add_id;
    static ID  sub_id;
    static ID  mul_id;
    static ID  div_id;
    static ID  mod_id;

    static ID  and_id;
    static ID   or_id;
    static ID  xor_id;

    static ID  lshift_id;
    static ID  rshift_id;

    struct OpArgs
    {
      VALUE src;
      ID    id;
      int   nargs;
      VALUE target;
    };


  public:
    GC_VALUE() : _obj(Qnil)
    {
    }

    GC_VALUE(const GC_VALUE& item) : _obj(item._obj)
    {
      SwigGCReferences::instance().GC_register(_obj);
    }
    
    GC_VALUE(VALUE obj) :_obj(obj)
    {
      SwigGCReferences::instance().GC_register(_obj);
    }
    
    ~GC_VALUE() 
    {
      SwigGCReferences::instance().GC_unregister(_obj);
    }
    
    GC_VALUE & operator=(const GC_VALUE& item) 
    {
      SwigGCReferences::instance().GC_unregister(_obj);
      _obj = item._obj;
      SwigGCReferences::instance().GC_register(_obj);
      return *this;
    }

    operator VALUE() const
    {
      return _obj;
    }

    VALUE inspect() const
    {
      return rb_inspect(_obj);
    }

    VALUE to_s() const
    {
      return rb_inspect(_obj);
    }

    static VALUE swig_rescue_swallow(VALUE)
    {
      /*
      VALUE errstr = rb_obj_as_string(rb_errinfo());
      printf("Swallowing error: '%s'\n", RSTRING_PTR(StringValue(errstr)));
      */
      return Qnil; /* Swallow Ruby exception */
    }

    static VALUE swig_rescue_funcall(VALUE p)
    {
      OpArgs* args = (OpArgs*) p;
      return rb_funcall(args->src, args->id, args->nargs, args->target);
    }

    bool relational_equal_op(const GC_VALUE& other, const ID& op_id, bool (*op_func)(const VALUE& a, const VALUE& b)) const
    {
      if (FIXNUM_P(_obj) && FIXNUM_P(other._obj)) {
        return op_func(_obj, other._obj);
      }
      bool res = false;
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      if (rb_respond_to(_obj, op_id)) {
        OpArgs  args;
        args.src    = _obj;
        args.id     = op_id;
        args.nargs  = 1;
        args.target = VALUE(other);
        ret = rb_rescue(RUBY_METHOD_FUNC(swig_rescue_funcall), VALUE(&args),
                       (RUBY_METHOD_FUNC(swig_rescue_swallow)), Qnil);
      }
      if (ret == Qnil) {
        VALUE a = rb_funcall(         _obj, hash_id, 0 );
        VALUE b = rb_funcall( VALUE(other), hash_id, 0 );
        res = op_func(a, b);
      } else {
        res = RTEST(ret);
      }
      SWIG_RUBY_THREAD_END_BLOCK;
      return res;
    }

    static bool operator_eq(const VALUE& a, const VALUE& b) { return a == b; }
    static bool operator_lt(const VALUE& a, const VALUE& b) { return a < b; }
    static bool operator_le(const VALUE& a, const VALUE& b) { return a <= b; }
    static bool operator_gt(const VALUE& a, const VALUE& b) { return a > b; }
    static bool operator_ge(const VALUE& a, const VALUE& b) { return a >= b; }

    bool operator==(const GC_VALUE& other) const { return relational_equal_op(other, eq_id, operator_eq); }
    bool operator<(const GC_VALUE& other) const { return relational_equal_op(other, lt_id, operator_lt); }
    bool operator<=(const GC_VALUE& other) const { return relational_equal_op(other, le_id, operator_le); }
    bool operator>(const GC_VALUE& other) const { return relational_equal_op(other, gt_id, operator_gt); }
    bool operator>=(const GC_VALUE& other) const { return relational_equal_op(other, ge_id, operator_ge); }

    bool operator!=(const GC_VALUE& other) const
    {
      return !(this->operator==(other));
    }

    GC_VALUE unary_op(const ID& op_id) const
    {
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      OpArgs  args;
      args.src    = _obj;
      args.id     = op_id;
      args.nargs  = 0;
      args.target = Qnil;
      ret = rb_rescue(RUBY_METHOD_FUNC(swig_rescue_funcall), VALUE(&args),
                     (RUBY_METHOD_FUNC(swig_rescue_swallow)), Qnil);
      SWIG_RUBY_THREAD_END_BLOCK;
      return ret;
    }

    GC_VALUE operator+() const { return unary_op(pos_id); }
    GC_VALUE operator-() const { return unary_op(neg_id); }
    GC_VALUE operator~() const { return unary_op(inv_id); }

    GC_VALUE binary_op(const GC_VALUE& other, const ID& op_id) const
    {
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      OpArgs  args;
      args.src    = _obj;
      args.id     = op_id;
      args.nargs  = 1;
      args.target = VALUE(other);
      ret = rb_rescue(RUBY_METHOD_FUNC(swig_rescue_funcall), VALUE(&args),
                     (RUBY_METHOD_FUNC(swig_rescue_swallow)), Qnil);
      SWIG_RUBY_THREAD_END_BLOCK;
      return GC_VALUE(ret);
    }

    GC_VALUE operator+(const GC_VALUE& other) const { return binary_op(other, add_id); }
    GC_VALUE operator-(const GC_VALUE& other) const { return binary_op(other, sub_id); }
    GC_VALUE operator*(const GC_VALUE& other) const { return binary_op(other, mul_id); }
    GC_VALUE operator/(const GC_VALUE& other) const { return binary_op(other, div_id); }
    GC_VALUE operator%(const GC_VALUE& other) const { return binary_op(other, mod_id); }
    GC_VALUE operator&(const GC_VALUE& other) const { return binary_op(other, and_id); }
    GC_VALUE operator^(const GC_VALUE& other) const { return binary_op(other, xor_id); }
    GC_VALUE operator|(const GC_VALUE& other) const { return binary_op(other, or_id); }
    GC_VALUE operator<<(const GC_VALUE& other) const { return binary_op(other, lshift_id); }
    GC_VALUE operator>>(const GC_VALUE& other) const { return binary_op(other, rshift_id); }
  };

  ID  GC_VALUE::hash_id = rb_intern("hash");
  ID  GC_VALUE::lt_id = rb_intern("<");
  ID  GC_VALUE::gt_id = rb_intern(">");
  ID  GC_VALUE::eq_id = rb_intern("==");
  ID  GC_VALUE::le_id = rb_intern("<=");
  ID  GC_VALUE::ge_id = rb_intern(">=");

  ID  GC_VALUE::pos_id = rb_intern("+@");
  ID  GC_VALUE::neg_id = rb_intern("-@");
  ID  GC_VALUE::inv_id = rb_intern("~");

  ID  GC_VALUE::add_id = rb_intern("+");
  ID  GC_VALUE::sub_id = rb_intern("-");
  ID  GC_VALUE::mul_id = rb_intern("*");
  ID  GC_VALUE::div_id = rb_intern("/");
  ID  GC_VALUE::mod_id = rb_intern("%");

  ID  GC_VALUE::and_id = rb_intern("&");
  ID  GC_VALUE::or_id  = rb_intern("|");
  ID  GC_VALUE::xor_id = rb_intern("^");

  ID  GC_VALUE::lshift_id = rb_intern("<<");
  ID  GC_VALUE::rshift_id = rb_intern(">>");

  SwigGCReferences SwigGCReferences::s_references;

  typedef GC_VALUE LANGUAGE_OBJ;

} // namespace swig



#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  /** 
   * Abstract base class used to represent all iterators of STL containers.
   */
  struct ConstIterator {
  public:
    typedef ConstIterator self_type;

  protected:
    GC_VALUE _seq;

  protected:
    ConstIterator(VALUE seq) : _seq(seq)
    {
    }

    // Random access iterator methods, but not required in Ruby
    virtual ptrdiff_t distance(const ConstIterator &x) const
    {
      throw std::invalid_argument("distance not supported");
    }

    virtual bool equal (const ConstIterator &x) const
    {
      throw std::invalid_argument("equal not supported");
    }

    virtual self_type* advance(ptrdiff_t n)
    {
      throw std::invalid_argument("advance not supported");
    }
      
  public:
    virtual ~ConstIterator() {}

    // Access iterator method, required by Ruby
    virtual VALUE value() const {
      throw std::invalid_argument("value not supported");
      return Qnil;
    };

    virtual VALUE setValue( const VALUE& v ) {
      throw std::invalid_argument("value= not supported");
      return Qnil;
    }

    virtual self_type* next( size_t n = 1 )
    {
      return this->advance( n );
    }

    virtual self_type* previous( size_t n = 1 )
    {
      ptrdiff_t nn = n;
      return this->advance( -nn );
    }

    virtual VALUE to_s() const {
      throw std::invalid_argument("to_s not supported");
      return Qnil;
    }

    virtual VALUE inspect() const {
      throw std::invalid_argument("inspect not supported");
      return Qnil;
    }
    
    virtual ConstIterator *dup() const
    {
      throw std::invalid_argument("dup not supported");
      return NULL;
    }

    //
    // C++ common/needed methods.  We emulate a bidirectional
    // operator, to be compatible with all the STL.
    // The iterator traits will then tell the STL what type of
    // iterator we really are.
    //
    ConstIterator() : _seq( Qnil )
    {
    }

    ConstIterator( const self_type& b ) : _seq( b._seq )
    {
    }

    self_type& operator=( const self_type& b )
    {
      _seq = b._seq;
      return *this;
    }

    bool operator == (const ConstIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const ConstIterator& x) const
    {
      return ! operator==(x);
    }
      
    // Pre-decrement operator
    self_type& operator--()
    {
      return *previous();
    }

    // Pre-increment operator
    self_type& operator++()
    {
      return *next();
    }

    // Post-decrement operator
    self_type operator--(int)
    {
      self_type r = *this;
      previous();
      return r;
    }

    // Post-increment operator
    self_type operator++(int)
    {
      self_type r = *this;
      next();
      return r;
    }

    ConstIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    ConstIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }

    ConstIterator* operator + (ptrdiff_t n) const
    {
      return dup()->advance(n);
    }

    ConstIterator* operator - (ptrdiff_t n) const
    {
      return dup()->advance(-n);
    }
      
    ptrdiff_t operator - (const ConstIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::ConstIterator *");
	init = 1;
      }	
      return desc;
    }
  };


  /**
   * Abstract base class used to represent all non-const iterators of STL containers.
   * 
   */
  struct Iterator : public ConstIterator {
  public:
    typedef Iterator self_type;

  protected:
    Iterator(VALUE seq) : ConstIterator(seq)
    {
    }

    virtual self_type* advance(ptrdiff_t n)
    {
      throw std::invalid_argument("operation not supported");
    }

  public:
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::Iterator *");
	init = 1;
      }	
      return desc;
    }
    
    virtual Iterator *dup() const
    {
      throw std::invalid_argument("dup not supported");
      return NULL;
    }
      
    virtual self_type* next( size_t n = 1 )
    {
      return this->advance( n );
    }

    virtual self_type* previous( size_t n = 1 )
    {
      ptrdiff_t nn = n;
      return this->advance( -nn );
    }

    bool operator == (const ConstIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const Iterator& x) const
    {
      return ! operator==(x);
    }
      
    Iterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    Iterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    Iterator* operator + (ptrdiff_t n) const
    {
      return dup()->advance(n);
    }

    Iterator* operator - (ptrdiff_t n) const
    {
      return dup()->advance(-n);
    }
      
    ptrdiff_t operator - (const Iterator& x) const
    {
      return x.distance(*this);
    }
  };

}


SWIGINTERN VALUE
SWIG_ruby_failed(void)
{
  return Qnil;
} 


/*@SWIG:/usr/share/swig/3.0.2/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val) 
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (VALUE obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}


/*@SWIG:/usr/share/swig/3.0.2/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (VALUE obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


#include <algorithm>


#include <vector>




namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}



namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static VALUE from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static VALUE from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static VALUE from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static VALUE from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline VALUE from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline VALUE from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(VALUE obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(VALUE obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(VALUE obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(VALUE obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(VALUE obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(VALUE obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (throw_error) throw std::invalid_argument("bad type");
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(VALUE obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	if (throw_error) throw std::invalid_argument("bad type");
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	static Type *v_def = (Type*) malloc(sizeof(Type));
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(VALUE obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (throw_error) throw std::invalid_argument("bad type");
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	return 0;
      }
    }
  };

  template <class Type>
  inline Type as(VALUE obj, bool te = false) {
    return traits_as< Type, typename traits< Type >::category >::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(VALUE obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(VALUE obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(VALUE obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


  namespace swig {
    template <>  struct traits<TruckBoris::Enum > {
      typedef pointer_category category;
      static const char* type_name() { return"TruckBoris::Enum"; }
    };
  }


#include <functional>


namespace swig {
  template < class T >
  struct yield : public std::unary_function< T, bool >
  {
    bool
    operator()( const T& v ) const
    { 
      return RTEST( rb_yield( swig::from< T >(v) ) );
    }
  };


  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {

  /** 
   * Templated base classes for all custom const_iterators.
   *
   */
  template<typename OutConstIterator>
  class ConstIterator_T :  public ConstIterator
  {
  public:
    typedef OutConstIterator const_iter;
    typedef typename std::iterator_traits<const_iter>::value_type value_type;    
    typedef ConstIterator_T<const_iter> self_type;

  protected:

    
    virtual bool equal (const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    virtual ptrdiff_t distance(const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }

    virtual ConstIterator* advance(ptrdiff_t n)
    {
      std::advance( current, n );
      return this;
    }

  public:
    ConstIterator_T() : ConstIterator(Qnil)
    {
    }

    ConstIterator_T(const_iter curr, VALUE seq = Qnil)
      : ConstIterator(seq), current(curr)
    {
    }

    const const_iter& get_current() const
    {
      return current;
    }

    const value_type& operator*() const
    {
      return *current;
    }

    virtual VALUE inspect() const
    {
      VALUE ret = rb_str_new2("#<");
      ret = rb_str_cat2( ret, rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::const_iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_inspect(cur) );
      ret = rb_str_cat2( ret, ">" );
      return ret;
    }

    virtual VALUE to_s()    const
    {
      VALUE ret = rb_str_new2( rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::const_iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_obj_as_string(cur) );
      return ret;
    }

  protected:
    const_iter current;
  };


  /** 
   * Templated base classes for all custom non-const iterators.
   *
   */
  template<typename InOutIterator>
  class Iterator_T :  public Iterator
  {
  public:
    typedef InOutIterator nonconst_iter;

    // Make this class iterator STL compatible, by using iterator_traits
    typedef typename std::iterator_traits<nonconst_iter >::iterator_category iterator_category;
    typedef typename std::iterator_traits<nonconst_iter >::value_type        value_type;
    typedef typename std::iterator_traits<nonconst_iter >::difference_type   difference_type;
    typedef typename std::iterator_traits<nonconst_iter >::pointer           pointer;
    typedef typename std::iterator_traits<nonconst_iter >::reference         reference;

    typedef Iterator                         base;
    typedef Iterator_T< nonconst_iter > self_type;

  protected:

    virtual bool equal (const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    virtual ptrdiff_t distance(const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }

    virtual Iterator* advance(ptrdiff_t n)
    {
      std::advance( current, n );
      return this;
    }

  public:

    Iterator_T(nonconst_iter curr, VALUE seq = Qnil)
      : Iterator(seq), current(curr)
    {
    }

    const nonconst_iter& get_current() const
    {
      return current;
    }

    self_type& operator=( const self_type& b )
    {
      base::operator=( b );
      return *this;
    }
    
    self_type& operator=( const value_type& b )
    {
      *current = b;
      return *this;
    }

    const value_type& operator*() const
    {
      return *current;
    }

    value_type& operator*()
    {
      return *current;
    }
    
    virtual VALUE inspect() const
    {
      VALUE ret = rb_str_new2("#<");
      ret = rb_str_cat2( ret, rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_inspect(cur) );
      ret = rb_str_cat2( ret, ">" );
      return ret;
    }

    virtual VALUE to_s()    const
    {
      VALUE ret = rb_str_new2( rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_obj_as_string(cur) );
      return ret;
    }

  protected:
    nonconst_iter current;
  };


  /**
   * Auxiliary functor to store the value of a ruby object inside
   * a reference of a compatible C++ type.  ie: Ruby -> C++
   * 
   */
  template <class ValueType>
  struct asval_oper 
  {
    typedef ValueType    value_type;
    typedef bool        result_type;
    bool operator()(VALUE obj, value_type& v) const
    {
      return ( swig::asval< value_type >(obj, &v) == SWIG_OK );
    }
  };

  /**
   * Auxiliary functor to return a ruby object from a C++ type. 
   * ie: C++ -> Ruby
   * 
   */
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef VALUE result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };


  /** 
   * ConstIterator class for a const_iterator with no end() boundaries.
   *
   */
  template<typename OutConstIterator, 
	   typename ValueType = typename std::iterator_traits<OutConstIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class ConstIteratorOpen_T :  public ConstIterator_T<OutConstIterator>
  {
  public:
    FromOper from;
    typedef OutConstIterator const_iter;
    typedef ValueType value_type;
    typedef ConstIterator_T<const_iter>  base;
    typedef ConstIteratorOpen_T<OutConstIterator, ValueType, FromOper> self_type;
    
    ConstIteratorOpen_T(const_iter curr, VALUE seq = Qnil)
      : ConstIterator_T<OutConstIterator>(curr, seq)
    {
    }
    
    virtual VALUE value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    ConstIterator *dup() const
    {
      return new self_type(*this);
    }
  };

  /** 
   * Iterator class for an iterator with no end() boundaries.
   *
   */
  template<typename InOutIterator, 
	   typename ValueType = typename std::iterator_traits<InOutIterator>::value_type,
	   typename FromOper = from_oper<ValueType>,
	   typename AsvalOper = asval_oper<ValueType> >
  class IteratorOpen_T :  public Iterator_T<InOutIterator>
  {
  public:
    FromOper  from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef ValueType value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorOpen_T<InOutIterator, ValueType, FromOper, AsvalOper> self_type;

  public:
    IteratorOpen_T(nonconst_iter curr, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq)
    {
    }
    
    virtual VALUE value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }

    virtual VALUE setValue( const VALUE& v )
    {
      value_type& dst = *base::current;
      if ( asval(v, dst) ) return v;
      return Qnil;
    }
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }
  };

  /** 
   * ConstIterator class for a const_iterator where begin() and end() boundaries are known.
   *
   */
  template<typename OutConstIterator, 
	   typename ValueType = typename std::iterator_traits<OutConstIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class ConstIteratorClosed_T :  public ConstIterator_T<OutConstIterator>
  {
  public:
    FromOper from;
    typedef OutConstIterator const_iter;
    typedef ValueType value_type;
    typedef ConstIterator_T<const_iter>  base;    
    typedef ConstIteratorClosed_T<OutConstIterator, ValueType, FromOper> self_type;
    
  protected:
    virtual ConstIterator* advance(ptrdiff_t n)
    {
      std::advance( base::current, n );
      if ( base::current == end )
	throw stop_iteration();
      return this;
    }

  public:
    ConstIteratorClosed_T(const_iter curr, const_iter first, 
			  const_iter last, VALUE seq = Qnil)
      : ConstIterator_T<OutConstIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    virtual VALUE value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    ConstIterator *dup() const
    {
      return new self_type(*this);
    }


  private:
    const_iter begin;
    const_iter end;
  };

  /** 
   * Iterator class for a iterator where begin() and end() boundaries are known.
   *
   */
  template<typename InOutIterator, 
	   typename ValueType = typename std::iterator_traits<InOutIterator>::value_type,
	   typename FromOper = from_oper<ValueType>,
	   typename AsvalOper = asval_oper<ValueType> >
  class IteratorClosed_T :  public Iterator_T<InOutIterator>
  {
  public:
    FromOper   from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef ValueType value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorClosed_T<InOutIterator, ValueType, FromOper, AsvalOper> self_type;
    
  protected:
    virtual Iterator* advance(ptrdiff_t n)
    {
      std::advance( base::current, n );
      if ( base::current == end )
	throw stop_iteration();
      return this;
    }

  public:
    IteratorClosed_T(nonconst_iter curr, nonconst_iter first, 
		     nonconst_iter last, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    virtual VALUE value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    // Iterator setter method, required by Ruby
    virtual VALUE setValue( const VALUE& v )
    {
      if (base::current == end)
	throw stop_iteration();

      value_type& dst = *base::current;
      if ( asval( v, dst ) ) return v;
      return Qnil;
    }
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }

  private:
    nonconst_iter begin;
    nonconst_iter end;
  };

  /* Partial specialization for bools which don't allow de-referencing */
  template< typename InOutIterator, typename FromOper, typename AsvalOper >
  class IteratorOpen_T< InOutIterator, bool, FromOper, AsvalOper > : 
    public Iterator_T<InOutIterator>
  {
  public:
    FromOper   from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef bool value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorOpen_T<InOutIterator, bool, FromOper, AsvalOper> self_type;

    IteratorOpen_T(nonconst_iter curr, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq)
    {
    }

    virtual VALUE value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    virtual VALUE setValue( const VALUE& v )
    {
      bool tmp = *base::current;
      if ( asval( v, tmp ) )
	{
	  *base::current = tmp;
	  return v;
	}
      return Qnil;
    }    
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }
    
  };

  /* Partial specialization for bools which don't allow de-referencing */
  template< typename InOutIterator, typename FromOper, typename AsvalOper >
  class IteratorClosed_T< InOutIterator, bool, FromOper, AsvalOper > : 
    public Iterator_T<InOutIterator>
  {
  public:
    FromOper   from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef bool value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorClosed_T<InOutIterator, bool, FromOper, AsvalOper> self_type;
    
  protected:
    virtual Iterator* advance(ptrdiff_t n)
    {
      std::advance( base::current, n );
      if ( base::current == end )
	throw stop_iteration();
      return this;
    }

  public:
    IteratorClosed_T(nonconst_iter curr, nonconst_iter first, 
		     nonconst_iter last, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq), begin(first), end(last)
    {
    }

    virtual VALUE value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }

    virtual VALUE setValue( const VALUE& v )
    {
      if (base::current == end)
	throw stop_iteration();

      bool tmp = *base::current;
      if ( asval( v, tmp ) )
	{
	  *base::current = tmp;
	  return v;
	}
      return Qnil;
    }
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }

  private:
    nonconst_iter begin;
    nonconst_iter end;
  };


  /** 
   * Helper function used to wrap a bounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename InOutIter>
  inline Iterator*
  make_nonconst_iterator(const InOutIter& current, const InOutIter& begin,
			 const InOutIter& end, VALUE seq = Qnil)
  {
    return new IteratorClosed_T<InOutIter>(current, begin, end, seq);
  }

  /** 
   * Helper function used to wrap an unbounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename InOutIter>
  inline Iterator*
  make_nonconst_iterator(const InOutIter& current, VALUE seq = Qnil)
  {
    return new IteratorOpen_T<InOutIter>(current, seq);
  }

  /** 
   * Helper function used to wrap a bounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename OutIter>
  inline ConstIterator*
  make_const_iterator(const OutIter& current, const OutIter& begin,
                       const OutIter& end, VALUE seq = Qnil)
  {
    return new ConstIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  /** 
   * Helper function used to wrap an unbounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename OutIter>
  inline ConstIterator*
  make_const_iterator(const OutIter& current, VALUE seq = Qnil)
  {
    return new ConstIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{

  /**
   * This class is a proxy class for references, used to return and set values
   * of an element of a Ruby Array of stuff.
   * It can be used by RubySequence_InputIterator to make it work with STL
   * algorithms.
   * 
   */
  template <class T>
  struct RubySequence_Ref
  {
    RubySequence_Ref(VALUE  seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      VALUE item = rb_ary_entry(_seq, _index );
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	VALUE lastErr = rb_gv_get("$!");
	if ( lastErr == Qnil ) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	VALUE str = rb_str_new2(msg);
	str = rb_str_cat2( str, e.what() );
	SWIG_Ruby_ExceptionType( NULL, str );
	throw;
      }
    }

    RubySequence_Ref& operator=(const T& v)
    {
      rb_ary_set(_seq, _index, swig::from< T >(v));
      return *this;
    }

  private:
    VALUE  _seq;
    int _index;
  };


  /**
   * This class is a proxy to return a pointer to a class, usually
   * RubySequence_Ref. 
   * It can be used by RubySequence_InputIterator to make it work with STL
   * algorithms.
   * 
   */
  template <class T>
  struct RubySequence_ArrowProxy
  {
    RubySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };


  /**
   * Input Iterator.  This adapator class is a random access iterator that 
   * allows you to use STL algorithms with a Ruby class (a Ruby Array by default).
   * 
   */
  template <class T, class Reference = RubySequence_Ref< T > >
  struct RubySequence_InputIterator
  {
    typedef RubySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef ptrdiff_t difference_type;

    RubySequence_InputIterator()
    {
    }

    RubySequence_InputIterator(VALUE  seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    RubySequence_ArrowProxy<T>
    operator->() const {
      return RubySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    VALUE  _seq;
    difference_type _index;
  };


  /**
   * This adaptor class allows you to use a Ruby Array as if it was an STL
   * container, giving it begin(), end(), and iterators.
   * 
   */
  template <class T>
  struct RubySequence_Cont
  {
    typedef RubySequence_Ref<T> reference;
    typedef const RubySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef RubySequence_InputIterator<T, reference> iterator;
    typedef RubySequence_InputIterator<T, const_reference> const_iterator;

    RubySequence_Cont(VALUE  seq) : _seq(0)
    {
      if (!rb_obj_is_kind_of(seq, rb_cArray)) {
	throw std::invalid_argument("an Array is expected");
      }
      _seq = seq;
    }

    ~RubySequence_Cont()
    {
    }

    size_type size() const
    {
      return RARRAY_LEN(_seq);
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = false) const
    {
      int s = (int) size();
      for (int i = 0; i < s; ++i) {
	VALUE item = rb_ary_entry(_seq, i );
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    VALUE  _seq;
  };

}


namespace swig {
  template <class RubySeq, class Seq>
  inline void
  assign(const RubySeq& rubyseq, Seq* seq) {
    // seq->assign(rubyseq.begin(), rubyseq.end()); // not used as not always implemented
    typedef typename RubySeq::value_type value_type;
    typename RubySeq::const_iterator it = rubyseq.begin();
    for (;it != rubyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(VALUE obj, sequence **seq) {
      if (rb_obj_is_kind_of(obj, rb_cArray) == Qtrue) {
	try {
	  RubySequence_Cont<value_type> rubyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(rubyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return rubyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    VALUE lastErr = rb_gv_get("$!");
	    if (lastErr == Qnil) {
	      rb_raise(rb_eTypeError, "%s", e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      } else {
	sequence *p;
	if (SWIG_ConvertPtr(obj,(void**)&p,
			    swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      }
      return SWIG_ERROR;
    }
  };

  // Partial specialization for GC_VALUE's.  No need to typecheck each
  // element.
  template< class Seq >
  struct traits_asptr_stdseq< Seq, swig::GC_VALUE > {
    typedef Seq sequence;
    typedef swig::GC_VALUE value_type;

    static int asptr(VALUE obj, sequence **seq) {
      if (rb_obj_is_kind_of(obj, rb_cArray) == Qtrue) {
	try {
	  if (seq) {
	    RubySequence_Cont<value_type> rubyseq(obj);
	    sequence *pseq = new sequence();
	    assign(rubyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return true;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    VALUE lastErr = rb_gv_get("$!");
	    if (lastErr == Qnil) {
	      rb_raise(rb_eTypeError, "%s", e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      } else {
	sequence *p;
	if (SWIG_ConvertPtr(obj,(void**)&p,
			    swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static VALUE from(const sequence& seq) {






      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	VALUE obj = rb_ary_new2((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  rb_ary_push(obj, swig::from< value_type >(*it));
	}
	rb_obj_freeze(obj);  // treat as immutable result
	return obj;
      } else {
	rb_raise(rb_eRangeError,"sequence size not valid in ruby");
	return Qnil;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(VALUE obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static VALUE from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<TruckBoris::Enum, std::allocator< TruckBoris::Enum > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "TruckBoris::Enum" "," "std::allocator< TruckBoris::Enum >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *std_vector_Sl_TruckBoris_Enum_Sg__dup(std::vector< TruckBoris::Enum > *self){
      return new std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Enum_Sg__inspect(std::vector< TruckBoris::Enum > *self){
      std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::const_iterator i = self->begin();
      std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Enum_Sg__to_a(std::vector< TruckBoris::Enum > *self){
      std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::const_iterator i = self->begin();
      std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Enum_Sg__to_s(std::vector< TruckBoris::Enum > *self){
      std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::iterator i = self->begin();
      std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Enum_Sg__slice(std::vector< TruckBoris::Enum > *self,std::vector< TruckBoris::Enum >::difference_type i,std::vector< TruckBoris::Enum >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *std_vector_Sl_TruckBoris_Enum_Sg__each(std::vector< TruckBoris::Enum > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::const_iterator i = self->begin();
	std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *std_vector_Sl_TruckBoris_Enum_Sg__select(std::vector< TruckBoris::Enum > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >* r = new std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >;
      std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::const_iterator i = self->begin();
      std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Enum_Sg__delete_at(std::vector< TruckBoris::Enum > *self,std::vector< TruckBoris::Enum >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Enum_Sg____delete2__(std::vector< TruckBoris::Enum > *self,std::vector< TruckBoris::Enum >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *std_vector_Sl_TruckBoris_Enum_Sg__reject_bang(std::vector< TruckBoris::Enum > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      self->erase( std::remove_if( self->begin(), self->end(),
            swig::yield< std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::value_type >() ), self->end() );
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Enum_Sg__pop(std::vector< TruckBoris::Enum > *self){
      if (self->empty()) return Qnil;
      std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::value_type >( x );
    }
SWIGINTERN std::vector< TruckBoris::Enum >::value_type const std_vector_Sl_TruckBoris_Enum_Sg__push(std::vector< TruckBoris::Enum > *self,std::vector< TruckBoris::Enum >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *std_vector_Sl_TruckBoris_Enum_Sg__reject(std::vector< TruckBoris::Enum > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >* r = new std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Enum_Sg__at(std::vector< TruckBoris::Enum > const *self,std::vector< TruckBoris::Enum >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Enum_Sg____getitem____SWIG_0(std::vector< TruckBoris::Enum > const *self,std::vector< TruckBoris::Enum >::difference_type i,std::vector< TruckBoris::Enum >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Enum_Sg____getitem____SWIG_1(std::vector< TruckBoris::Enum > const *self,std::vector< TruckBoris::Enum >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Enum_Sg____getitem____SWIG_2(std::vector< TruckBoris::Enum > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Enum_Sg____setitem____SWIG_0(std::vector< TruckBoris::Enum > *self,std::vector< TruckBoris::Enum >::difference_type i,std::vector< TruckBoris::Enum >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Enum_Sg____setitem____SWIG_1(std::vector< TruckBoris::Enum > *self,std::vector< TruckBoris::Enum >::difference_type i,std::vector< TruckBoris::Enum >::difference_type j,std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >* >( &v );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Enum_Sg__shift(std::vector< TruckBoris::Enum > *self){
      if (self->empty()) return Qnil;
      std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::value_type >( x );
    }

SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}

SWIGINTERN std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *std_vector_Sl_TruckBoris_Enum_Sg__insert__SWIG_0(std::vector< TruckBoris::Enum > *self,std::vector< TruckBoris::Enum >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::value_type val = swig::as<std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError, "%s",
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *std_vector_Sl_TruckBoris_Enum_Sg__unshift(std::vector< TruckBoris::Enum > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::value_type val = swig::as<std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError, "%s",
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }

SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return ULONG2NUM(value); 
}


SWIGINTERNINLINE VALUE
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}

SWIGINTERN std::vector< TruckBoris::Enum >::iterator std_vector_Sl_TruckBoris_Enum_Sg__erase__SWIG_0(std::vector< TruckBoris::Enum > *self,std::vector< TruckBoris::Enum >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< TruckBoris::Enum >::iterator std_vector_Sl_TruckBoris_Enum_Sg__erase__SWIG_1(std::vector< TruckBoris::Enum > *self,std::vector< TruckBoris::Enum >::iterator first,std::vector< TruckBoris::Enum >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< TruckBoris::Enum >::iterator std_vector_Sl_TruckBoris_Enum_Sg__insert__SWIG_1(std::vector< TruckBoris::Enum > *self,std::vector< TruckBoris::Enum >::iterator pos,std::vector< TruckBoris::Enum >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_TruckBoris_Enum_Sg__insert__SWIG_2(std::vector< TruckBoris::Enum > *self,std::vector< TruckBoris::Enum >::iterator pos,std::vector< TruckBoris::Enum >::size_type n,std::vector< TruckBoris::Enum >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits<TruckBoris::EnumConstant > {
      typedef pointer_category category;
      static const char* type_name() { return"TruckBoris::EnumConstant"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<TruckBoris::EnumConstant, std::allocator< TruckBoris::EnumConstant > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "TruckBoris::EnumConstant" "," "std::allocator< TruckBoris::EnumConstant >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *std_vector_Sl_TruckBoris_EnumConstant_Sg__dup(std::vector< TruckBoris::EnumConstant > *self){
      return new std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_EnumConstant_Sg__inspect(std::vector< TruckBoris::EnumConstant > *self){
      std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::const_iterator i = self->begin();
      std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_EnumConstant_Sg__to_a(std::vector< TruckBoris::EnumConstant > *self){
      std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::const_iterator i = self->begin();
      std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_EnumConstant_Sg__to_s(std::vector< TruckBoris::EnumConstant > *self){
      std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::iterator i = self->begin();
      std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_EnumConstant_Sg__slice(std::vector< TruckBoris::EnumConstant > *self,std::vector< TruckBoris::EnumConstant >::difference_type i,std::vector< TruckBoris::EnumConstant >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *std_vector_Sl_TruckBoris_EnumConstant_Sg__each(std::vector< TruckBoris::EnumConstant > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::const_iterator i = self->begin();
	std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *std_vector_Sl_TruckBoris_EnumConstant_Sg__select(std::vector< TruckBoris::EnumConstant > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >* r = new std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >;
      std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::const_iterator i = self->begin();
      std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_EnumConstant_Sg__delete_at(std::vector< TruckBoris::EnumConstant > *self,std::vector< TruckBoris::EnumConstant >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_EnumConstant_Sg____delete2__(std::vector< TruckBoris::EnumConstant > *self,std::vector< TruckBoris::EnumConstant >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *std_vector_Sl_TruckBoris_EnumConstant_Sg__reject_bang(std::vector< TruckBoris::EnumConstant > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      self->erase( std::remove_if( self->begin(), self->end(),
            swig::yield< std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::value_type >() ), self->end() );
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_EnumConstant_Sg__pop(std::vector< TruckBoris::EnumConstant > *self){
      if (self->empty()) return Qnil;
      std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::value_type >( x );
    }
SWIGINTERN std::vector< TruckBoris::EnumConstant >::value_type const std_vector_Sl_TruckBoris_EnumConstant_Sg__push(std::vector< TruckBoris::EnumConstant > *self,std::vector< TruckBoris::EnumConstant >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *std_vector_Sl_TruckBoris_EnumConstant_Sg__reject(std::vector< TruckBoris::EnumConstant > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >* r = new std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_EnumConstant_Sg__at(std::vector< TruckBoris::EnumConstant > const *self,std::vector< TruckBoris::EnumConstant >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_EnumConstant_Sg____getitem____SWIG_0(std::vector< TruckBoris::EnumConstant > const *self,std::vector< TruckBoris::EnumConstant >::difference_type i,std::vector< TruckBoris::EnumConstant >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_EnumConstant_Sg____getitem____SWIG_1(std::vector< TruckBoris::EnumConstant > const *self,std::vector< TruckBoris::EnumConstant >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_EnumConstant_Sg____getitem____SWIG_2(std::vector< TruckBoris::EnumConstant > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_EnumConstant_Sg____setitem____SWIG_0(std::vector< TruckBoris::EnumConstant > *self,std::vector< TruckBoris::EnumConstant >::difference_type i,std::vector< TruckBoris::EnumConstant >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_EnumConstant_Sg____setitem____SWIG_1(std::vector< TruckBoris::EnumConstant > *self,std::vector< TruckBoris::EnumConstant >::difference_type i,std::vector< TruckBoris::EnumConstant >::difference_type j,std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >* >( &v );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_EnumConstant_Sg__shift(std::vector< TruckBoris::EnumConstant > *self){
      if (self->empty()) return Qnil;
      std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::value_type >( x );
    }
SWIGINTERN std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *std_vector_Sl_TruckBoris_EnumConstant_Sg__insert__SWIG_0(std::vector< TruckBoris::EnumConstant > *self,std::vector< TruckBoris::EnumConstant >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::value_type val = swig::as<std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError, "%s",
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *std_vector_Sl_TruckBoris_EnumConstant_Sg__unshift(std::vector< TruckBoris::EnumConstant > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::value_type val = swig::as<std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError, "%s",
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }
SWIGINTERN std::vector< TruckBoris::EnumConstant >::iterator std_vector_Sl_TruckBoris_EnumConstant_Sg__erase__SWIG_0(std::vector< TruckBoris::EnumConstant > *self,std::vector< TruckBoris::EnumConstant >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< TruckBoris::EnumConstant >::iterator std_vector_Sl_TruckBoris_EnumConstant_Sg__erase__SWIG_1(std::vector< TruckBoris::EnumConstant > *self,std::vector< TruckBoris::EnumConstant >::iterator first,std::vector< TruckBoris::EnumConstant >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< TruckBoris::EnumConstant >::iterator std_vector_Sl_TruckBoris_EnumConstant_Sg__insert__SWIG_1(std::vector< TruckBoris::EnumConstant > *self,std::vector< TruckBoris::EnumConstant >::iterator pos,std::vector< TruckBoris::EnumConstant >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_TruckBoris_EnumConstant_Sg__insert__SWIG_2(std::vector< TruckBoris::EnumConstant > *self,std::vector< TruckBoris::EnumConstant >::iterator pos,std::vector< TruckBoris::EnumConstant >::size_type n,std::vector< TruckBoris::EnumConstant >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits<TruckBoris::Function > {
      typedef pointer_category category;
      static const char* type_name() { return"TruckBoris::Function"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<TruckBoris::Function, std::allocator< TruckBoris::Function > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "TruckBoris::Function" "," "std::allocator< TruckBoris::Function >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > *std_vector_Sl_TruckBoris_Function_Sg__dup(std::vector< TruckBoris::Function > *self){
      return new std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Function_Sg__inspect(std::vector< TruckBoris::Function > *self){
      std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::const_iterator i = self->begin();
      std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Function_Sg__to_a(std::vector< TruckBoris::Function > *self){
      std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::const_iterator i = self->begin();
      std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Function_Sg__to_s(std::vector< TruckBoris::Function > *self){
      std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::iterator i = self->begin();
      std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Function_Sg__slice(std::vector< TruckBoris::Function > *self,std::vector< TruckBoris::Function >::difference_type i,std::vector< TruckBoris::Function >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > *std_vector_Sl_TruckBoris_Function_Sg__each(std::vector< TruckBoris::Function > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::const_iterator i = self->begin();
	std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > *std_vector_Sl_TruckBoris_Function_Sg__select(std::vector< TruckBoris::Function > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >* r = new std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >;
      std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::const_iterator i = self->begin();
      std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Function_Sg__delete_at(std::vector< TruckBoris::Function > *self,std::vector< TruckBoris::Function >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Function_Sg____delete2__(std::vector< TruckBoris::Function > *self,std::vector< TruckBoris::Function >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > *std_vector_Sl_TruckBoris_Function_Sg__reject_bang(std::vector< TruckBoris::Function > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      self->erase( std::remove_if( self->begin(), self->end(),
            swig::yield< std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::value_type >() ), self->end() );
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Function_Sg__pop(std::vector< TruckBoris::Function > *self){
      if (self->empty()) return Qnil;
      std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::value_type >( x );
    }
SWIGINTERN std::vector< TruckBoris::Function >::value_type const std_vector_Sl_TruckBoris_Function_Sg__push(std::vector< TruckBoris::Function > *self,std::vector< TruckBoris::Function >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > *std_vector_Sl_TruckBoris_Function_Sg__reject(std::vector< TruckBoris::Function > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >* r = new std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Function_Sg__at(std::vector< TruckBoris::Function > const *self,std::vector< TruckBoris::Function >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Function_Sg____getitem____SWIG_0(std::vector< TruckBoris::Function > const *self,std::vector< TruckBoris::Function >::difference_type i,std::vector< TruckBoris::Function >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Function_Sg____getitem____SWIG_1(std::vector< TruckBoris::Function > const *self,std::vector< TruckBoris::Function >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Function_Sg____getitem____SWIG_2(std::vector< TruckBoris::Function > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Function_Sg____setitem____SWIG_0(std::vector< TruckBoris::Function > *self,std::vector< TruckBoris::Function >::difference_type i,std::vector< TruckBoris::Function >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Function_Sg____setitem____SWIG_1(std::vector< TruckBoris::Function > *self,std::vector< TruckBoris::Function >::difference_type i,std::vector< TruckBoris::Function >::difference_type j,std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >* >( &v );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Function_Sg__shift(std::vector< TruckBoris::Function > *self){
      if (self->empty()) return Qnil;
      std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::value_type >( x );
    }
SWIGINTERN std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > *std_vector_Sl_TruckBoris_Function_Sg__insert__SWIG_0(std::vector< TruckBoris::Function > *self,std::vector< TruckBoris::Function >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::value_type val = swig::as<std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError, "%s",
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > *std_vector_Sl_TruckBoris_Function_Sg__unshift(std::vector< TruckBoris::Function > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::value_type val = swig::as<std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError, "%s",
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }
SWIGINTERN std::vector< TruckBoris::Function >::iterator std_vector_Sl_TruckBoris_Function_Sg__erase__SWIG_0(std::vector< TruckBoris::Function > *self,std::vector< TruckBoris::Function >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< TruckBoris::Function >::iterator std_vector_Sl_TruckBoris_Function_Sg__erase__SWIG_1(std::vector< TruckBoris::Function > *self,std::vector< TruckBoris::Function >::iterator first,std::vector< TruckBoris::Function >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< TruckBoris::Function >::iterator std_vector_Sl_TruckBoris_Function_Sg__insert__SWIG_1(std::vector< TruckBoris::Function > *self,std::vector< TruckBoris::Function >::iterator pos,std::vector< TruckBoris::Function >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_TruckBoris_Function_Sg__insert__SWIG_2(std::vector< TruckBoris::Function > *self,std::vector< TruckBoris::Function >::iterator pos,std::vector< TruckBoris::Function >::size_type n,std::vector< TruckBoris::Function >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits<TruckBoris::Parameter > {
      typedef pointer_category category;
      static const char* type_name() { return"TruckBoris::Parameter"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<TruckBoris::Parameter, std::allocator< TruckBoris::Parameter > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "TruckBoris::Parameter" "," "std::allocator< TruckBoris::Parameter >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *std_vector_Sl_TruckBoris_Parameter_Sg__dup(std::vector< TruckBoris::Parameter > *self){
      return new std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Parameter_Sg__inspect(std::vector< TruckBoris::Parameter > *self){
      std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::const_iterator i = self->begin();
      std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Parameter_Sg__to_a(std::vector< TruckBoris::Parameter > *self){
      std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::const_iterator i = self->begin();
      std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Parameter_Sg__to_s(std::vector< TruckBoris::Parameter > *self){
      std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::iterator i = self->begin();
      std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Parameter_Sg__slice(std::vector< TruckBoris::Parameter > *self,std::vector< TruckBoris::Parameter >::difference_type i,std::vector< TruckBoris::Parameter >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *std_vector_Sl_TruckBoris_Parameter_Sg__each(std::vector< TruckBoris::Parameter > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::const_iterator i = self->begin();
	std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *std_vector_Sl_TruckBoris_Parameter_Sg__select(std::vector< TruckBoris::Parameter > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >* r = new std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >;
      std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::const_iterator i = self->begin();
      std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Parameter_Sg__delete_at(std::vector< TruckBoris::Parameter > *self,std::vector< TruckBoris::Parameter >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Parameter_Sg____delete2__(std::vector< TruckBoris::Parameter > *self,std::vector< TruckBoris::Parameter >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *std_vector_Sl_TruckBoris_Parameter_Sg__reject_bang(std::vector< TruckBoris::Parameter > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      self->erase( std::remove_if( self->begin(), self->end(),
            swig::yield< std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::value_type >() ), self->end() );
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Parameter_Sg__pop(std::vector< TruckBoris::Parameter > *self){
      if (self->empty()) return Qnil;
      std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::value_type >( x );
    }
SWIGINTERN std::vector< TruckBoris::Parameter >::value_type const std_vector_Sl_TruckBoris_Parameter_Sg__push(std::vector< TruckBoris::Parameter > *self,std::vector< TruckBoris::Parameter >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *std_vector_Sl_TruckBoris_Parameter_Sg__reject(std::vector< TruckBoris::Parameter > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >* r = new std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Parameter_Sg__at(std::vector< TruckBoris::Parameter > const *self,std::vector< TruckBoris::Parameter >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Parameter_Sg____getitem____SWIG_0(std::vector< TruckBoris::Parameter > const *self,std::vector< TruckBoris::Parameter >::difference_type i,std::vector< TruckBoris::Parameter >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Parameter_Sg____getitem____SWIG_1(std::vector< TruckBoris::Parameter > const *self,std::vector< TruckBoris::Parameter >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Parameter_Sg____getitem____SWIG_2(std::vector< TruckBoris::Parameter > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Parameter_Sg____setitem____SWIG_0(std::vector< TruckBoris::Parameter > *self,std::vector< TruckBoris::Parameter >::difference_type i,std::vector< TruckBoris::Parameter >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Parameter_Sg____setitem____SWIG_1(std::vector< TruckBoris::Parameter > *self,std::vector< TruckBoris::Parameter >::difference_type i,std::vector< TruckBoris::Parameter >::difference_type j,std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >* >( &v );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Parameter_Sg__shift(std::vector< TruckBoris::Parameter > *self){
      if (self->empty()) return Qnil;
      std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::value_type >( x );
    }
SWIGINTERN std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *std_vector_Sl_TruckBoris_Parameter_Sg__insert__SWIG_0(std::vector< TruckBoris::Parameter > *self,std::vector< TruckBoris::Parameter >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::value_type val = swig::as<std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError, "%s",
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *std_vector_Sl_TruckBoris_Parameter_Sg__unshift(std::vector< TruckBoris::Parameter > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::value_type val = swig::as<std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError, "%s",
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }
SWIGINTERN std::vector< TruckBoris::Parameter >::iterator std_vector_Sl_TruckBoris_Parameter_Sg__erase__SWIG_0(std::vector< TruckBoris::Parameter > *self,std::vector< TruckBoris::Parameter >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< TruckBoris::Parameter >::iterator std_vector_Sl_TruckBoris_Parameter_Sg__erase__SWIG_1(std::vector< TruckBoris::Parameter > *self,std::vector< TruckBoris::Parameter >::iterator first,std::vector< TruckBoris::Parameter >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< TruckBoris::Parameter >::iterator std_vector_Sl_TruckBoris_Parameter_Sg__insert__SWIG_1(std::vector< TruckBoris::Parameter > *self,std::vector< TruckBoris::Parameter >::iterator pos,std::vector< TruckBoris::Parameter >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_TruckBoris_Parameter_Sg__insert__SWIG_2(std::vector< TruckBoris::Parameter > *self,std::vector< TruckBoris::Parameter >::iterator pos,std::vector< TruckBoris::Parameter >::size_type n,std::vector< TruckBoris::Parameter >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits<TruckBoris::Structure > {
      typedef pointer_category category;
      static const char* type_name() { return"TruckBoris::Structure"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<TruckBoris::Structure, std::allocator< TruckBoris::Structure > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "TruckBoris::Structure" "," "std::allocator< TruckBoris::Structure >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *std_vector_Sl_TruckBoris_Structure_Sg__dup(std::vector< TruckBoris::Structure > *self){
      return new std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Structure_Sg__inspect(std::vector< TruckBoris::Structure > *self){
      std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::const_iterator i = self->begin();
      std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Structure_Sg__to_a(std::vector< TruckBoris::Structure > *self){
      std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::const_iterator i = self->begin();
      std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Structure_Sg__to_s(std::vector< TruckBoris::Structure > *self){
      std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::iterator i = self->begin();
      std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Structure_Sg__slice(std::vector< TruckBoris::Structure > *self,std::vector< TruckBoris::Structure >::difference_type i,std::vector< TruckBoris::Structure >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *std_vector_Sl_TruckBoris_Structure_Sg__each(std::vector< TruckBoris::Structure > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::const_iterator i = self->begin();
	std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *std_vector_Sl_TruckBoris_Structure_Sg__select(std::vector< TruckBoris::Structure > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >* r = new std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >;
      std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::const_iterator i = self->begin();
      std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Structure_Sg__delete_at(std::vector< TruckBoris::Structure > *self,std::vector< TruckBoris::Structure >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Structure_Sg____delete2__(std::vector< TruckBoris::Structure > *self,std::vector< TruckBoris::Structure >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *std_vector_Sl_TruckBoris_Structure_Sg__reject_bang(std::vector< TruckBoris::Structure > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      self->erase( std::remove_if( self->begin(), self->end(),
            swig::yield< std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::value_type >() ), self->end() );
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Structure_Sg__pop(std::vector< TruckBoris::Structure > *self){
      if (self->empty()) return Qnil;
      std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::value_type >( x );
    }
SWIGINTERN std::vector< TruckBoris::Structure >::value_type const std_vector_Sl_TruckBoris_Structure_Sg__push(std::vector< TruckBoris::Structure > *self,std::vector< TruckBoris::Structure >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *std_vector_Sl_TruckBoris_Structure_Sg__reject(std::vector< TruckBoris::Structure > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >* r = new std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Structure_Sg__at(std::vector< TruckBoris::Structure > const *self,std::vector< TruckBoris::Structure >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Structure_Sg____getitem____SWIG_0(std::vector< TruckBoris::Structure > const *self,std::vector< TruckBoris::Structure >::difference_type i,std::vector< TruckBoris::Structure >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Structure_Sg____getitem____SWIG_1(std::vector< TruckBoris::Structure > const *self,std::vector< TruckBoris::Structure >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Structure_Sg____getitem____SWIG_2(std::vector< TruckBoris::Structure > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Structure_Sg____setitem____SWIG_0(std::vector< TruckBoris::Structure > *self,std::vector< TruckBoris::Structure >::difference_type i,std::vector< TruckBoris::Structure >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Structure_Sg____setitem____SWIG_1(std::vector< TruckBoris::Structure > *self,std::vector< TruckBoris::Structure >::difference_type i,std::vector< TruckBoris::Structure >::difference_type j,std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >* >( &v );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Structure_Sg__shift(std::vector< TruckBoris::Structure > *self){
      if (self->empty()) return Qnil;
      std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::value_type >( x );
    }
SWIGINTERN std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *std_vector_Sl_TruckBoris_Structure_Sg__insert__SWIG_0(std::vector< TruckBoris::Structure > *self,std::vector< TruckBoris::Structure >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::value_type val = swig::as<std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError, "%s",
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *std_vector_Sl_TruckBoris_Structure_Sg__unshift(std::vector< TruckBoris::Structure > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::value_type val = swig::as<std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError, "%s",
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }
SWIGINTERN std::vector< TruckBoris::Structure >::iterator std_vector_Sl_TruckBoris_Structure_Sg__erase__SWIG_0(std::vector< TruckBoris::Structure > *self,std::vector< TruckBoris::Structure >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< TruckBoris::Structure >::iterator std_vector_Sl_TruckBoris_Structure_Sg__erase__SWIG_1(std::vector< TruckBoris::Structure > *self,std::vector< TruckBoris::Structure >::iterator first,std::vector< TruckBoris::Structure >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< TruckBoris::Structure >::iterator std_vector_Sl_TruckBoris_Structure_Sg__insert__SWIG_1(std::vector< TruckBoris::Structure > *self,std::vector< TruckBoris::Structure >::iterator pos,std::vector< TruckBoris::Structure >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_TruckBoris_Structure_Sg__insert__SWIG_2(std::vector< TruckBoris::Structure > *self,std::vector< TruckBoris::Structure >::iterator pos,std::vector< TruckBoris::Structure >::size_type n,std::vector< TruckBoris::Structure >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits<TruckBoris::Field > {
      typedef pointer_category category;
      static const char* type_name() { return"TruckBoris::Field"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<TruckBoris::Field, std::allocator< TruckBoris::Field > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "TruckBoris::Field" "," "std::allocator< TruckBoris::Field >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > *std_vector_Sl_TruckBoris_Field_Sg__dup(std::vector< TruckBoris::Field > *self){
      return new std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Field_Sg__inspect(std::vector< TruckBoris::Field > *self){
      std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::const_iterator i = self->begin();
      std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Field_Sg__to_a(std::vector< TruckBoris::Field > *self){
      std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::const_iterator i = self->begin();
      std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Field_Sg__to_s(std::vector< TruckBoris::Field > *self){
      std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::iterator i = self->begin();
      std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Field_Sg__slice(std::vector< TruckBoris::Field > *self,std::vector< TruckBoris::Field >::difference_type i,std::vector< TruckBoris::Field >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > *std_vector_Sl_TruckBoris_Field_Sg__each(std::vector< TruckBoris::Field > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::const_iterator i = self->begin();
	std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > *std_vector_Sl_TruckBoris_Field_Sg__select(std::vector< TruckBoris::Field > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >* r = new std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >;
      std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::const_iterator i = self->begin();
      std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Field_Sg__delete_at(std::vector< TruckBoris::Field > *self,std::vector< TruckBoris::Field >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Field_Sg____delete2__(std::vector< TruckBoris::Field > *self,std::vector< TruckBoris::Field >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > *std_vector_Sl_TruckBoris_Field_Sg__reject_bang(std::vector< TruckBoris::Field > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      self->erase( std::remove_if( self->begin(), self->end(),
            swig::yield< std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::value_type >() ), self->end() );
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Field_Sg__pop(std::vector< TruckBoris::Field > *self){
      if (self->empty()) return Qnil;
      std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::value_type >( x );
    }
SWIGINTERN std::vector< TruckBoris::Field >::value_type const std_vector_Sl_TruckBoris_Field_Sg__push(std::vector< TruckBoris::Field > *self,std::vector< TruckBoris::Field >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > *std_vector_Sl_TruckBoris_Field_Sg__reject(std::vector< TruckBoris::Field > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >* r = new std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Field_Sg__at(std::vector< TruckBoris::Field > const *self,std::vector< TruckBoris::Field >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Field_Sg____getitem____SWIG_0(std::vector< TruckBoris::Field > const *self,std::vector< TruckBoris::Field >::difference_type i,std::vector< TruckBoris::Field >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Field_Sg____getitem____SWIG_1(std::vector< TruckBoris::Field > const *self,std::vector< TruckBoris::Field >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Field_Sg____getitem____SWIG_2(std::vector< TruckBoris::Field > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Field_Sg____setitem____SWIG_0(std::vector< TruckBoris::Field > *self,std::vector< TruckBoris::Field >::difference_type i,std::vector< TruckBoris::Field >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Field_Sg____setitem____SWIG_1(std::vector< TruckBoris::Field > *self,std::vector< TruckBoris::Field >::difference_type i,std::vector< TruckBoris::Field >::difference_type j,std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >* >( &v );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Field_Sg__shift(std::vector< TruckBoris::Field > *self){
      if (self->empty()) return Qnil;
      std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::value_type >( x );
    }
SWIGINTERN std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > *std_vector_Sl_TruckBoris_Field_Sg__insert__SWIG_0(std::vector< TruckBoris::Field > *self,std::vector< TruckBoris::Field >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::value_type val = swig::as<std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError, "%s",
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > *std_vector_Sl_TruckBoris_Field_Sg__unshift(std::vector< TruckBoris::Field > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::value_type val = swig::as<std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError, "%s",
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }
SWIGINTERN std::vector< TruckBoris::Field >::iterator std_vector_Sl_TruckBoris_Field_Sg__erase__SWIG_0(std::vector< TruckBoris::Field > *self,std::vector< TruckBoris::Field >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< TruckBoris::Field >::iterator std_vector_Sl_TruckBoris_Field_Sg__erase__SWIG_1(std::vector< TruckBoris::Field > *self,std::vector< TruckBoris::Field >::iterator first,std::vector< TruckBoris::Field >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< TruckBoris::Field >::iterator std_vector_Sl_TruckBoris_Field_Sg__insert__SWIG_1(std::vector< TruckBoris::Field > *self,std::vector< TruckBoris::Field >::iterator pos,std::vector< TruckBoris::Field >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_TruckBoris_Field_Sg__insert__SWIG_2(std::vector< TruckBoris::Field > *self,std::vector< TruckBoris::Field >::iterator pos,std::vector< TruckBoris::Field >::size_type n,std::vector< TruckBoris::Field >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits<TruckBoris::Typedef > {
      typedef pointer_category category;
      static const char* type_name() { return"TruckBoris::Typedef"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<TruckBoris::Typedef, std::allocator< TruckBoris::Typedef > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "TruckBoris::Typedef" "," "std::allocator< TruckBoris::Typedef >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *std_vector_Sl_TruckBoris_Typedef_Sg__dup(std::vector< TruckBoris::Typedef > *self){
      return new std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Typedef_Sg__inspect(std::vector< TruckBoris::Typedef > *self){
      std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::const_iterator i = self->begin();
      std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Typedef_Sg__to_a(std::vector< TruckBoris::Typedef > *self){
      std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::const_iterator i = self->begin();
      std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Typedef_Sg__to_s(std::vector< TruckBoris::Typedef > *self){
      std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::iterator i = self->begin();
      std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Typedef_Sg__slice(std::vector< TruckBoris::Typedef > *self,std::vector< TruckBoris::Typedef >::difference_type i,std::vector< TruckBoris::Typedef >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *std_vector_Sl_TruckBoris_Typedef_Sg__each(std::vector< TruckBoris::Typedef > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::const_iterator i = self->begin();
	std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *std_vector_Sl_TruckBoris_Typedef_Sg__select(std::vector< TruckBoris::Typedef > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >* r = new std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >;
      std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::const_iterator i = self->begin();
      std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Typedef_Sg__delete_at(std::vector< TruckBoris::Typedef > *self,std::vector< TruckBoris::Typedef >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Typedef_Sg____delete2__(std::vector< TruckBoris::Typedef > *self,std::vector< TruckBoris::Typedef >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *std_vector_Sl_TruckBoris_Typedef_Sg__reject_bang(std::vector< TruckBoris::Typedef > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      self->erase( std::remove_if( self->begin(), self->end(),
            swig::yield< std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::value_type >() ), self->end() );
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Typedef_Sg__pop(std::vector< TruckBoris::Typedef > *self){
      if (self->empty()) return Qnil;
      std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::value_type >( x );
    }
SWIGINTERN std::vector< TruckBoris::Typedef >::value_type const std_vector_Sl_TruckBoris_Typedef_Sg__push(std::vector< TruckBoris::Typedef > *self,std::vector< TruckBoris::Typedef >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *std_vector_Sl_TruckBoris_Typedef_Sg__reject(std::vector< TruckBoris::Typedef > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >* r = new std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Typedef_Sg__at(std::vector< TruckBoris::Typedef > const *self,std::vector< TruckBoris::Typedef >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Typedef_Sg____getitem____SWIG_0(std::vector< TruckBoris::Typedef > const *self,std::vector< TruckBoris::Typedef >::difference_type i,std::vector< TruckBoris::Typedef >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Typedef_Sg____getitem____SWIG_1(std::vector< TruckBoris::Typedef > const *self,std::vector< TruckBoris::Typedef >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Typedef_Sg____getitem____SWIG_2(std::vector< TruckBoris::Typedef > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Typedef_Sg____setitem____SWIG_0(std::vector< TruckBoris::Typedef > *self,std::vector< TruckBoris::Typedef >::difference_type i,std::vector< TruckBoris::Typedef >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Typedef_Sg____setitem____SWIG_1(std::vector< TruckBoris::Typedef > *self,std::vector< TruckBoris::Typedef >::difference_type i,std::vector< TruckBoris::Typedef >::difference_type j,std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >* >( &v );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_TruckBoris_Typedef_Sg__shift(std::vector< TruckBoris::Typedef > *self){
      if (self->empty()) return Qnil;
      std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::value_type >( x );
    }
SWIGINTERN std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *std_vector_Sl_TruckBoris_Typedef_Sg__insert__SWIG_0(std::vector< TruckBoris::Typedef > *self,std::vector< TruckBoris::Typedef >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::value_type val = swig::as<std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError, "%s",
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *std_vector_Sl_TruckBoris_Typedef_Sg__unshift(std::vector< TruckBoris::Typedef > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::value_type val = swig::as<std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError, "%s",
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }
SWIGINTERN std::vector< TruckBoris::Typedef >::iterator std_vector_Sl_TruckBoris_Typedef_Sg__erase__SWIG_0(std::vector< TruckBoris::Typedef > *self,std::vector< TruckBoris::Typedef >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< TruckBoris::Typedef >::iterator std_vector_Sl_TruckBoris_Typedef_Sg__erase__SWIG_1(std::vector< TruckBoris::Typedef > *self,std::vector< TruckBoris::Typedef >::iterator first,std::vector< TruckBoris::Typedef >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< TruckBoris::Typedef >::iterator std_vector_Sl_TruckBoris_Typedef_Sg__insert__SWIG_1(std::vector< TruckBoris::Typedef > *self,std::vector< TruckBoris::Typedef >::iterator pos,std::vector< TruckBoris::Typedef >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_TruckBoris_Typedef_Sg__insert__SWIG_2(std::vector< TruckBoris::Typedef > *self,std::vector< TruckBoris::Typedef >::iterator pos,std::vector< TruckBoris::Typedef >::size_type n,std::vector< TruckBoris::Typedef >::value_type const &x){ self->insert(pos, n, x); }

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(VALUE obj, char** cptr, size_t* psize, int *alloc)
{
  if (TYPE(obj) == T_STRING) {
    char *cstr = StringValuePtr(obj); 
    size_t size = RSTRING_LEN(obj) + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy((new char[size]), cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *)vptr;
	if (psize) *psize = vptr ? (strlen((char*)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }  
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (VALUE obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_std_string (VALUE obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > LONG_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : Qnil;
    } else {
      return rb_str_new(carray, static_cast< long >(size));
    }
  } else {
    return Qnil;
  }
}


SWIGINTERNINLINE VALUE
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


namespace swig {
  template <> struct traits<std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };  
  template <>  struct traits_asval<std::string > {   
    typedef std::string value_type;
    static int asval(VALUE obj, value_type *val) { 
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from<std::string > {
    typedef std::string value_type;
    static VALUE from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg__dup(std::vector< std::string > *self){
      return new std::vector<std::string,std::allocator< std::string > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_std_string_Sg__inspect(std::vector< std::string > *self){
      std::vector<std::string,std::allocator< std::string > >::const_iterator i = self->begin();
      std::vector<std::string,std::allocator< std::string > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::vector<std::string,std::allocator< std::string > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector<std::string,std::allocator< std::string > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_std_string_Sg__to_a(std::vector< std::string > *self){
      std::vector<std::string,std::allocator< std::string > >::const_iterator i = self->begin();
      std::vector<std::string,std::allocator< std::string > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<std::string,std::allocator< std::string > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_std_string_Sg__to_s(std::vector< std::string > *self){
      std::vector<std::string,std::allocator< std::string > >::iterator i = self->begin();
      std::vector<std::string,std::allocator< std::string > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<std::string,std::allocator< std::string > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_std_string_Sg__slice(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::vector<std::string,std::allocator< std::string > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg__each(std::vector< std::string > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector<std::string,std::allocator< std::string > >::const_iterator i = self->begin();
	std::vector<std::string,std::allocator< std::string > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector<std::string,std::allocator< std::string > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg__select(std::vector< std::string > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<std::string,std::allocator< std::string > >* r = new std::vector<std::string,std::allocator< std::string > >;
      std::vector<std::string,std::allocator< std::string > >::const_iterator i = self->begin();
      std::vector<std::string,std::allocator< std::string > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector<std::string,std::allocator< std::string > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_std_string_Sg__delete_at(std::vector< std::string > *self,std::vector< std::string >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector<std::string,std::allocator< std::string > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector<std::string,std::allocator< std::string > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_std_string_Sg____delete2__(std::vector< std::string > *self,std::vector< std::string >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg__reject_bang(std::vector< std::string > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      self->erase( std::remove_if( self->begin(), self->end(),
            swig::yield< std::vector<std::string,std::allocator< std::string > >::value_type >() ), self->end() );
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_std_string_Sg__pop(std::vector< std::string > *self){
      if (self->empty()) return Qnil;
      std::vector<std::string,std::allocator< std::string > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector<std::string,std::allocator< std::string > >::value_type >( x );
    }
SWIGINTERN std::vector< std::string >::value_type const std_vector_Sl_std_string_Sg__push(std::vector< std::string > *self,std::vector< std::string >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg__reject(std::vector< std::string > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<std::string,std::allocator< std::string > >* r = new std::vector<std::string,std::allocator< std::string > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector<std::string,std::allocator< std::string > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_std_string_Sg__at(std::vector< std::string > const *self,std::vector< std::string >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<std::string,std::allocator< std::string > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_std_string_Sg____getitem____SWIG_0(std::vector< std::string > const *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector<std::string,std::allocator< std::string > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_std_string_Sg____getitem____SWIG_1(std::vector< std::string > const *self,std::vector< std::string >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<std::string,std::allocator< std::string > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_std_string_Sg____getitem____SWIG_2(std::vector< std::string > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::vector<std::string,std::allocator< std::string > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_std_string_Sg____setitem____SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::vector<std::string,std::allocator< std::string > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_std_string_Sg____setitem____SWIG_1(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j,std::vector< std::string,std::allocator< std::string > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector<std::string,std::allocator< std::string > >* >( &v );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_std_string_Sg__shift(std::vector< std::string > *self){
      if (self->empty()) return Qnil;
      std::vector<std::string,std::allocator< std::string > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector<std::string,std::allocator< std::string > >::value_type >( x );
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg__insert__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector<std::string,std::allocator< std::string > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector<std::string,std::allocator< std::string > >::value_type val = swig::as<std::vector<std::string,std::allocator< std::string > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector<std::string,std::allocator< std::string > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError, "%s",
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector<std::string,std::allocator< std::string > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg__unshift(std::vector< std::string > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector<std::string,std::allocator< std::string > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector<std::string,std::allocator< std::string > >::value_type val = swig::as<std::vector<std::string,std::allocator< std::string > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError, "%s",
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector<std::string,std::allocator< std::string > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__erase__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__erase__SWIG_1(std::vector< std::string > *self,std::vector< std::string >::iterator first,std::vector< std::string >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__insert__SWIG_1(std::vector< std::string > *self,std::vector< std::string >::iterator pos,std::vector< std::string >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_string_Sg__insert__SWIG_2(std::vector< std::string > *self,std::vector< std::string >::iterator pos,std::vector< std::string >::size_type n,std::vector< std::string >::value_type const &x){ self->insert(pos, n, x); }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg__map_bang(std::vector< std::string > *self){

    if ( !rb_block_given_p() )
      rb_raise( rb_eArgError, "No block given" );

    VALUE r = Qnil;
    std::vector< std::string >::iterator i = self->begin();
    std::vector< std::string >::iterator e = self->end();

    try {
      for ( ; i != e; ++i )
	{
	  r = swig::from< std::string >( *i );
	  r = rb_yield( r );
	  *i = swig::as< std::string >( r );
	}
    }
    catch ( const std::invalid_argument& )
      {
	rb_raise(rb_eTypeError,
		 "Yield block did not return a valid element for " "std::vector");
      }
    
    return self;
  }
SWIGINTERN VALUE std_vector_Sl_std_string_Sg____delete__(std::vector< std::string > *self,std::string const &val){
    VALUE r = Qnil;
    std::vector<std::string >::iterator e = self->end();
    std::vector<std::string >::iterator i = std::remove( self->begin(), e, val );
    // remove dangling elements now
    self->erase( i, e );
    
    if ( i != e )
      r = swig::from< std::string >( val );
    else if ( rb_block_given_p() )
      r = rb_yield(Qnil);
    return r;
  }

SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsVal_bool (VALUE obj, bool *val)
{
  if (obj == Qtrue) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == Qfalse) {
    if (val) *val = false;
    return SWIG_OK;
  } else {
    int res = 0;
    if (SWIG_AsVal_int (obj, &res) == SWIG_OK) {    
      if (val) *val = res ? true : false;
      return SWIG_OK;
    }
  }  
  return SWIG_TypeError;
}

static swig_class SwigClassGC_VALUE;


/*
  Document-method: Rtruckboris::GC_VALUE.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_inspect(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  swig::GC_VALUE r1 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  r1 = self; arg1 = &r1;
  result = (VALUE)((swig::GC_VALUE const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::GC_VALUE.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_to_s(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  swig::GC_VALUE r1 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  r1 = self; arg1 = &r1;
  result = (VALUE)((swig::GC_VALUE const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassConstIterator;

SWIGINTERN void
free_swig_ConstIterator(swig::ConstIterator *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ConstIterator_value(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (VALUE)((swig::ConstIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::ConstIterator.dup

  call-seq:
    dup -> ConstIterator

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_dup(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->dup();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::ConstIterator.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_inspect(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (VALUE)((swig::ConstIterator const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::ConstIterator.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_to_s(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (VALUE)((swig::ConstIterator const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","next", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::ConstIterator *)(arg1)->next(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (swig::ConstIterator *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ConstIterator_next__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator_next__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ConstIterator.next", 
    "    swig::ConstIterator * ConstIterator.next(size_t n)\n"
    "    swig::ConstIterator * ConstIterator.next()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_previous__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","previous", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::ConstIterator *)(arg1)->previous(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_previous__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (swig::ConstIterator *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator_previous(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ConstIterator_previous__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator_previous__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ConstIterator.previous", 
    "    swig::ConstIterator * ConstIterator.previous(size_t n)\n"
    "    swig::ConstIterator * ConstIterator.previous()\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::ConstIterator.==

  call-seq:
    ==(x) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___eq__(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  swig::ConstIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__ConstIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::ConstIterator const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::ConstIterator const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::ConstIterator * >(argp2);
  result = (bool)((swig::ConstIterator const *)arg1)->operator ==((swig::ConstIterator const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::ConstIterator.+

  call-seq:
    +(n) -> ConstIterator

Add operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___add__(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::ConstIterator.-

  call-seq:
    -(n) -> ConstIterator
    -(x) -> ptrdiff_t

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  swig::ConstIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__ConstIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::ConstIterator const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::ConstIterator const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::ConstIterator * >(argp2);
  result = ((swig::ConstIterator const *)arg1)->operator -((swig::ConstIterator const &)*arg2);
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ConstIterator___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__sub__.new", 
    "    __sub__.new(ptrdiff_t n)\n"
    "    __sub__.new(swig::ConstIterator const &x)\n");
  
  return Qnil;
}


static swig_class SwigClassIterator;

SWIGINTERN VALUE
_wrap_Iterator_valuee___(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  VALUE *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE temp2 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","setValue", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  temp2 = static_cast< VALUE >(argv[0]);
  arg2 = &temp2;
  result = (VALUE)(arg1)->setValue((VALUE const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::Iterator.dup

  call-seq:
    dup -> Iterator

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_Iterator_dup(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (swig::Iterator *)((swig::Iterator const *)arg1)->dup();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","next", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::Iterator *)(arg1)->next(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  try {
    result = (swig::Iterator *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Iterator_next__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator_next__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Iterator.next", 
    "    swig::Iterator * Iterator.next(size_t n)\n"
    "    swig::Iterator * Iterator.next()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_previous__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","previous", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::Iterator *)(arg1)->previous(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_previous__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  try {
    result = (swig::Iterator *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator_previous(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Iterator_previous__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator_previous__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Iterator.previous", 
    "    swig::Iterator * Iterator.previous(size_t n)\n"
    "    swig::Iterator * Iterator.previous()\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::Iterator.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_Iterator_inspect(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (VALUE)((swig::Iterator const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::Iterator.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_Iterator_to_s(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (VALUE)((swig::Iterator const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::Iterator.==

  call-seq:
    ==(x) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___eq__(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  swig::Iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__Iterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::Iterator const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::Iterator const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::Iterator * >(argp2);
  result = (bool)((swig::Iterator const *)arg1)->operator ==((swig::Iterator const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::Iterator.+

  call-seq:
    +(n) -> Iterator

Add operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___add__(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::Iterator *)((swig::Iterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::Iterator.-

  call-seq:
    -(n) -> Iterator
    -(x) -> ptrdiff_t

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::Iterator *)((swig::Iterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  swig::Iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__Iterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::Iterator const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::Iterator const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::Iterator * >(argp2);
  result = ((swig::Iterator const *)arg1)->operator -((swig::Iterator const &)*arg2);
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__Iterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Iterator___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__sub__.new", 
    "    __sub__.new(ptrdiff_t n)\n"
    "    __sub__.new(swig::Iterator const &x)\n");
  
  return Qnil;
}


SWIGINTERN void
free_swig_Iterator(swig::Iterator *arg1) {
    delete arg1;
}

static swig_class SwigClassVectorEnum;


/*
  Document-method: Rtruckboris::VectorEnum.dup

  call-seq:
    dup -> VectorEnum

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_dup(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  result = (std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *)std_vector_Sl_TruckBoris_Enum_Sg__dup(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Enum_Sg__inspect(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.to_a

  call-seq:
    to_a -> VALUE

Convert VectorEnum to an Array.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Enum_Sg__to_a(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Enum_Sg__to_s(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the VectorEnum.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_slice(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  std::vector< TruckBoris::Enum >::difference_type arg2 ;
  std::vector< TruckBoris::Enum >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Enum >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::Enum >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_TruckBoris_Enum_Sg__slice(arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.each

  call-seq:
    each -> VectorEnum

Iterate thru each element in the VectorEnum.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_each(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  result = (std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *)std_vector_Sl_TruckBoris_Enum_Sg__each(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.select

  call-seq:
    select -> VectorEnum

Iterate thru each element in the VectorEnum and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_select(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  result = (std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *)std_vector_Sl_TruckBoris_Enum_Sg__select(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  std::vector< TruckBoris::Enum >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Enum >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_TruckBoris_Enum_Sg__delete_at(arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorEnum___delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  std::vector< TruckBoris::Enum >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TruckBoris__Enum,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::value_type const &","__delete2__", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Enum >::value_type const &","__delete2__", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::Enum >::value_type * >(argp2);
  result = (VALUE)std_vector_Sl_TruckBoris_Enum_Sg____delete2__(arg1,(TruckBoris::Enum const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.reject!

  call-seq:
    reject! -> VectorEnum

Iterate thru each element in the VectorEnum and reject those that fail a condition.  A block must be provided.  VectorEnum is modified in place.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  result = (std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *)std_vector_Sl_TruckBoris_Enum_Sg__reject_bang(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the VectorEnum.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_pop(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Enum_Sg__pop(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.push

  call-seq:
    push(e) -> Enum

Add an element at the end of the VectorEnum.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_push(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  std::vector< TruckBoris::Enum >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< TruckBoris::Enum >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TruckBoris__Enum,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::value_type const &","push", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Enum >::value_type const &","push", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::Enum >::value_type * >(argp2);
  result = std_vector_Sl_TruckBoris_Enum_Sg__push(arg1,(TruckBoris::Enum const &)*arg2);
  vresult = SWIG_NewPointerObj((new std::vector< TruckBoris::Enum >::value_type(static_cast< const std::vector< TruckBoris::Enum >::value_type& >(result))), SWIGTYPE_p_TruckBoris__Enum, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.reject

  call-seq:
    reject -> VectorEnum

Iterate thru each element in the VectorEnum and reject those that fail a condition returning a new VectorEnum.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_reject(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  result = (std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *)std_vector_Sl_TruckBoris_Enum_Sg__reject(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_at(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  std::vector< TruckBoris::Enum >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Enum >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_TruckBoris_Enum_Sg__at((std::vector< TruckBoris::Enum > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_VectorEnum___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  std::vector< TruckBoris::Enum >::difference_type arg2 ;
  std::vector< TruckBoris::Enum >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Enum >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::Enum >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_TruckBoris_Enum_Sg____getitem____SWIG_0((std::vector< TruckBoris::Enum > const *)arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorEnum___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  std::vector< TruckBoris::Enum >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Enum >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_TruckBoris_Enum_Sg____getitem____SWIG_1((std::vector< TruckBoris::Enum > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorEnum___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  arg2 = argv[0];
  result = (VALUE)std_vector_Sl_TruckBoris_Enum_Sg____getitem____SWIG_2((std::vector< TruckBoris::Enum > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorEnum___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorEnum___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_VectorEnum___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorEnum___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< TruckBoris::Enum >::difference_type i, std::vector< TruckBoris::Enum >::difference_type j)\n"
    "    VALUE __getitem__(std::vector< TruckBoris::Enum >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_VectorEnum___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  std::vector< TruckBoris::Enum >::difference_type arg2 ;
  std::vector< TruckBoris::Enum >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Enum >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__Enum,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::value_type const &","__setitem__", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Enum >::value_type const &","__setitem__", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::Enum >::value_type * >(argp3);
  result = (VALUE)std_vector_Sl_TruckBoris_Enum_Sg____setitem____SWIG_0(arg1,arg2,(TruckBoris::Enum const &)*arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorEnum___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  std::vector< TruckBoris::Enum >::difference_type arg2 ;
  std::vector< TruckBoris::Enum >::difference_type arg3 ;
  std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Enum >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::Enum >::difference_type >(val3);
  {
    std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *ptr = (std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  try {
    result = (VALUE)std_vector_Sl_TruckBoris_Enum_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > const &)*arg4);
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorEnum___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TruckBoris__Enum, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorEnum___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorEnum___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< TruckBoris::Enum >::difference_type i, std::vector< TruckBoris::Enum >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< TruckBoris::Enum >::difference_type i, std::vector< TruckBoris::Enum >::difference_type j, std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the VectorEnum.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_shift(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Enum_Sg__shift(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.insert

  call-seq:
    insert(pos, argc) -> VectorEnum
    insert(pos, x) -> std::vector< TruckBoris::Enum >::iterator
    insert(pos, n, x)

Insert one or more new elements in the VectorEnum.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  std::vector< TruckBoris::Enum >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Enum >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  result = (std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *)std_vector_Sl_TruckBoris_Enum_Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.unshift

  call-seq:
    unshift(argc) -> VectorEnum

Add one or more elements at the beginning of the VectorEnum.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  result = (std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *)std_vector_Sl_TruckBoris_Enum_Sg__unshift(arg1,arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VectorEnum__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (std::vector< TruckBoris::Enum > *)new std::vector< TruckBoris::Enum >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VectorEnum__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< TruckBoris::Enum > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *ptr = (std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > const &","vector<(TruckBoris::Enum)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Enum > const &","vector<(TruckBoris::Enum)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  result = (std::vector< TruckBoris::Enum > *)new std::vector< TruckBoris::Enum >((std::vector< TruckBoris::Enum > const &)*arg1);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.empty?

  call-seq:
    empty? -> bool

Check if the VectorEnum is empty or not.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  result = (bool)((std::vector< TruckBoris::Enum > const *)arg1)->empty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.size

  call-seq:
    size -> std::vector< TruckBoris::Enum >::size_type

Size or Length of the VectorEnum.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_size(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Enum >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  result = ((std::vector< TruckBoris::Enum > const *)arg1)->size();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.clear

  call-seq:
    clear

Clear VectorEnum contents.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_clear(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorEnum_swap(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  std::vector< TruckBoris::Enum > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Enum > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp2);
  (arg1)->swap(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorEnum_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< TruckBoris::Enum > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  result = ((std::vector< TruckBoris::Enum > const *)arg1)->get_allocator();
  vresult = SWIG_NewPointerObj((new std::vector< TruckBoris::Enum >::allocator_type(static_cast< const std::vector< TruckBoris::Enum >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_TruckBoris__Enum_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.begin

  call-seq:
    begin -> std::vector< TruckBoris::Enum >::iterator

Return an iterator to the beginning of the VectorEnum.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_begin(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Enum >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  result = (arg1)->begin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Enum >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.end

  call-seq:
    end -> std::vector< TruckBoris::Enum >::iterator

Return an iterator to past the end of the VectorEnum.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_end(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Enum >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  result = (arg1)->end();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Enum >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.rbegin

  call-seq:
    rbegin -> std::vector< TruckBoris::Enum >::reverse_iterator

Return a reverse iterator to the beginning (the end) of the VectorEnum.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Enum >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  result = (arg1)->rbegin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Enum >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.rend

  call-seq:
    rend -> std::vector< TruckBoris::Enum >::reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the VectorEnum.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_rend(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Enum >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  result = (arg1)->rend();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Enum >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VectorEnum__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< TruckBoris::Enum > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::size_type","vector<(TruckBoris::Enum)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< TruckBoris::Enum >::size_type >(val1);
  result = (std::vector< TruckBoris::Enum > *)new std::vector< TruckBoris::Enum >(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the VectorEnum.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  std::vector< TruckBoris::Enum >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Enum >::size_type >(val2);
  (arg1)->resize(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.erase

  call-seq:
    erase(pos) -> std::vector< TruckBoris::Enum >::iterator
    erase(first, last) -> std::vector< TruckBoris::Enum >::iterator

Delete a portion of the VectorEnum.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  std::vector< TruckBoris::Enum >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< TruckBoris::Enum >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Enum >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Enum >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::iterator","erase", 2, argv[0] ));
    }
  }
  result = std_vector_Sl_TruckBoris_Enum_Sg__erase__SWIG_0(arg1,arg2);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Enum >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorEnum_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  std::vector< TruckBoris::Enum >::iterator arg2 ;
  std::vector< TruckBoris::Enum >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::vector< TruckBoris::Enum >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Enum >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Enum >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Enum >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Enum >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::iterator","erase", 3, argv[1] ));
    }
  }
  result = std_vector_Sl_TruckBoris_Enum_Sg__erase__SWIG_1(arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Enum >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorEnum_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Enum >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorEnum_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Enum >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Enum >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorEnum_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "erase", 
    "    std::vector< TruckBoris::Enum >::iterator erase(std::vector< TruckBoris::Enum >::iterator pos)\n"
    "    std::vector< TruckBoris::Enum >::iterator erase(std::vector< TruckBoris::Enum >::iterator first, std::vector< TruckBoris::Enum >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_VectorEnum_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_VectorEnum_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_VectorEnum__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum >::size_type arg1 ;
  std::vector< TruckBoris::Enum >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< TruckBoris::Enum > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::size_type","vector<(TruckBoris::Enum)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< TruckBoris::Enum >::size_type >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_TruckBoris__Enum,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::value_type const &","vector<(TruckBoris::Enum)>", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Enum >::value_type const &","vector<(TruckBoris::Enum)>", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::Enum >::value_type * >(argp2);
  result = (std::vector< TruckBoris::Enum > *)new std::vector< TruckBoris::Enum >(arg1,(std::vector< TruckBoris::Enum >::value_type const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_VectorEnum(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_VectorEnum__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorEnum__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorEnum__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TruckBoris__Enum, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorEnum__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "VectorEnum.new", 
    "    VectorEnum.new()\n"
    "    VectorEnum.new(std::vector< TruckBoris::Enum > const &)\n"
    "    VectorEnum.new(std::vector< TruckBoris::Enum >::size_type size)\n"
    "    VectorEnum.new(std::vector< TruckBoris::Enum >::size_type size, std::vector< TruckBoris::Enum >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.front

  call-seq:
    front -> Enum

Return the first element in VectorEnum.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_front(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Enum >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  result = (std::vector< TruckBoris::Enum >::value_type *) &((std::vector< TruckBoris::Enum > const *)arg1)->front();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TruckBoris__Enum, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.back

  call-seq:
    back -> Enum

Return the last element in VectorEnum.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_back(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Enum >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  result = (std::vector< TruckBoris::Enum >::value_type *) &((std::vector< TruckBoris::Enum > const *)arg1)->back();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TruckBoris__Enum, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.assign

  call-seq:
    assign(n, x)

Assign a new VectorEnum or portion of it.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_assign(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  std::vector< TruckBoris::Enum >::size_type arg2 ;
  std::vector< TruckBoris::Enum >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Enum >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__Enum,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::value_type const &","assign", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Enum >::value_type const &","assign", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::Enum >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< TruckBoris::Enum >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the VectorEnum.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  std::vector< TruckBoris::Enum >::size_type arg2 ;
  std::vector< TruckBoris::Enum >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Enum >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__Enum,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::value_type const &","resize", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Enum >::value_type const &","resize", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::Enum >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< TruckBoris::Enum >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorEnum_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorEnum_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TruckBoris__Enum, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorEnum_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "VectorEnum.resize", 
    "    void VectorEnum.resize(std::vector< TruckBoris::Enum >::size_type new_size)\n"
    "    void VectorEnum.resize(std::vector< TruckBoris::Enum >::size_type new_size, std::vector< TruckBoris::Enum >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.insert

  call-seq:
    insert(pos, argc) -> VectorEnum
    insert(pos, x) -> std::vector< TruckBoris::Enum >::iterator
    insert(pos, n, x)

Insert one or more new elements in the VectorEnum.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  std::vector< TruckBoris::Enum >::iterator arg2 ;
  std::vector< TruckBoris::Enum >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< TruckBoris::Enum >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Enum >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Enum >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::iterator","insert", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__Enum,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::value_type const &","insert", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Enum >::value_type const &","insert", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::Enum >::value_type * >(argp3);
  result = std_vector_Sl_TruckBoris_Enum_Sg__insert__SWIG_1(arg1,arg2,(TruckBoris::Enum const &)*arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Enum >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorEnum_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  std::vector< TruckBoris::Enum >::iterator arg2 ;
  std::vector< TruckBoris::Enum >::size_type arg3 ;
  std::vector< TruckBoris::Enum >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Enum >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Enum >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::Enum >::size_type >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_TruckBoris__Enum,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::value_type const &","insert", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Enum >::value_type const &","insert", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< std::vector< TruckBoris::Enum >::value_type * >(argp4);
  std_vector_Sl_TruckBoris_Enum_Sg__insert__SWIG_2(arg1,arg2,arg3,(TruckBoris::Enum const &)*arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorEnum_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Enum >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TruckBoris__Enum, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorEnum_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_VectorEnum_insert__SWIG_0(nargs, args, self);
          }
          return _wrap_VectorEnum_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Enum >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_TruckBoris__Enum, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorEnum_insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< TruckBoris::Enum >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< TruckBoris::Enum >::iterator pos, std::vector< TruckBoris::Enum >::value_type const &x)\n"
    "    void insert(std::vector< TruckBoris::Enum >::iterator pos, std::vector< TruckBoris::Enum >::size_type n, std::vector< TruckBoris::Enum >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.reserve

  call-seq:
    reserve(n)

Reserve memory in the VectorEnum for a number of elements.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  std::vector< TruckBoris::Enum >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Enum >::size_type >(val2);
  (arg1)->reserve(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnum.capacity

  call-seq:
    capacity -> std::vector< TruckBoris::Enum >::size_type

Reserved capacity of the VectorEnum.
*/
SWIGINTERN VALUE
_wrap_VectorEnum_capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Enum > *arg1 = (std::vector< TruckBoris::Enum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Enum >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Enum > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Enum > * >(argp1);
  result = ((std::vector< TruckBoris::Enum > const *)arg1)->capacity();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_TruckBoris_Enum_Sg_(std::vector< TruckBoris::Enum > *arg1) {
    delete arg1;
}

static swig_class SwigClassVectorEnumConstant;


/*
  Document-method: Rtruckboris::VectorEnumConstant.dup

  call-seq:
    dup -> VectorEnumConstant

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_dup(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  result = (std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *)std_vector_Sl_TruckBoris_EnumConstant_Sg__dup(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_EnumConstant_Sg__inspect(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.to_a

  call-seq:
    to_a -> VALUE

Convert VectorEnumConstant to an Array.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_EnumConstant_Sg__to_a(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_EnumConstant_Sg__to_s(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the VectorEnumConstant.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_slice(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  std::vector< TruckBoris::EnumConstant >::difference_type arg2 ;
  std::vector< TruckBoris::EnumConstant >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::EnumConstant >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::EnumConstant >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_TruckBoris_EnumConstant_Sg__slice(arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.each

  call-seq:
    each -> VectorEnumConstant

Iterate thru each element in the VectorEnumConstant.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_each(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  result = (std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *)std_vector_Sl_TruckBoris_EnumConstant_Sg__each(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.select

  call-seq:
    select -> VectorEnumConstant

Iterate thru each element in the VectorEnumConstant and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_select(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  result = (std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *)std_vector_Sl_TruckBoris_EnumConstant_Sg__select(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  std::vector< TruckBoris::EnumConstant >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::EnumConstant >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_TruckBoris_EnumConstant_Sg__delete_at(arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorEnumConstant___delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  std::vector< TruckBoris::EnumConstant >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TruckBoris__EnumConstant,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::value_type const &","__delete2__", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::EnumConstant >::value_type const &","__delete2__", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::EnumConstant >::value_type * >(argp2);
  result = (VALUE)std_vector_Sl_TruckBoris_EnumConstant_Sg____delete2__(arg1,(TruckBoris::EnumConstant const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.reject!

  call-seq:
    reject! -> VectorEnumConstant

Iterate thru each element in the VectorEnumConstant and reject those that fail a condition.  A block must be provided.  VectorEnumConstant is modified in place.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  result = (std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *)std_vector_Sl_TruckBoris_EnumConstant_Sg__reject_bang(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the VectorEnumConstant.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_pop(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_EnumConstant_Sg__pop(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.push

  call-seq:
    push(e) -> EnumConstant

Add an element at the end of the VectorEnumConstant.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_push(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  std::vector< TruckBoris::EnumConstant >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< TruckBoris::EnumConstant >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TruckBoris__EnumConstant,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::value_type const &","push", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::EnumConstant >::value_type const &","push", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::EnumConstant >::value_type * >(argp2);
  result = std_vector_Sl_TruckBoris_EnumConstant_Sg__push(arg1,(TruckBoris::EnumConstant const &)*arg2);
  vresult = SWIG_NewPointerObj((new std::vector< TruckBoris::EnumConstant >::value_type(static_cast< const std::vector< TruckBoris::EnumConstant >::value_type& >(result))), SWIGTYPE_p_TruckBoris__EnumConstant, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.reject

  call-seq:
    reject -> VectorEnumConstant

Iterate thru each element in the VectorEnumConstant and reject those that fail a condition returning a new VectorEnumConstant.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_reject(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  result = (std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *)std_vector_Sl_TruckBoris_EnumConstant_Sg__reject(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_at(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  std::vector< TruckBoris::EnumConstant >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::EnumConstant >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_TruckBoris_EnumConstant_Sg__at((std::vector< TruckBoris::EnumConstant > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  std::vector< TruckBoris::EnumConstant >::difference_type arg2 ;
  std::vector< TruckBoris::EnumConstant >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::EnumConstant >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::EnumConstant >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_TruckBoris_EnumConstant_Sg____getitem____SWIG_0((std::vector< TruckBoris::EnumConstant > const *)arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorEnumConstant___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  std::vector< TruckBoris::EnumConstant >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::EnumConstant >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_TruckBoris_EnumConstant_Sg____getitem____SWIG_1((std::vector< TruckBoris::EnumConstant > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorEnumConstant___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  arg2 = argv[0];
  result = (VALUE)std_vector_Sl_TruckBoris_EnumConstant_Sg____getitem____SWIG_2((std::vector< TruckBoris::EnumConstant > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorEnumConstant___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorEnumConstant___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_VectorEnumConstant___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorEnumConstant___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< TruckBoris::EnumConstant >::difference_type i, std::vector< TruckBoris::EnumConstant >::difference_type j)\n"
    "    VALUE __getitem__(std::vector< TruckBoris::EnumConstant >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  std::vector< TruckBoris::EnumConstant >::difference_type arg2 ;
  std::vector< TruckBoris::EnumConstant >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::EnumConstant >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__EnumConstant,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::value_type const &","__setitem__", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::EnumConstant >::value_type const &","__setitem__", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::EnumConstant >::value_type * >(argp3);
  result = (VALUE)std_vector_Sl_TruckBoris_EnumConstant_Sg____setitem____SWIG_0(arg1,arg2,(TruckBoris::EnumConstant const &)*arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorEnumConstant___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  std::vector< TruckBoris::EnumConstant >::difference_type arg2 ;
  std::vector< TruckBoris::EnumConstant >::difference_type arg3 ;
  std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::EnumConstant >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::EnumConstant >::difference_type >(val3);
  {
    std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *ptr = (std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  try {
    result = (VALUE)std_vector_Sl_TruckBoris_EnumConstant_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > const &)*arg4);
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorEnumConstant___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TruckBoris__EnumConstant, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorEnumConstant___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorEnumConstant___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< TruckBoris::EnumConstant >::difference_type i, std::vector< TruckBoris::EnumConstant >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< TruckBoris::EnumConstant >::difference_type i, std::vector< TruckBoris::EnumConstant >::difference_type j, std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the VectorEnumConstant.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_shift(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_EnumConstant_Sg__shift(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.insert

  call-seq:
    insert(pos, argc) -> VectorEnumConstant
    insert(pos, x) -> std::vector< TruckBoris::EnumConstant >::iterator
    insert(pos, n, x)

Insert one or more new elements in the VectorEnumConstant.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  std::vector< TruckBoris::EnumConstant >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::EnumConstant >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  result = (std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *)std_vector_Sl_TruckBoris_EnumConstant_Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.unshift

  call-seq:
    unshift(argc) -> VectorEnumConstant

Add one or more elements at the beginning of the VectorEnumConstant.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  result = (std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *)std_vector_Sl_TruckBoris_EnumConstant_Sg__unshift(arg1,arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VectorEnumConstant__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (std::vector< TruckBoris::EnumConstant > *)new std::vector< TruckBoris::EnumConstant >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VectorEnumConstant__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< TruckBoris::EnumConstant > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *ptr = (std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > const &","vector<(TruckBoris::EnumConstant)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::EnumConstant > const &","vector<(TruckBoris::EnumConstant)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  result = (std::vector< TruckBoris::EnumConstant > *)new std::vector< TruckBoris::EnumConstant >((std::vector< TruckBoris::EnumConstant > const &)*arg1);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.empty?

  call-seq:
    empty? -> bool

Check if the VectorEnumConstant is empty or not.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  result = (bool)((std::vector< TruckBoris::EnumConstant > const *)arg1)->empty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.size

  call-seq:
    size -> std::vector< TruckBoris::EnumConstant >::size_type

Size or Length of the VectorEnumConstant.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_size(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::EnumConstant >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  result = ((std::vector< TruckBoris::EnumConstant > const *)arg1)->size();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.clear

  call-seq:
    clear

Clear VectorEnumConstant contents.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_clear(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorEnumConstant_swap(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  std::vector< TruckBoris::EnumConstant > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::EnumConstant > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp2);
  (arg1)->swap(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorEnumConstant_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< TruckBoris::EnumConstant > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  result = ((std::vector< TruckBoris::EnumConstant > const *)arg1)->get_allocator();
  vresult = SWIG_NewPointerObj((new std::vector< TruckBoris::EnumConstant >::allocator_type(static_cast< const std::vector< TruckBoris::EnumConstant >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_TruckBoris__EnumConstant_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.begin

  call-seq:
    begin -> std::vector< TruckBoris::EnumConstant >::iterator

Return an iterator to the beginning of the VectorEnumConstant.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_begin(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::EnumConstant >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  result = (arg1)->begin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::EnumConstant >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.end

  call-seq:
    end -> std::vector< TruckBoris::EnumConstant >::iterator

Return an iterator to past the end of the VectorEnumConstant.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_end(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::EnumConstant >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  result = (arg1)->end();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::EnumConstant >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.rbegin

  call-seq:
    rbegin -> std::vector< TruckBoris::EnumConstant >::reverse_iterator

Return a reverse iterator to the beginning (the end) of the VectorEnumConstant.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::EnumConstant >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  result = (arg1)->rbegin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::EnumConstant >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.rend

  call-seq:
    rend -> std::vector< TruckBoris::EnumConstant >::reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the VectorEnumConstant.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_rend(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::EnumConstant >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  result = (arg1)->rend();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::EnumConstant >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VectorEnumConstant__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< TruckBoris::EnumConstant > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::size_type","vector<(TruckBoris::EnumConstant)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< TruckBoris::EnumConstant >::size_type >(val1);
  result = (std::vector< TruckBoris::EnumConstant > *)new std::vector< TruckBoris::EnumConstant >(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the VectorEnumConstant.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  std::vector< TruckBoris::EnumConstant >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::EnumConstant >::size_type >(val2);
  (arg1)->resize(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.erase

  call-seq:
    erase(pos) -> std::vector< TruckBoris::EnumConstant >::iterator
    erase(first, last) -> std::vector< TruckBoris::EnumConstant >::iterator

Delete a portion of the VectorEnumConstant.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  std::vector< TruckBoris::EnumConstant >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< TruckBoris::EnumConstant >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::EnumConstant >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::EnumConstant >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::iterator","erase", 2, argv[0] ));
    }
  }
  result = std_vector_Sl_TruckBoris_EnumConstant_Sg__erase__SWIG_0(arg1,arg2);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::EnumConstant >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorEnumConstant_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  std::vector< TruckBoris::EnumConstant >::iterator arg2 ;
  std::vector< TruckBoris::EnumConstant >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::vector< TruckBoris::EnumConstant >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::EnumConstant >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::EnumConstant >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::EnumConstant >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::EnumConstant >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::iterator","erase", 3, argv[1] ));
    }
  }
  result = std_vector_Sl_TruckBoris_EnumConstant_Sg__erase__SWIG_1(arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::EnumConstant >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorEnumConstant_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::EnumConstant >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorEnumConstant_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::EnumConstant >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::EnumConstant >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorEnumConstant_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "erase", 
    "    std::vector< TruckBoris::EnumConstant >::iterator erase(std::vector< TruckBoris::EnumConstant >::iterator pos)\n"
    "    std::vector< TruckBoris::EnumConstant >::iterator erase(std::vector< TruckBoris::EnumConstant >::iterator first, std::vector< TruckBoris::EnumConstant >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_VectorEnumConstant_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_VectorEnumConstant_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_VectorEnumConstant__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant >::size_type arg1 ;
  std::vector< TruckBoris::EnumConstant >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< TruckBoris::EnumConstant > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::size_type","vector<(TruckBoris::EnumConstant)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< TruckBoris::EnumConstant >::size_type >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_TruckBoris__EnumConstant,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::value_type const &","vector<(TruckBoris::EnumConstant)>", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::EnumConstant >::value_type const &","vector<(TruckBoris::EnumConstant)>", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::EnumConstant >::value_type * >(argp2);
  result = (std::vector< TruckBoris::EnumConstant > *)new std::vector< TruckBoris::EnumConstant >(arg1,(std::vector< TruckBoris::EnumConstant >::value_type const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_VectorEnumConstant(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_VectorEnumConstant__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorEnumConstant__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorEnumConstant__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TruckBoris__EnumConstant, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorEnumConstant__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "VectorEnumConstant.new", 
    "    VectorEnumConstant.new()\n"
    "    VectorEnumConstant.new(std::vector< TruckBoris::EnumConstant > const &)\n"
    "    VectorEnumConstant.new(std::vector< TruckBoris::EnumConstant >::size_type size)\n"
    "    VectorEnumConstant.new(std::vector< TruckBoris::EnumConstant >::size_type size, std::vector< TruckBoris::EnumConstant >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.front

  call-seq:
    front -> EnumConstant

Return the first element in VectorEnumConstant.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_front(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::EnumConstant >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  result = (std::vector< TruckBoris::EnumConstant >::value_type *) &((std::vector< TruckBoris::EnumConstant > const *)arg1)->front();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TruckBoris__EnumConstant, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.back

  call-seq:
    back -> EnumConstant

Return the last element in VectorEnumConstant.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_back(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::EnumConstant >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  result = (std::vector< TruckBoris::EnumConstant >::value_type *) &((std::vector< TruckBoris::EnumConstant > const *)arg1)->back();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TruckBoris__EnumConstant, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.assign

  call-seq:
    assign(n, x)

Assign a new VectorEnumConstant or portion of it.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_assign(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  std::vector< TruckBoris::EnumConstant >::size_type arg2 ;
  std::vector< TruckBoris::EnumConstant >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::EnumConstant >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__EnumConstant,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::value_type const &","assign", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::EnumConstant >::value_type const &","assign", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::EnumConstant >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< TruckBoris::EnumConstant >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the VectorEnumConstant.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  std::vector< TruckBoris::EnumConstant >::size_type arg2 ;
  std::vector< TruckBoris::EnumConstant >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::EnumConstant >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__EnumConstant,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::value_type const &","resize", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::EnumConstant >::value_type const &","resize", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::EnumConstant >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< TruckBoris::EnumConstant >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorEnumConstant_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorEnumConstant_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TruckBoris__EnumConstant, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorEnumConstant_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "VectorEnumConstant.resize", 
    "    void VectorEnumConstant.resize(std::vector< TruckBoris::EnumConstant >::size_type new_size)\n"
    "    void VectorEnumConstant.resize(std::vector< TruckBoris::EnumConstant >::size_type new_size, std::vector< TruckBoris::EnumConstant >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.insert

  call-seq:
    insert(pos, argc) -> VectorEnumConstant
    insert(pos, x) -> std::vector< TruckBoris::EnumConstant >::iterator
    insert(pos, n, x)

Insert one or more new elements in the VectorEnumConstant.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  std::vector< TruckBoris::EnumConstant >::iterator arg2 ;
  std::vector< TruckBoris::EnumConstant >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< TruckBoris::EnumConstant >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::EnumConstant >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::EnumConstant >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::iterator","insert", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__EnumConstant,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::value_type const &","insert", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::EnumConstant >::value_type const &","insert", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::EnumConstant >::value_type * >(argp3);
  result = std_vector_Sl_TruckBoris_EnumConstant_Sg__insert__SWIG_1(arg1,arg2,(TruckBoris::EnumConstant const &)*arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::EnumConstant >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorEnumConstant_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  std::vector< TruckBoris::EnumConstant >::iterator arg2 ;
  std::vector< TruckBoris::EnumConstant >::size_type arg3 ;
  std::vector< TruckBoris::EnumConstant >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::EnumConstant >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::EnumConstant >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::EnumConstant >::size_type >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_TruckBoris__EnumConstant,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::value_type const &","insert", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::EnumConstant >::value_type const &","insert", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< std::vector< TruckBoris::EnumConstant >::value_type * >(argp4);
  std_vector_Sl_TruckBoris_EnumConstant_Sg__insert__SWIG_2(arg1,arg2,arg3,(TruckBoris::EnumConstant const &)*arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorEnumConstant_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::EnumConstant >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TruckBoris__EnumConstant, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorEnumConstant_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_VectorEnumConstant_insert__SWIG_0(nargs, args, self);
          }
          return _wrap_VectorEnumConstant_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::EnumConstant >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_TruckBoris__EnumConstant, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorEnumConstant_insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< TruckBoris::EnumConstant >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< TruckBoris::EnumConstant >::iterator pos, std::vector< TruckBoris::EnumConstant >::value_type const &x)\n"
    "    void insert(std::vector< TruckBoris::EnumConstant >::iterator pos, std::vector< TruckBoris::EnumConstant >::size_type n, std::vector< TruckBoris::EnumConstant >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.reserve

  call-seq:
    reserve(n)

Reserve memory in the VectorEnumConstant for a number of elements.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  std::vector< TruckBoris::EnumConstant >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::EnumConstant >::size_type >(val2);
  (arg1)->reserve(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorEnumConstant.capacity

  call-seq:
    capacity -> std::vector< TruckBoris::EnumConstant >::size_type

Reserved capacity of the VectorEnumConstant.
*/
SWIGINTERN VALUE
_wrap_VectorEnumConstant_capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::EnumConstant > *arg1 = (std::vector< TruckBoris::EnumConstant > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::EnumConstant >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::EnumConstant > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::EnumConstant > * >(argp1);
  result = ((std::vector< TruckBoris::EnumConstant > const *)arg1)->capacity();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_TruckBoris_EnumConstant_Sg_(std::vector< TruckBoris::EnumConstant > *arg1) {
    delete arg1;
}

static swig_class SwigClassVectorFunction;


/*
  Document-method: Rtruckboris::VectorFunction.dup

  call-seq:
    dup -> VectorFunction

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_dup(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  result = (std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > *)std_vector_Sl_TruckBoris_Function_Sg__dup(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Function_Sg__inspect(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.to_a

  call-seq:
    to_a -> VALUE

Convert VectorFunction to an Array.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Function_Sg__to_a(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Function_Sg__to_s(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the VectorFunction.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_slice(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  std::vector< TruckBoris::Function >::difference_type arg2 ;
  std::vector< TruckBoris::Function >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Function >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::Function >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_TruckBoris_Function_Sg__slice(arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.each

  call-seq:
    each -> VectorFunction

Iterate thru each element in the VectorFunction.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_each(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  result = (std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > *)std_vector_Sl_TruckBoris_Function_Sg__each(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.select

  call-seq:
    select -> VectorFunction

Iterate thru each element in the VectorFunction and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_select(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  result = (std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > *)std_vector_Sl_TruckBoris_Function_Sg__select(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  std::vector< TruckBoris::Function >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Function >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_TruckBoris_Function_Sg__delete_at(arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorFunction___delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  std::vector< TruckBoris::Function >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TruckBoris__Function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::value_type const &","__delete2__", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Function >::value_type const &","__delete2__", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::Function >::value_type * >(argp2);
  result = (VALUE)std_vector_Sl_TruckBoris_Function_Sg____delete2__(arg1,(TruckBoris::Function const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.reject!

  call-seq:
    reject! -> VectorFunction

Iterate thru each element in the VectorFunction and reject those that fail a condition.  A block must be provided.  VectorFunction is modified in place.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  result = (std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > *)std_vector_Sl_TruckBoris_Function_Sg__reject_bang(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the VectorFunction.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_pop(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Function_Sg__pop(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.push

  call-seq:
    push(e) -> Function

Add an element at the end of the VectorFunction.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_push(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  std::vector< TruckBoris::Function >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< TruckBoris::Function >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TruckBoris__Function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::value_type const &","push", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Function >::value_type const &","push", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::Function >::value_type * >(argp2);
  result = std_vector_Sl_TruckBoris_Function_Sg__push(arg1,(TruckBoris::Function const &)*arg2);
  vresult = SWIG_NewPointerObj((new std::vector< TruckBoris::Function >::value_type(static_cast< const std::vector< TruckBoris::Function >::value_type& >(result))), SWIGTYPE_p_TruckBoris__Function, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.reject

  call-seq:
    reject -> VectorFunction

Iterate thru each element in the VectorFunction and reject those that fail a condition returning a new VectorFunction.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_reject(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  result = (std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > *)std_vector_Sl_TruckBoris_Function_Sg__reject(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_at(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  std::vector< TruckBoris::Function >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Function >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_TruckBoris_Function_Sg__at((std::vector< TruckBoris::Function > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_VectorFunction___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  std::vector< TruckBoris::Function >::difference_type arg2 ;
  std::vector< TruckBoris::Function >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Function >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::Function >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_TruckBoris_Function_Sg____getitem____SWIG_0((std::vector< TruckBoris::Function > const *)arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorFunction___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  std::vector< TruckBoris::Function >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Function >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_TruckBoris_Function_Sg____getitem____SWIG_1((std::vector< TruckBoris::Function > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorFunction___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  arg2 = argv[0];
  result = (VALUE)std_vector_Sl_TruckBoris_Function_Sg____getitem____SWIG_2((std::vector< TruckBoris::Function > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorFunction___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorFunction___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_VectorFunction___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorFunction___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< TruckBoris::Function >::difference_type i, std::vector< TruckBoris::Function >::difference_type j)\n"
    "    VALUE __getitem__(std::vector< TruckBoris::Function >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_VectorFunction___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  std::vector< TruckBoris::Function >::difference_type arg2 ;
  std::vector< TruckBoris::Function >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Function >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__Function,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::value_type const &","__setitem__", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Function >::value_type const &","__setitem__", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::Function >::value_type * >(argp3);
  result = (VALUE)std_vector_Sl_TruckBoris_Function_Sg____setitem____SWIG_0(arg1,arg2,(TruckBoris::Function const &)*arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorFunction___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  std::vector< TruckBoris::Function >::difference_type arg2 ;
  std::vector< TruckBoris::Function >::difference_type arg3 ;
  std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Function >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::Function >::difference_type >(val3);
  {
    std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > > *ptr = (std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  try {
    result = (VALUE)std_vector_Sl_TruckBoris_Function_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > const &)*arg4);
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorFunction___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TruckBoris__Function, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorFunction___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorFunction___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< TruckBoris::Function >::difference_type i, std::vector< TruckBoris::Function >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< TruckBoris::Function >::difference_type i, std::vector< TruckBoris::Function >::difference_type j, std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the VectorFunction.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_shift(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Function_Sg__shift(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.insert

  call-seq:
    insert(pos, argc) -> VectorFunction
    insert(pos, x) -> std::vector< TruckBoris::Function >::iterator
    insert(pos, n, x)

Insert one or more new elements in the VectorFunction.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  std::vector< TruckBoris::Function >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Function >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  result = (std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > *)std_vector_Sl_TruckBoris_Function_Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.unshift

  call-seq:
    unshift(argc) -> VectorFunction

Add one or more elements at the beginning of the VectorFunction.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  result = (std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > *)std_vector_Sl_TruckBoris_Function_Sg__unshift(arg1,arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VectorFunction__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (std::vector< TruckBoris::Function > *)new std::vector< TruckBoris::Function >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VectorFunction__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< TruckBoris::Function > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > > *ptr = (std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > const &","vector<(TruckBoris::Function)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Function > const &","vector<(TruckBoris::Function)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  result = (std::vector< TruckBoris::Function > *)new std::vector< TruckBoris::Function >((std::vector< TruckBoris::Function > const &)*arg1);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.empty?

  call-seq:
    empty? -> bool

Check if the VectorFunction is empty or not.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  result = (bool)((std::vector< TruckBoris::Function > const *)arg1)->empty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.size

  call-seq:
    size -> std::vector< TruckBoris::Function >::size_type

Size or Length of the VectorFunction.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_size(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Function >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  result = ((std::vector< TruckBoris::Function > const *)arg1)->size();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.clear

  call-seq:
    clear

Clear VectorFunction contents.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_clear(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorFunction_swap(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  std::vector< TruckBoris::Function > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Function > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp2);
  (arg1)->swap(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorFunction_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< TruckBoris::Function > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  result = ((std::vector< TruckBoris::Function > const *)arg1)->get_allocator();
  vresult = SWIG_NewPointerObj((new std::vector< TruckBoris::Function >::allocator_type(static_cast< const std::vector< TruckBoris::Function >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_TruckBoris__Function_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.begin

  call-seq:
    begin -> std::vector< TruckBoris::Function >::iterator

Return an iterator to the beginning of the VectorFunction.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_begin(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Function >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  result = (arg1)->begin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Function >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.end

  call-seq:
    end -> std::vector< TruckBoris::Function >::iterator

Return an iterator to past the end of the VectorFunction.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_end(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Function >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  result = (arg1)->end();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Function >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.rbegin

  call-seq:
    rbegin -> std::vector< TruckBoris::Function >::reverse_iterator

Return a reverse iterator to the beginning (the end) of the VectorFunction.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Function >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  result = (arg1)->rbegin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Function >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.rend

  call-seq:
    rend -> std::vector< TruckBoris::Function >::reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the VectorFunction.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_rend(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Function >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  result = (arg1)->rend();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Function >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VectorFunction__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< TruckBoris::Function > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::size_type","vector<(TruckBoris::Function)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< TruckBoris::Function >::size_type >(val1);
  result = (std::vector< TruckBoris::Function > *)new std::vector< TruckBoris::Function >(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the VectorFunction.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  std::vector< TruckBoris::Function >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Function >::size_type >(val2);
  (arg1)->resize(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.erase

  call-seq:
    erase(pos) -> std::vector< TruckBoris::Function >::iterator
    erase(first, last) -> std::vector< TruckBoris::Function >::iterator

Delete a portion of the VectorFunction.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  std::vector< TruckBoris::Function >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< TruckBoris::Function >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Function >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Function >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::iterator","erase", 2, argv[0] ));
    }
  }
  result = std_vector_Sl_TruckBoris_Function_Sg__erase__SWIG_0(arg1,arg2);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Function >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorFunction_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  std::vector< TruckBoris::Function >::iterator arg2 ;
  std::vector< TruckBoris::Function >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::vector< TruckBoris::Function >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Function >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Function >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Function >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Function >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::iterator","erase", 3, argv[1] ));
    }
  }
  result = std_vector_Sl_TruckBoris_Function_Sg__erase__SWIG_1(arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Function >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorFunction_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Function >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorFunction_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Function >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Function >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorFunction_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "erase", 
    "    std::vector< TruckBoris::Function >::iterator erase(std::vector< TruckBoris::Function >::iterator pos)\n"
    "    std::vector< TruckBoris::Function >::iterator erase(std::vector< TruckBoris::Function >::iterator first, std::vector< TruckBoris::Function >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_VectorFunction_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_VectorFunction_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_VectorFunction__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function >::size_type arg1 ;
  std::vector< TruckBoris::Function >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< TruckBoris::Function > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::size_type","vector<(TruckBoris::Function)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< TruckBoris::Function >::size_type >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_TruckBoris__Function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::value_type const &","vector<(TruckBoris::Function)>", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Function >::value_type const &","vector<(TruckBoris::Function)>", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::Function >::value_type * >(argp2);
  result = (std::vector< TruckBoris::Function > *)new std::vector< TruckBoris::Function >(arg1,(std::vector< TruckBoris::Function >::value_type const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_VectorFunction(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_VectorFunction__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorFunction__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorFunction__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TruckBoris__Function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorFunction__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "VectorFunction.new", 
    "    VectorFunction.new()\n"
    "    VectorFunction.new(std::vector< TruckBoris::Function > const &)\n"
    "    VectorFunction.new(std::vector< TruckBoris::Function >::size_type size)\n"
    "    VectorFunction.new(std::vector< TruckBoris::Function >::size_type size, std::vector< TruckBoris::Function >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.front

  call-seq:
    front -> Function

Return the first element in VectorFunction.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_front(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Function >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  result = (std::vector< TruckBoris::Function >::value_type *) &((std::vector< TruckBoris::Function > const *)arg1)->front();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TruckBoris__Function, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.back

  call-seq:
    back -> Function

Return the last element in VectorFunction.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_back(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Function >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  result = (std::vector< TruckBoris::Function >::value_type *) &((std::vector< TruckBoris::Function > const *)arg1)->back();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TruckBoris__Function, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.assign

  call-seq:
    assign(n, x)

Assign a new VectorFunction or portion of it.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_assign(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  std::vector< TruckBoris::Function >::size_type arg2 ;
  std::vector< TruckBoris::Function >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Function >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__Function,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::value_type const &","assign", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Function >::value_type const &","assign", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::Function >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< TruckBoris::Function >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the VectorFunction.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  std::vector< TruckBoris::Function >::size_type arg2 ;
  std::vector< TruckBoris::Function >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Function >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__Function,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::value_type const &","resize", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Function >::value_type const &","resize", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::Function >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< TruckBoris::Function >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorFunction_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorFunction_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TruckBoris__Function, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorFunction_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "VectorFunction.resize", 
    "    void VectorFunction.resize(std::vector< TruckBoris::Function >::size_type new_size)\n"
    "    void VectorFunction.resize(std::vector< TruckBoris::Function >::size_type new_size, std::vector< TruckBoris::Function >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.insert

  call-seq:
    insert(pos, argc) -> VectorFunction
    insert(pos, x) -> std::vector< TruckBoris::Function >::iterator
    insert(pos, n, x)

Insert one or more new elements in the VectorFunction.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  std::vector< TruckBoris::Function >::iterator arg2 ;
  std::vector< TruckBoris::Function >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< TruckBoris::Function >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Function >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Function >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::iterator","insert", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__Function,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::value_type const &","insert", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Function >::value_type const &","insert", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::Function >::value_type * >(argp3);
  result = std_vector_Sl_TruckBoris_Function_Sg__insert__SWIG_1(arg1,arg2,(TruckBoris::Function const &)*arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Function >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorFunction_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  std::vector< TruckBoris::Function >::iterator arg2 ;
  std::vector< TruckBoris::Function >::size_type arg3 ;
  std::vector< TruckBoris::Function >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Function >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Function >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::Function >::size_type >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_TruckBoris__Function,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::value_type const &","insert", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Function >::value_type const &","insert", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< std::vector< TruckBoris::Function >::value_type * >(argp4);
  std_vector_Sl_TruckBoris_Function_Sg__insert__SWIG_2(arg1,arg2,arg3,(TruckBoris::Function const &)*arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorFunction_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Function >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TruckBoris__Function, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorFunction_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_VectorFunction_insert__SWIG_0(nargs, args, self);
          }
          return _wrap_VectorFunction_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Function >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_TruckBoris__Function, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorFunction_insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< TruckBoris::Function >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< TruckBoris::Function >::iterator pos, std::vector< TruckBoris::Function >::value_type const &x)\n"
    "    void insert(std::vector< TruckBoris::Function >::iterator pos, std::vector< TruckBoris::Function >::size_type n, std::vector< TruckBoris::Function >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.reserve

  call-seq:
    reserve(n)

Reserve memory in the VectorFunction for a number of elements.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  std::vector< TruckBoris::Function >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Function >::size_type >(val2);
  (arg1)->reserve(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorFunction.capacity

  call-seq:
    capacity -> std::vector< TruckBoris::Function >::size_type

Reserved capacity of the VectorFunction.
*/
SWIGINTERN VALUE
_wrap_VectorFunction_capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Function > *arg1 = (std::vector< TruckBoris::Function > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Function >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Function > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Function > * >(argp1);
  result = ((std::vector< TruckBoris::Function > const *)arg1)->capacity();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_TruckBoris_Function_Sg_(std::vector< TruckBoris::Function > *arg1) {
    delete arg1;
}

static swig_class SwigClassVectorParameter;


/*
  Document-method: Rtruckboris::VectorParameter.dup

  call-seq:
    dup -> VectorParameter

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_dup(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  result = (std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *)std_vector_Sl_TruckBoris_Parameter_Sg__dup(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Parameter_Sg__inspect(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.to_a

  call-seq:
    to_a -> VALUE

Convert VectorParameter to an Array.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Parameter_Sg__to_a(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Parameter_Sg__to_s(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the VectorParameter.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_slice(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  std::vector< TruckBoris::Parameter >::difference_type arg2 ;
  std::vector< TruckBoris::Parameter >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Parameter >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::Parameter >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_TruckBoris_Parameter_Sg__slice(arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.each

  call-seq:
    each -> VectorParameter

Iterate thru each element in the VectorParameter.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_each(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  result = (std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *)std_vector_Sl_TruckBoris_Parameter_Sg__each(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.select

  call-seq:
    select -> VectorParameter

Iterate thru each element in the VectorParameter and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_select(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  result = (std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *)std_vector_Sl_TruckBoris_Parameter_Sg__select(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  std::vector< TruckBoris::Parameter >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Parameter >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_TruckBoris_Parameter_Sg__delete_at(arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorParameter___delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  std::vector< TruckBoris::Parameter >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TruckBoris__Parameter,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::value_type const &","__delete2__", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Parameter >::value_type const &","__delete2__", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::Parameter >::value_type * >(argp2);
  result = (VALUE)std_vector_Sl_TruckBoris_Parameter_Sg____delete2__(arg1,(TruckBoris::Parameter const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.reject!

  call-seq:
    reject! -> VectorParameter

Iterate thru each element in the VectorParameter and reject those that fail a condition.  A block must be provided.  VectorParameter is modified in place.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  result = (std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *)std_vector_Sl_TruckBoris_Parameter_Sg__reject_bang(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the VectorParameter.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_pop(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Parameter_Sg__pop(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.push

  call-seq:
    push(e) -> Parameter

Add an element at the end of the VectorParameter.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_push(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  std::vector< TruckBoris::Parameter >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< TruckBoris::Parameter >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TruckBoris__Parameter,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::value_type const &","push", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Parameter >::value_type const &","push", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::Parameter >::value_type * >(argp2);
  result = std_vector_Sl_TruckBoris_Parameter_Sg__push(arg1,(TruckBoris::Parameter const &)*arg2);
  vresult = SWIG_NewPointerObj((new std::vector< TruckBoris::Parameter >::value_type(static_cast< const std::vector< TruckBoris::Parameter >::value_type& >(result))), SWIGTYPE_p_TruckBoris__Parameter, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.reject

  call-seq:
    reject -> VectorParameter

Iterate thru each element in the VectorParameter and reject those that fail a condition returning a new VectorParameter.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_reject(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  result = (std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *)std_vector_Sl_TruckBoris_Parameter_Sg__reject(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_at(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  std::vector< TruckBoris::Parameter >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Parameter >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_TruckBoris_Parameter_Sg__at((std::vector< TruckBoris::Parameter > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_VectorParameter___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  std::vector< TruckBoris::Parameter >::difference_type arg2 ;
  std::vector< TruckBoris::Parameter >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Parameter >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::Parameter >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_TruckBoris_Parameter_Sg____getitem____SWIG_0((std::vector< TruckBoris::Parameter > const *)arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorParameter___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  std::vector< TruckBoris::Parameter >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Parameter >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_TruckBoris_Parameter_Sg____getitem____SWIG_1((std::vector< TruckBoris::Parameter > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorParameter___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  arg2 = argv[0];
  result = (VALUE)std_vector_Sl_TruckBoris_Parameter_Sg____getitem____SWIG_2((std::vector< TruckBoris::Parameter > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorParameter___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorParameter___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_VectorParameter___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorParameter___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< TruckBoris::Parameter >::difference_type i, std::vector< TruckBoris::Parameter >::difference_type j)\n"
    "    VALUE __getitem__(std::vector< TruckBoris::Parameter >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_VectorParameter___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  std::vector< TruckBoris::Parameter >::difference_type arg2 ;
  std::vector< TruckBoris::Parameter >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Parameter >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__Parameter,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::value_type const &","__setitem__", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Parameter >::value_type const &","__setitem__", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::Parameter >::value_type * >(argp3);
  result = (VALUE)std_vector_Sl_TruckBoris_Parameter_Sg____setitem____SWIG_0(arg1,arg2,(TruckBoris::Parameter const &)*arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorParameter___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  std::vector< TruckBoris::Parameter >::difference_type arg2 ;
  std::vector< TruckBoris::Parameter >::difference_type arg3 ;
  std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Parameter >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::Parameter >::difference_type >(val3);
  {
    std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *ptr = (std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  try {
    result = (VALUE)std_vector_Sl_TruckBoris_Parameter_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > const &)*arg4);
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorParameter___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TruckBoris__Parameter, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorParameter___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorParameter___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< TruckBoris::Parameter >::difference_type i, std::vector< TruckBoris::Parameter >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< TruckBoris::Parameter >::difference_type i, std::vector< TruckBoris::Parameter >::difference_type j, std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the VectorParameter.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_shift(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Parameter_Sg__shift(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.insert

  call-seq:
    insert(pos, argc) -> VectorParameter
    insert(pos, x) -> std::vector< TruckBoris::Parameter >::iterator
    insert(pos, n, x)

Insert one or more new elements in the VectorParameter.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  std::vector< TruckBoris::Parameter >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Parameter >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  result = (std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *)std_vector_Sl_TruckBoris_Parameter_Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.unshift

  call-seq:
    unshift(argc) -> VectorParameter

Add one or more elements at the beginning of the VectorParameter.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  result = (std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *)std_vector_Sl_TruckBoris_Parameter_Sg__unshift(arg1,arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VectorParameter__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (std::vector< TruckBoris::Parameter > *)new std::vector< TruckBoris::Parameter >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VectorParameter__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< TruckBoris::Parameter > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *ptr = (std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > const &","vector<(TruckBoris::Parameter)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Parameter > const &","vector<(TruckBoris::Parameter)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  result = (std::vector< TruckBoris::Parameter > *)new std::vector< TruckBoris::Parameter >((std::vector< TruckBoris::Parameter > const &)*arg1);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.empty?

  call-seq:
    empty? -> bool

Check if the VectorParameter is empty or not.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  result = (bool)((std::vector< TruckBoris::Parameter > const *)arg1)->empty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.size

  call-seq:
    size -> std::vector< TruckBoris::Parameter >::size_type

Size or Length of the VectorParameter.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_size(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Parameter >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  result = ((std::vector< TruckBoris::Parameter > const *)arg1)->size();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.clear

  call-seq:
    clear

Clear VectorParameter contents.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_clear(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorParameter_swap(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  std::vector< TruckBoris::Parameter > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Parameter > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp2);
  (arg1)->swap(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorParameter_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< TruckBoris::Parameter > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  result = ((std::vector< TruckBoris::Parameter > const *)arg1)->get_allocator();
  vresult = SWIG_NewPointerObj((new std::vector< TruckBoris::Parameter >::allocator_type(static_cast< const std::vector< TruckBoris::Parameter >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_TruckBoris__Parameter_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.begin

  call-seq:
    begin -> std::vector< TruckBoris::Parameter >::iterator

Return an iterator to the beginning of the VectorParameter.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_begin(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Parameter >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  result = (arg1)->begin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Parameter >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.end

  call-seq:
    end -> std::vector< TruckBoris::Parameter >::iterator

Return an iterator to past the end of the VectorParameter.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_end(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Parameter >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  result = (arg1)->end();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Parameter >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.rbegin

  call-seq:
    rbegin -> std::vector< TruckBoris::Parameter >::reverse_iterator

Return a reverse iterator to the beginning (the end) of the VectorParameter.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Parameter >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  result = (arg1)->rbegin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Parameter >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.rend

  call-seq:
    rend -> std::vector< TruckBoris::Parameter >::reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the VectorParameter.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_rend(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Parameter >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  result = (arg1)->rend();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Parameter >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VectorParameter__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< TruckBoris::Parameter > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::size_type","vector<(TruckBoris::Parameter)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< TruckBoris::Parameter >::size_type >(val1);
  result = (std::vector< TruckBoris::Parameter > *)new std::vector< TruckBoris::Parameter >(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the VectorParameter.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  std::vector< TruckBoris::Parameter >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Parameter >::size_type >(val2);
  (arg1)->resize(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.erase

  call-seq:
    erase(pos) -> std::vector< TruckBoris::Parameter >::iterator
    erase(first, last) -> std::vector< TruckBoris::Parameter >::iterator

Delete a portion of the VectorParameter.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  std::vector< TruckBoris::Parameter >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< TruckBoris::Parameter >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Parameter >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Parameter >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::iterator","erase", 2, argv[0] ));
    }
  }
  result = std_vector_Sl_TruckBoris_Parameter_Sg__erase__SWIG_0(arg1,arg2);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Parameter >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorParameter_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  std::vector< TruckBoris::Parameter >::iterator arg2 ;
  std::vector< TruckBoris::Parameter >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::vector< TruckBoris::Parameter >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Parameter >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Parameter >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Parameter >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Parameter >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::iterator","erase", 3, argv[1] ));
    }
  }
  result = std_vector_Sl_TruckBoris_Parameter_Sg__erase__SWIG_1(arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Parameter >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorParameter_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Parameter >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorParameter_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Parameter >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Parameter >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorParameter_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "erase", 
    "    std::vector< TruckBoris::Parameter >::iterator erase(std::vector< TruckBoris::Parameter >::iterator pos)\n"
    "    std::vector< TruckBoris::Parameter >::iterator erase(std::vector< TruckBoris::Parameter >::iterator first, std::vector< TruckBoris::Parameter >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_VectorParameter_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_VectorParameter_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_VectorParameter__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter >::size_type arg1 ;
  std::vector< TruckBoris::Parameter >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< TruckBoris::Parameter > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::size_type","vector<(TruckBoris::Parameter)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< TruckBoris::Parameter >::size_type >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_TruckBoris__Parameter,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::value_type const &","vector<(TruckBoris::Parameter)>", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Parameter >::value_type const &","vector<(TruckBoris::Parameter)>", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::Parameter >::value_type * >(argp2);
  result = (std::vector< TruckBoris::Parameter > *)new std::vector< TruckBoris::Parameter >(arg1,(std::vector< TruckBoris::Parameter >::value_type const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_VectorParameter(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_VectorParameter__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorParameter__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorParameter__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TruckBoris__Parameter, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorParameter__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "VectorParameter.new", 
    "    VectorParameter.new()\n"
    "    VectorParameter.new(std::vector< TruckBoris::Parameter > const &)\n"
    "    VectorParameter.new(std::vector< TruckBoris::Parameter >::size_type size)\n"
    "    VectorParameter.new(std::vector< TruckBoris::Parameter >::size_type size, std::vector< TruckBoris::Parameter >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.front

  call-seq:
    front -> Parameter

Return the first element in VectorParameter.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_front(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Parameter >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  result = (std::vector< TruckBoris::Parameter >::value_type *) &((std::vector< TruckBoris::Parameter > const *)arg1)->front();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TruckBoris__Parameter, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.back

  call-seq:
    back -> Parameter

Return the last element in VectorParameter.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_back(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Parameter >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  result = (std::vector< TruckBoris::Parameter >::value_type *) &((std::vector< TruckBoris::Parameter > const *)arg1)->back();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TruckBoris__Parameter, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.assign

  call-seq:
    assign(n, x)

Assign a new VectorParameter or portion of it.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_assign(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  std::vector< TruckBoris::Parameter >::size_type arg2 ;
  std::vector< TruckBoris::Parameter >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Parameter >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__Parameter,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::value_type const &","assign", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Parameter >::value_type const &","assign", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::Parameter >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< TruckBoris::Parameter >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the VectorParameter.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  std::vector< TruckBoris::Parameter >::size_type arg2 ;
  std::vector< TruckBoris::Parameter >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Parameter >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__Parameter,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::value_type const &","resize", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Parameter >::value_type const &","resize", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::Parameter >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< TruckBoris::Parameter >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorParameter_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorParameter_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TruckBoris__Parameter, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorParameter_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "VectorParameter.resize", 
    "    void VectorParameter.resize(std::vector< TruckBoris::Parameter >::size_type new_size)\n"
    "    void VectorParameter.resize(std::vector< TruckBoris::Parameter >::size_type new_size, std::vector< TruckBoris::Parameter >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.insert

  call-seq:
    insert(pos, argc) -> VectorParameter
    insert(pos, x) -> std::vector< TruckBoris::Parameter >::iterator
    insert(pos, n, x)

Insert one or more new elements in the VectorParameter.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  std::vector< TruckBoris::Parameter >::iterator arg2 ;
  std::vector< TruckBoris::Parameter >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< TruckBoris::Parameter >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Parameter >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Parameter >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::iterator","insert", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__Parameter,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::value_type const &","insert", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Parameter >::value_type const &","insert", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::Parameter >::value_type * >(argp3);
  result = std_vector_Sl_TruckBoris_Parameter_Sg__insert__SWIG_1(arg1,arg2,(TruckBoris::Parameter const &)*arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Parameter >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorParameter_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  std::vector< TruckBoris::Parameter >::iterator arg2 ;
  std::vector< TruckBoris::Parameter >::size_type arg3 ;
  std::vector< TruckBoris::Parameter >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Parameter >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Parameter >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::Parameter >::size_type >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_TruckBoris__Parameter,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::value_type const &","insert", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Parameter >::value_type const &","insert", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< std::vector< TruckBoris::Parameter >::value_type * >(argp4);
  std_vector_Sl_TruckBoris_Parameter_Sg__insert__SWIG_2(arg1,arg2,arg3,(TruckBoris::Parameter const &)*arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorParameter_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Parameter >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TruckBoris__Parameter, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorParameter_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_VectorParameter_insert__SWIG_0(nargs, args, self);
          }
          return _wrap_VectorParameter_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Parameter >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_TruckBoris__Parameter, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorParameter_insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< TruckBoris::Parameter >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< TruckBoris::Parameter >::iterator pos, std::vector< TruckBoris::Parameter >::value_type const &x)\n"
    "    void insert(std::vector< TruckBoris::Parameter >::iterator pos, std::vector< TruckBoris::Parameter >::size_type n, std::vector< TruckBoris::Parameter >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.reserve

  call-seq:
    reserve(n)

Reserve memory in the VectorParameter for a number of elements.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  std::vector< TruckBoris::Parameter >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Parameter >::size_type >(val2);
  (arg1)->reserve(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorParameter.capacity

  call-seq:
    capacity -> std::vector< TruckBoris::Parameter >::size_type

Reserved capacity of the VectorParameter.
*/
SWIGINTERN VALUE
_wrap_VectorParameter_capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Parameter > *arg1 = (std::vector< TruckBoris::Parameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Parameter >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Parameter > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Parameter > * >(argp1);
  result = ((std::vector< TruckBoris::Parameter > const *)arg1)->capacity();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_TruckBoris_Parameter_Sg_(std::vector< TruckBoris::Parameter > *arg1) {
    delete arg1;
}

static swig_class SwigClassVectorStructure;


/*
  Document-method: Rtruckboris::VectorStructure.dup

  call-seq:
    dup -> VectorStructure

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_dup(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  result = (std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *)std_vector_Sl_TruckBoris_Structure_Sg__dup(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Structure_Sg__inspect(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.to_a

  call-seq:
    to_a -> VALUE

Convert VectorStructure to an Array.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Structure_Sg__to_a(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Structure_Sg__to_s(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the VectorStructure.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_slice(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  std::vector< TruckBoris::Structure >::difference_type arg2 ;
  std::vector< TruckBoris::Structure >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Structure >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::Structure >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_TruckBoris_Structure_Sg__slice(arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.each

  call-seq:
    each -> VectorStructure

Iterate thru each element in the VectorStructure.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_each(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  result = (std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *)std_vector_Sl_TruckBoris_Structure_Sg__each(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.select

  call-seq:
    select -> VectorStructure

Iterate thru each element in the VectorStructure and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_select(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  result = (std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *)std_vector_Sl_TruckBoris_Structure_Sg__select(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  std::vector< TruckBoris::Structure >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Structure >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_TruckBoris_Structure_Sg__delete_at(arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorStructure___delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  std::vector< TruckBoris::Structure >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TruckBoris__Structure,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::value_type const &","__delete2__", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Structure >::value_type const &","__delete2__", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::Structure >::value_type * >(argp2);
  result = (VALUE)std_vector_Sl_TruckBoris_Structure_Sg____delete2__(arg1,(TruckBoris::Structure const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.reject!

  call-seq:
    reject! -> VectorStructure

Iterate thru each element in the VectorStructure and reject those that fail a condition.  A block must be provided.  VectorStructure is modified in place.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  result = (std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *)std_vector_Sl_TruckBoris_Structure_Sg__reject_bang(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the VectorStructure.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_pop(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Structure_Sg__pop(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.push

  call-seq:
    push(e) -> Structure

Add an element at the end of the VectorStructure.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_push(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  std::vector< TruckBoris::Structure >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< TruckBoris::Structure >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TruckBoris__Structure,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::value_type const &","push", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Structure >::value_type const &","push", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::Structure >::value_type * >(argp2);
  result = std_vector_Sl_TruckBoris_Structure_Sg__push(arg1,(TruckBoris::Structure const &)*arg2);
  vresult = SWIG_NewPointerObj((new std::vector< TruckBoris::Structure >::value_type(static_cast< const std::vector< TruckBoris::Structure >::value_type& >(result))), SWIGTYPE_p_TruckBoris__Structure, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.reject

  call-seq:
    reject -> VectorStructure

Iterate thru each element in the VectorStructure and reject those that fail a condition returning a new VectorStructure.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_reject(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  result = (std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *)std_vector_Sl_TruckBoris_Structure_Sg__reject(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_at(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  std::vector< TruckBoris::Structure >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Structure >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_TruckBoris_Structure_Sg__at((std::vector< TruckBoris::Structure > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_VectorStructure___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  std::vector< TruckBoris::Structure >::difference_type arg2 ;
  std::vector< TruckBoris::Structure >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Structure >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::Structure >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_TruckBoris_Structure_Sg____getitem____SWIG_0((std::vector< TruckBoris::Structure > const *)arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorStructure___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  std::vector< TruckBoris::Structure >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Structure >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_TruckBoris_Structure_Sg____getitem____SWIG_1((std::vector< TruckBoris::Structure > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorStructure___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  arg2 = argv[0];
  result = (VALUE)std_vector_Sl_TruckBoris_Structure_Sg____getitem____SWIG_2((std::vector< TruckBoris::Structure > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorStructure___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorStructure___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_VectorStructure___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorStructure___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< TruckBoris::Structure >::difference_type i, std::vector< TruckBoris::Structure >::difference_type j)\n"
    "    VALUE __getitem__(std::vector< TruckBoris::Structure >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_VectorStructure___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  std::vector< TruckBoris::Structure >::difference_type arg2 ;
  std::vector< TruckBoris::Structure >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Structure >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__Structure,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::value_type const &","__setitem__", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Structure >::value_type const &","__setitem__", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::Structure >::value_type * >(argp3);
  result = (VALUE)std_vector_Sl_TruckBoris_Structure_Sg____setitem____SWIG_0(arg1,arg2,(TruckBoris::Structure const &)*arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorStructure___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  std::vector< TruckBoris::Structure >::difference_type arg2 ;
  std::vector< TruckBoris::Structure >::difference_type arg3 ;
  std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Structure >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::Structure >::difference_type >(val3);
  {
    std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *ptr = (std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  try {
    result = (VALUE)std_vector_Sl_TruckBoris_Structure_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > const &)*arg4);
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorStructure___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TruckBoris__Structure, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorStructure___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorStructure___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< TruckBoris::Structure >::difference_type i, std::vector< TruckBoris::Structure >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< TruckBoris::Structure >::difference_type i, std::vector< TruckBoris::Structure >::difference_type j, std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the VectorStructure.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_shift(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Structure_Sg__shift(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.insert

  call-seq:
    insert(pos, argc) -> VectorStructure
    insert(pos, x) -> std::vector< TruckBoris::Structure >::iterator
    insert(pos, n, x)

Insert one or more new elements in the VectorStructure.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  std::vector< TruckBoris::Structure >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Structure >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  result = (std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *)std_vector_Sl_TruckBoris_Structure_Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.unshift

  call-seq:
    unshift(argc) -> VectorStructure

Add one or more elements at the beginning of the VectorStructure.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  result = (std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *)std_vector_Sl_TruckBoris_Structure_Sg__unshift(arg1,arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VectorStructure__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (std::vector< TruckBoris::Structure > *)new std::vector< TruckBoris::Structure >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VectorStructure__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< TruckBoris::Structure > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *ptr = (std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > const &","vector<(TruckBoris::Structure)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Structure > const &","vector<(TruckBoris::Structure)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  result = (std::vector< TruckBoris::Structure > *)new std::vector< TruckBoris::Structure >((std::vector< TruckBoris::Structure > const &)*arg1);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.empty?

  call-seq:
    empty? -> bool

Check if the VectorStructure is empty or not.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  result = (bool)((std::vector< TruckBoris::Structure > const *)arg1)->empty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.size

  call-seq:
    size -> std::vector< TruckBoris::Structure >::size_type

Size or Length of the VectorStructure.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_size(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Structure >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  result = ((std::vector< TruckBoris::Structure > const *)arg1)->size();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.clear

  call-seq:
    clear

Clear VectorStructure contents.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_clear(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorStructure_swap(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  std::vector< TruckBoris::Structure > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Structure > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp2);
  (arg1)->swap(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorStructure_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< TruckBoris::Structure > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  result = ((std::vector< TruckBoris::Structure > const *)arg1)->get_allocator();
  vresult = SWIG_NewPointerObj((new std::vector< TruckBoris::Structure >::allocator_type(static_cast< const std::vector< TruckBoris::Structure >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_TruckBoris__Structure_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.begin

  call-seq:
    begin -> std::vector< TruckBoris::Structure >::iterator

Return an iterator to the beginning of the VectorStructure.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_begin(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Structure >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  result = (arg1)->begin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Structure >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.end

  call-seq:
    end -> std::vector< TruckBoris::Structure >::iterator

Return an iterator to past the end of the VectorStructure.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_end(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Structure >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  result = (arg1)->end();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Structure >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.rbegin

  call-seq:
    rbegin -> std::vector< TruckBoris::Structure >::reverse_iterator

Return a reverse iterator to the beginning (the end) of the VectorStructure.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Structure >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  result = (arg1)->rbegin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Structure >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.rend

  call-seq:
    rend -> std::vector< TruckBoris::Structure >::reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the VectorStructure.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_rend(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Structure >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  result = (arg1)->rend();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Structure >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VectorStructure__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< TruckBoris::Structure > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::size_type","vector<(TruckBoris::Structure)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< TruckBoris::Structure >::size_type >(val1);
  result = (std::vector< TruckBoris::Structure > *)new std::vector< TruckBoris::Structure >(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the VectorStructure.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  std::vector< TruckBoris::Structure >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Structure >::size_type >(val2);
  (arg1)->resize(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.erase

  call-seq:
    erase(pos) -> std::vector< TruckBoris::Structure >::iterator
    erase(first, last) -> std::vector< TruckBoris::Structure >::iterator

Delete a portion of the VectorStructure.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  std::vector< TruckBoris::Structure >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< TruckBoris::Structure >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Structure >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Structure >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::iterator","erase", 2, argv[0] ));
    }
  }
  result = std_vector_Sl_TruckBoris_Structure_Sg__erase__SWIG_0(arg1,arg2);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Structure >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorStructure_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  std::vector< TruckBoris::Structure >::iterator arg2 ;
  std::vector< TruckBoris::Structure >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::vector< TruckBoris::Structure >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Structure >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Structure >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Structure >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Structure >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::iterator","erase", 3, argv[1] ));
    }
  }
  result = std_vector_Sl_TruckBoris_Structure_Sg__erase__SWIG_1(arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Structure >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorStructure_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Structure >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorStructure_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Structure >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Structure >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorStructure_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "erase", 
    "    std::vector< TruckBoris::Structure >::iterator erase(std::vector< TruckBoris::Structure >::iterator pos)\n"
    "    std::vector< TruckBoris::Structure >::iterator erase(std::vector< TruckBoris::Structure >::iterator first, std::vector< TruckBoris::Structure >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_VectorStructure_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_VectorStructure_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_VectorStructure__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure >::size_type arg1 ;
  std::vector< TruckBoris::Structure >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< TruckBoris::Structure > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::size_type","vector<(TruckBoris::Structure)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< TruckBoris::Structure >::size_type >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_TruckBoris__Structure,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::value_type const &","vector<(TruckBoris::Structure)>", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Structure >::value_type const &","vector<(TruckBoris::Structure)>", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::Structure >::value_type * >(argp2);
  result = (std::vector< TruckBoris::Structure > *)new std::vector< TruckBoris::Structure >(arg1,(std::vector< TruckBoris::Structure >::value_type const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_VectorStructure(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_VectorStructure__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorStructure__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorStructure__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TruckBoris__Structure, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorStructure__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "VectorStructure.new", 
    "    VectorStructure.new()\n"
    "    VectorStructure.new(std::vector< TruckBoris::Structure > const &)\n"
    "    VectorStructure.new(std::vector< TruckBoris::Structure >::size_type size)\n"
    "    VectorStructure.new(std::vector< TruckBoris::Structure >::size_type size, std::vector< TruckBoris::Structure >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.front

  call-seq:
    front -> Structure

Return the first element in VectorStructure.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_front(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Structure >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  result = (std::vector< TruckBoris::Structure >::value_type *) &((std::vector< TruckBoris::Structure > const *)arg1)->front();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TruckBoris__Structure, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.back

  call-seq:
    back -> Structure

Return the last element in VectorStructure.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_back(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Structure >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  result = (std::vector< TruckBoris::Structure >::value_type *) &((std::vector< TruckBoris::Structure > const *)arg1)->back();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TruckBoris__Structure, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.assign

  call-seq:
    assign(n, x)

Assign a new VectorStructure or portion of it.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_assign(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  std::vector< TruckBoris::Structure >::size_type arg2 ;
  std::vector< TruckBoris::Structure >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Structure >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__Structure,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::value_type const &","assign", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Structure >::value_type const &","assign", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::Structure >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< TruckBoris::Structure >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the VectorStructure.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  std::vector< TruckBoris::Structure >::size_type arg2 ;
  std::vector< TruckBoris::Structure >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Structure >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__Structure,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::value_type const &","resize", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Structure >::value_type const &","resize", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::Structure >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< TruckBoris::Structure >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorStructure_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorStructure_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TruckBoris__Structure, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorStructure_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "VectorStructure.resize", 
    "    void VectorStructure.resize(std::vector< TruckBoris::Structure >::size_type new_size)\n"
    "    void VectorStructure.resize(std::vector< TruckBoris::Structure >::size_type new_size, std::vector< TruckBoris::Structure >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.insert

  call-seq:
    insert(pos, argc) -> VectorStructure
    insert(pos, x) -> std::vector< TruckBoris::Structure >::iterator
    insert(pos, n, x)

Insert one or more new elements in the VectorStructure.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  std::vector< TruckBoris::Structure >::iterator arg2 ;
  std::vector< TruckBoris::Structure >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< TruckBoris::Structure >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Structure >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Structure >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::iterator","insert", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__Structure,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::value_type const &","insert", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Structure >::value_type const &","insert", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::Structure >::value_type * >(argp3);
  result = std_vector_Sl_TruckBoris_Structure_Sg__insert__SWIG_1(arg1,arg2,(TruckBoris::Structure const &)*arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Structure >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorStructure_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  std::vector< TruckBoris::Structure >::iterator arg2 ;
  std::vector< TruckBoris::Structure >::size_type arg3 ;
  std::vector< TruckBoris::Structure >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Structure >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Structure >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::Structure >::size_type >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_TruckBoris__Structure,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::value_type const &","insert", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Structure >::value_type const &","insert", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< std::vector< TruckBoris::Structure >::value_type * >(argp4);
  std_vector_Sl_TruckBoris_Structure_Sg__insert__SWIG_2(arg1,arg2,arg3,(TruckBoris::Structure const &)*arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorStructure_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Structure >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TruckBoris__Structure, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorStructure_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_VectorStructure_insert__SWIG_0(nargs, args, self);
          }
          return _wrap_VectorStructure_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Structure >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_TruckBoris__Structure, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorStructure_insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< TruckBoris::Structure >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< TruckBoris::Structure >::iterator pos, std::vector< TruckBoris::Structure >::value_type const &x)\n"
    "    void insert(std::vector< TruckBoris::Structure >::iterator pos, std::vector< TruckBoris::Structure >::size_type n, std::vector< TruckBoris::Structure >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.reserve

  call-seq:
    reserve(n)

Reserve memory in the VectorStructure for a number of elements.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  std::vector< TruckBoris::Structure >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Structure >::size_type >(val2);
  (arg1)->reserve(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorStructure.capacity

  call-seq:
    capacity -> std::vector< TruckBoris::Structure >::size_type

Reserved capacity of the VectorStructure.
*/
SWIGINTERN VALUE
_wrap_VectorStructure_capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Structure > *arg1 = (std::vector< TruckBoris::Structure > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Structure >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Structure > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Structure > * >(argp1);
  result = ((std::vector< TruckBoris::Structure > const *)arg1)->capacity();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_TruckBoris_Structure_Sg_(std::vector< TruckBoris::Structure > *arg1) {
    delete arg1;
}

static swig_class SwigClassVectorField;


/*
  Document-method: Rtruckboris::VectorField.dup

  call-seq:
    dup -> VectorField

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_VectorField_dup(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  result = (std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > *)std_vector_Sl_TruckBoris_Field_Sg__dup(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_VectorField_inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Field_Sg__inspect(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.to_a

  call-seq:
    to_a -> VALUE

Convert VectorField to an Array.
*/
SWIGINTERN VALUE
_wrap_VectorField_to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Field_Sg__to_a(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_VectorField_to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Field_Sg__to_s(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the VectorField.
*/
SWIGINTERN VALUE
_wrap_VectorField_slice(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  std::vector< TruckBoris::Field >::difference_type arg2 ;
  std::vector< TruckBoris::Field >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Field >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::Field >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_TruckBoris_Field_Sg__slice(arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.each

  call-seq:
    each -> VectorField

Iterate thru each element in the VectorField.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_VectorField_each(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  result = (std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > *)std_vector_Sl_TruckBoris_Field_Sg__each(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.select

  call-seq:
    select -> VectorField

Iterate thru each element in the VectorField and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_VectorField_select(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  result = (std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > *)std_vector_Sl_TruckBoris_Field_Sg__select(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_VectorField_delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  std::vector< TruckBoris::Field >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Field >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_TruckBoris_Field_Sg__delete_at(arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorField___delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  std::vector< TruckBoris::Field >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TruckBoris__Field,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::value_type const &","__delete2__", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Field >::value_type const &","__delete2__", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::Field >::value_type * >(argp2);
  result = (VALUE)std_vector_Sl_TruckBoris_Field_Sg____delete2__(arg1,(TruckBoris::Field const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.reject!

  call-seq:
    reject! -> VectorField

Iterate thru each element in the VectorField and reject those that fail a condition.  A block must be provided.  VectorField is modified in place.
*/
SWIGINTERN VALUE
_wrap_VectorField_rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  result = (std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > *)std_vector_Sl_TruckBoris_Field_Sg__reject_bang(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the VectorField.
*/
SWIGINTERN VALUE
_wrap_VectorField_pop(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Field_Sg__pop(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.push

  call-seq:
    push(e) -> Field

Add an element at the end of the VectorField.
*/
SWIGINTERN VALUE
_wrap_VectorField_push(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  std::vector< TruckBoris::Field >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< TruckBoris::Field >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TruckBoris__Field,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::value_type const &","push", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Field >::value_type const &","push", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::Field >::value_type * >(argp2);
  result = std_vector_Sl_TruckBoris_Field_Sg__push(arg1,(TruckBoris::Field const &)*arg2);
  vresult = SWIG_NewPointerObj((new std::vector< TruckBoris::Field >::value_type(static_cast< const std::vector< TruckBoris::Field >::value_type& >(result))), SWIGTYPE_p_TruckBoris__Field, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.reject

  call-seq:
    reject -> VectorField

Iterate thru each element in the VectorField and reject those that fail a condition returning a new VectorField.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_VectorField_reject(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  result = (std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > *)std_vector_Sl_TruckBoris_Field_Sg__reject(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_VectorField_at(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  std::vector< TruckBoris::Field >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Field >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_TruckBoris_Field_Sg__at((std::vector< TruckBoris::Field > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_VectorField___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  std::vector< TruckBoris::Field >::difference_type arg2 ;
  std::vector< TruckBoris::Field >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Field >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::Field >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_TruckBoris_Field_Sg____getitem____SWIG_0((std::vector< TruckBoris::Field > const *)arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorField___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  std::vector< TruckBoris::Field >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Field >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_TruckBoris_Field_Sg____getitem____SWIG_1((std::vector< TruckBoris::Field > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorField___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  arg2 = argv[0];
  result = (VALUE)std_vector_Sl_TruckBoris_Field_Sg____getitem____SWIG_2((std::vector< TruckBoris::Field > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorField___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorField___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_VectorField___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorField___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< TruckBoris::Field >::difference_type i, std::vector< TruckBoris::Field >::difference_type j)\n"
    "    VALUE __getitem__(std::vector< TruckBoris::Field >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_VectorField___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  std::vector< TruckBoris::Field >::difference_type arg2 ;
  std::vector< TruckBoris::Field >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Field >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__Field,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::value_type const &","__setitem__", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Field >::value_type const &","__setitem__", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::Field >::value_type * >(argp3);
  result = (VALUE)std_vector_Sl_TruckBoris_Field_Sg____setitem____SWIG_0(arg1,arg2,(TruckBoris::Field const &)*arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorField___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  std::vector< TruckBoris::Field >::difference_type arg2 ;
  std::vector< TruckBoris::Field >::difference_type arg3 ;
  std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Field >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::Field >::difference_type >(val3);
  {
    std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > > *ptr = (std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  try {
    result = (VALUE)std_vector_Sl_TruckBoris_Field_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > const &)*arg4);
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorField___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TruckBoris__Field, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorField___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorField___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< TruckBoris::Field >::difference_type i, std::vector< TruckBoris::Field >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< TruckBoris::Field >::difference_type i, std::vector< TruckBoris::Field >::difference_type j, std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the VectorField.
*/
SWIGINTERN VALUE
_wrap_VectorField_shift(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Field_Sg__shift(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.insert

  call-seq:
    insert(pos, argc) -> VectorField
    insert(pos, x) -> std::vector< TruckBoris::Field >::iterator
    insert(pos, n, x)

Insert one or more new elements in the VectorField.
*/
SWIGINTERN VALUE
_wrap_VectorField_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  std::vector< TruckBoris::Field >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Field >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  result = (std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > *)std_vector_Sl_TruckBoris_Field_Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.unshift

  call-seq:
    unshift(argc) -> VectorField

Add one or more elements at the beginning of the VectorField.
*/
SWIGINTERN VALUE
_wrap_VectorField_unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  result = (std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > *)std_vector_Sl_TruckBoris_Field_Sg__unshift(arg1,arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VectorField__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (std::vector< TruckBoris::Field > *)new std::vector< TruckBoris::Field >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VectorField__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< TruckBoris::Field > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > > *ptr = (std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > const &","vector<(TruckBoris::Field)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Field > const &","vector<(TruckBoris::Field)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  result = (std::vector< TruckBoris::Field > *)new std::vector< TruckBoris::Field >((std::vector< TruckBoris::Field > const &)*arg1);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.empty?

  call-seq:
    empty? -> bool

Check if the VectorField is empty or not.
*/
SWIGINTERN VALUE
_wrap_VectorField_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  result = (bool)((std::vector< TruckBoris::Field > const *)arg1)->empty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.size

  call-seq:
    size -> std::vector< TruckBoris::Field >::size_type

Size or Length of the VectorField.
*/
SWIGINTERN VALUE
_wrap_VectorField_size(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Field >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  result = ((std::vector< TruckBoris::Field > const *)arg1)->size();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.clear

  call-seq:
    clear

Clear VectorField contents.
*/
SWIGINTERN VALUE
_wrap_VectorField_clear(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorField_swap(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  std::vector< TruckBoris::Field > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Field > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp2);
  (arg1)->swap(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorField_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< TruckBoris::Field > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  result = ((std::vector< TruckBoris::Field > const *)arg1)->get_allocator();
  vresult = SWIG_NewPointerObj((new std::vector< TruckBoris::Field >::allocator_type(static_cast< const std::vector< TruckBoris::Field >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_TruckBoris__Field_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.begin

  call-seq:
    begin -> std::vector< TruckBoris::Field >::iterator

Return an iterator to the beginning of the VectorField.
*/
SWIGINTERN VALUE
_wrap_VectorField_begin(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Field >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  result = (arg1)->begin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Field >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.end

  call-seq:
    end -> std::vector< TruckBoris::Field >::iterator

Return an iterator to past the end of the VectorField.
*/
SWIGINTERN VALUE
_wrap_VectorField_end(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Field >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  result = (arg1)->end();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Field >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.rbegin

  call-seq:
    rbegin -> std::vector< TruckBoris::Field >::reverse_iterator

Return a reverse iterator to the beginning (the end) of the VectorField.
*/
SWIGINTERN VALUE
_wrap_VectorField_rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Field >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  result = (arg1)->rbegin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Field >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.rend

  call-seq:
    rend -> std::vector< TruckBoris::Field >::reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the VectorField.
*/
SWIGINTERN VALUE
_wrap_VectorField_rend(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Field >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  result = (arg1)->rend();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Field >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VectorField__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< TruckBoris::Field > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::size_type","vector<(TruckBoris::Field)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< TruckBoris::Field >::size_type >(val1);
  result = (std::vector< TruckBoris::Field > *)new std::vector< TruckBoris::Field >(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the VectorField.
*/
SWIGINTERN VALUE
_wrap_VectorField_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  std::vector< TruckBoris::Field >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Field >::size_type >(val2);
  (arg1)->resize(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.erase

  call-seq:
    erase(pos) -> std::vector< TruckBoris::Field >::iterator
    erase(first, last) -> std::vector< TruckBoris::Field >::iterator

Delete a portion of the VectorField.
*/
SWIGINTERN VALUE
_wrap_VectorField_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  std::vector< TruckBoris::Field >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< TruckBoris::Field >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Field >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Field >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::iterator","erase", 2, argv[0] ));
    }
  }
  result = std_vector_Sl_TruckBoris_Field_Sg__erase__SWIG_0(arg1,arg2);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Field >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorField_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  std::vector< TruckBoris::Field >::iterator arg2 ;
  std::vector< TruckBoris::Field >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::vector< TruckBoris::Field >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Field >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Field >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Field >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Field >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::iterator","erase", 3, argv[1] ));
    }
  }
  result = std_vector_Sl_TruckBoris_Field_Sg__erase__SWIG_1(arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Field >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorField_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Field >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorField_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Field >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Field >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorField_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "erase", 
    "    std::vector< TruckBoris::Field >::iterator erase(std::vector< TruckBoris::Field >::iterator pos)\n"
    "    std::vector< TruckBoris::Field >::iterator erase(std::vector< TruckBoris::Field >::iterator first, std::vector< TruckBoris::Field >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_VectorField_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_VectorField_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_VectorField__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field >::size_type arg1 ;
  std::vector< TruckBoris::Field >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< TruckBoris::Field > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::size_type","vector<(TruckBoris::Field)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< TruckBoris::Field >::size_type >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_TruckBoris__Field,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::value_type const &","vector<(TruckBoris::Field)>", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Field >::value_type const &","vector<(TruckBoris::Field)>", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::Field >::value_type * >(argp2);
  result = (std::vector< TruckBoris::Field > *)new std::vector< TruckBoris::Field >(arg1,(std::vector< TruckBoris::Field >::value_type const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_VectorField(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_VectorField__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorField__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorField__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TruckBoris__Field, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorField__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "VectorField.new", 
    "    VectorField.new()\n"
    "    VectorField.new(std::vector< TruckBoris::Field > const &)\n"
    "    VectorField.new(std::vector< TruckBoris::Field >::size_type size)\n"
    "    VectorField.new(std::vector< TruckBoris::Field >::size_type size, std::vector< TruckBoris::Field >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.front

  call-seq:
    front -> Field

Return the first element in VectorField.
*/
SWIGINTERN VALUE
_wrap_VectorField_front(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Field >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  result = (std::vector< TruckBoris::Field >::value_type *) &((std::vector< TruckBoris::Field > const *)arg1)->front();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TruckBoris__Field, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.back

  call-seq:
    back -> Field

Return the last element in VectorField.
*/
SWIGINTERN VALUE
_wrap_VectorField_back(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Field >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  result = (std::vector< TruckBoris::Field >::value_type *) &((std::vector< TruckBoris::Field > const *)arg1)->back();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TruckBoris__Field, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.assign

  call-seq:
    assign(n, x)

Assign a new VectorField or portion of it.
*/
SWIGINTERN VALUE
_wrap_VectorField_assign(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  std::vector< TruckBoris::Field >::size_type arg2 ;
  std::vector< TruckBoris::Field >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Field >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__Field,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::value_type const &","assign", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Field >::value_type const &","assign", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::Field >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< TruckBoris::Field >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the VectorField.
*/
SWIGINTERN VALUE
_wrap_VectorField_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  std::vector< TruckBoris::Field >::size_type arg2 ;
  std::vector< TruckBoris::Field >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Field >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__Field,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::value_type const &","resize", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Field >::value_type const &","resize", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::Field >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< TruckBoris::Field >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorField_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorField_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TruckBoris__Field, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorField_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "VectorField.resize", 
    "    void VectorField.resize(std::vector< TruckBoris::Field >::size_type new_size)\n"
    "    void VectorField.resize(std::vector< TruckBoris::Field >::size_type new_size, std::vector< TruckBoris::Field >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.insert

  call-seq:
    insert(pos, argc) -> VectorField
    insert(pos, x) -> std::vector< TruckBoris::Field >::iterator
    insert(pos, n, x)

Insert one or more new elements in the VectorField.
*/
SWIGINTERN VALUE
_wrap_VectorField_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  std::vector< TruckBoris::Field >::iterator arg2 ;
  std::vector< TruckBoris::Field >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< TruckBoris::Field >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Field >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Field >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::iterator","insert", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__Field,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::value_type const &","insert", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Field >::value_type const &","insert", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::Field >::value_type * >(argp3);
  result = std_vector_Sl_TruckBoris_Field_Sg__insert__SWIG_1(arg1,arg2,(TruckBoris::Field const &)*arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Field >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorField_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  std::vector< TruckBoris::Field >::iterator arg2 ;
  std::vector< TruckBoris::Field >::size_type arg3 ;
  std::vector< TruckBoris::Field >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Field >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Field >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::Field >::size_type >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_TruckBoris__Field,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::value_type const &","insert", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Field >::value_type const &","insert", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< std::vector< TruckBoris::Field >::value_type * >(argp4);
  std_vector_Sl_TruckBoris_Field_Sg__insert__SWIG_2(arg1,arg2,arg3,(TruckBoris::Field const &)*arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorField_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Field >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TruckBoris__Field, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorField_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_VectorField_insert__SWIG_0(nargs, args, self);
          }
          return _wrap_VectorField_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Field >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_TruckBoris__Field, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorField_insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< TruckBoris::Field >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< TruckBoris::Field >::iterator pos, std::vector< TruckBoris::Field >::value_type const &x)\n"
    "    void insert(std::vector< TruckBoris::Field >::iterator pos, std::vector< TruckBoris::Field >::size_type n, std::vector< TruckBoris::Field >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.reserve

  call-seq:
    reserve(n)

Reserve memory in the VectorField for a number of elements.
*/
SWIGINTERN VALUE
_wrap_VectorField_reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  std::vector< TruckBoris::Field >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Field >::size_type >(val2);
  (arg1)->reserve(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorField.capacity

  call-seq:
    capacity -> std::vector< TruckBoris::Field >::size_type

Reserved capacity of the VectorField.
*/
SWIGINTERN VALUE
_wrap_VectorField_capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Field > *arg1 = (std::vector< TruckBoris::Field > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Field >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Field > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Field > * >(argp1);
  result = ((std::vector< TruckBoris::Field > const *)arg1)->capacity();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_TruckBoris_Field_Sg_(std::vector< TruckBoris::Field > *arg1) {
    delete arg1;
}

static swig_class SwigClassVectorTypedef;


/*
  Document-method: Rtruckboris::VectorTypedef.dup

  call-seq:
    dup -> VectorTypedef

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_dup(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  result = (std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *)std_vector_Sl_TruckBoris_Typedef_Sg__dup(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Typedef_Sg__inspect(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.to_a

  call-seq:
    to_a -> VALUE

Convert VectorTypedef to an Array.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Typedef_Sg__to_a(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Typedef_Sg__to_s(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the VectorTypedef.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_slice(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  std::vector< TruckBoris::Typedef >::difference_type arg2 ;
  std::vector< TruckBoris::Typedef >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Typedef >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::Typedef >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_TruckBoris_Typedef_Sg__slice(arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.each

  call-seq:
    each -> VectorTypedef

Iterate thru each element in the VectorTypedef.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_each(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  result = (std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *)std_vector_Sl_TruckBoris_Typedef_Sg__each(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.select

  call-seq:
    select -> VectorTypedef

Iterate thru each element in the VectorTypedef and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_select(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  result = (std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *)std_vector_Sl_TruckBoris_Typedef_Sg__select(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  std::vector< TruckBoris::Typedef >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Typedef >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_TruckBoris_Typedef_Sg__delete_at(arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorTypedef___delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  std::vector< TruckBoris::Typedef >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TruckBoris__Typedef,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::value_type const &","__delete2__", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Typedef >::value_type const &","__delete2__", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::Typedef >::value_type * >(argp2);
  result = (VALUE)std_vector_Sl_TruckBoris_Typedef_Sg____delete2__(arg1,(TruckBoris::Typedef const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.reject!

  call-seq:
    reject! -> VectorTypedef

Iterate thru each element in the VectorTypedef and reject those that fail a condition.  A block must be provided.  VectorTypedef is modified in place.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  result = (std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *)std_vector_Sl_TruckBoris_Typedef_Sg__reject_bang(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the VectorTypedef.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_pop(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Typedef_Sg__pop(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.push

  call-seq:
    push(e) -> Typedef

Add an element at the end of the VectorTypedef.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_push(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  std::vector< TruckBoris::Typedef >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< TruckBoris::Typedef >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TruckBoris__Typedef,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::value_type const &","push", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Typedef >::value_type const &","push", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::Typedef >::value_type * >(argp2);
  result = std_vector_Sl_TruckBoris_Typedef_Sg__push(arg1,(TruckBoris::Typedef const &)*arg2);
  vresult = SWIG_NewPointerObj((new std::vector< TruckBoris::Typedef >::value_type(static_cast< const std::vector< TruckBoris::Typedef >::value_type& >(result))), SWIGTYPE_p_TruckBoris__Typedef, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.reject

  call-seq:
    reject -> VectorTypedef

Iterate thru each element in the VectorTypedef and reject those that fail a condition returning a new VectorTypedef.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_reject(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  result = (std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *)std_vector_Sl_TruckBoris_Typedef_Sg__reject(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_at(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  std::vector< TruckBoris::Typedef >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Typedef >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_TruckBoris_Typedef_Sg__at((std::vector< TruckBoris::Typedef > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  std::vector< TruckBoris::Typedef >::difference_type arg2 ;
  std::vector< TruckBoris::Typedef >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Typedef >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::Typedef >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_TruckBoris_Typedef_Sg____getitem____SWIG_0((std::vector< TruckBoris::Typedef > const *)arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorTypedef___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  std::vector< TruckBoris::Typedef >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Typedef >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_TruckBoris_Typedef_Sg____getitem____SWIG_1((std::vector< TruckBoris::Typedef > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorTypedef___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  arg2 = argv[0];
  result = (VALUE)std_vector_Sl_TruckBoris_Typedef_Sg____getitem____SWIG_2((std::vector< TruckBoris::Typedef > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorTypedef___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorTypedef___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_VectorTypedef___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorTypedef___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< TruckBoris::Typedef >::difference_type i, std::vector< TruckBoris::Typedef >::difference_type j)\n"
    "    VALUE __getitem__(std::vector< TruckBoris::Typedef >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  std::vector< TruckBoris::Typedef >::difference_type arg2 ;
  std::vector< TruckBoris::Typedef >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Typedef >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__Typedef,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::value_type const &","__setitem__", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Typedef >::value_type const &","__setitem__", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::Typedef >::value_type * >(argp3);
  result = (VALUE)std_vector_Sl_TruckBoris_Typedef_Sg____setitem____SWIG_0(arg1,arg2,(TruckBoris::Typedef const &)*arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorTypedef___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  std::vector< TruckBoris::Typedef >::difference_type arg2 ;
  std::vector< TruckBoris::Typedef >::difference_type arg3 ;
  std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Typedef >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::Typedef >::difference_type >(val3);
  {
    std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *ptr = (std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  try {
    result = (VALUE)std_vector_Sl_TruckBoris_Typedef_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > const &)*arg4);
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorTypedef___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TruckBoris__Typedef, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorTypedef___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorTypedef___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< TruckBoris::Typedef >::difference_type i, std::vector< TruckBoris::Typedef >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< TruckBoris::Typedef >::difference_type i, std::vector< TruckBoris::Typedef >::difference_type j, std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the VectorTypedef.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_shift(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  result = (VALUE)std_vector_Sl_TruckBoris_Typedef_Sg__shift(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.insert

  call-seq:
    insert(pos, argc) -> VectorTypedef
    insert(pos, x) -> std::vector< TruckBoris::Typedef >::iterator
    insert(pos, n, x)

Insert one or more new elements in the VectorTypedef.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  std::vector< TruckBoris::Typedef >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Typedef >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  result = (std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *)std_vector_Sl_TruckBoris_Typedef_Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.unshift

  call-seq:
    unshift(argc) -> VectorTypedef

Add one or more elements at the beginning of the VectorTypedef.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  result = (std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *)std_vector_Sl_TruckBoris_Typedef_Sg__unshift(arg1,arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VectorTypedef__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (std::vector< TruckBoris::Typedef > *)new std::vector< TruckBoris::Typedef >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VectorTypedef__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< TruckBoris::Typedef > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *ptr = (std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > const &","vector<(TruckBoris::Typedef)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Typedef > const &","vector<(TruckBoris::Typedef)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  result = (std::vector< TruckBoris::Typedef > *)new std::vector< TruckBoris::Typedef >((std::vector< TruckBoris::Typedef > const &)*arg1);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.empty?

  call-seq:
    empty? -> bool

Check if the VectorTypedef is empty or not.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  result = (bool)((std::vector< TruckBoris::Typedef > const *)arg1)->empty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.size

  call-seq:
    size -> std::vector< TruckBoris::Typedef >::size_type

Size or Length of the VectorTypedef.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_size(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Typedef >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  result = ((std::vector< TruckBoris::Typedef > const *)arg1)->size();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.clear

  call-seq:
    clear

Clear VectorTypedef contents.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_clear(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorTypedef_swap(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  std::vector< TruckBoris::Typedef > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Typedef > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp2);
  (arg1)->swap(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorTypedef_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< TruckBoris::Typedef > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  result = ((std::vector< TruckBoris::Typedef > const *)arg1)->get_allocator();
  vresult = SWIG_NewPointerObj((new std::vector< TruckBoris::Typedef >::allocator_type(static_cast< const std::vector< TruckBoris::Typedef >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_TruckBoris__Typedef_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.begin

  call-seq:
    begin -> std::vector< TruckBoris::Typedef >::iterator

Return an iterator to the beginning of the VectorTypedef.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_begin(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Typedef >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  result = (arg1)->begin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Typedef >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.end

  call-seq:
    end -> std::vector< TruckBoris::Typedef >::iterator

Return an iterator to past the end of the VectorTypedef.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_end(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Typedef >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  result = (arg1)->end();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Typedef >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.rbegin

  call-seq:
    rbegin -> std::vector< TruckBoris::Typedef >::reverse_iterator

Return a reverse iterator to the beginning (the end) of the VectorTypedef.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Typedef >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  result = (arg1)->rbegin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Typedef >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.rend

  call-seq:
    rend -> std::vector< TruckBoris::Typedef >::reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the VectorTypedef.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_rend(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Typedef >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  result = (arg1)->rend();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Typedef >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VectorTypedef__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< TruckBoris::Typedef > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::size_type","vector<(TruckBoris::Typedef)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< TruckBoris::Typedef >::size_type >(val1);
  result = (std::vector< TruckBoris::Typedef > *)new std::vector< TruckBoris::Typedef >(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the VectorTypedef.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  std::vector< TruckBoris::Typedef >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Typedef >::size_type >(val2);
  (arg1)->resize(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.erase

  call-seq:
    erase(pos) -> std::vector< TruckBoris::Typedef >::iterator
    erase(first, last) -> std::vector< TruckBoris::Typedef >::iterator

Delete a portion of the VectorTypedef.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  std::vector< TruckBoris::Typedef >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< TruckBoris::Typedef >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Typedef >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Typedef >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::iterator","erase", 2, argv[0] ));
    }
  }
  result = std_vector_Sl_TruckBoris_Typedef_Sg__erase__SWIG_0(arg1,arg2);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Typedef >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorTypedef_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  std::vector< TruckBoris::Typedef >::iterator arg2 ;
  std::vector< TruckBoris::Typedef >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::vector< TruckBoris::Typedef >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Typedef >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Typedef >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Typedef >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Typedef >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::iterator","erase", 3, argv[1] ));
    }
  }
  result = std_vector_Sl_TruckBoris_Typedef_Sg__erase__SWIG_1(arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Typedef >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorTypedef_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Typedef >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorTypedef_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Typedef >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Typedef >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorTypedef_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "erase", 
    "    std::vector< TruckBoris::Typedef >::iterator erase(std::vector< TruckBoris::Typedef >::iterator pos)\n"
    "    std::vector< TruckBoris::Typedef >::iterator erase(std::vector< TruckBoris::Typedef >::iterator first, std::vector< TruckBoris::Typedef >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_VectorTypedef_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_VectorTypedef_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_VectorTypedef__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef >::size_type arg1 ;
  std::vector< TruckBoris::Typedef >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< TruckBoris::Typedef > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::size_type","vector<(TruckBoris::Typedef)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< TruckBoris::Typedef >::size_type >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_TruckBoris__Typedef,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::value_type const &","vector<(TruckBoris::Typedef)>", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Typedef >::value_type const &","vector<(TruckBoris::Typedef)>", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< std::vector< TruckBoris::Typedef >::value_type * >(argp2);
  result = (std::vector< TruckBoris::Typedef > *)new std::vector< TruckBoris::Typedef >(arg1,(std::vector< TruckBoris::Typedef >::value_type const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_VectorTypedef(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_VectorTypedef__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorTypedef__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorTypedef__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TruckBoris__Typedef, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorTypedef__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "VectorTypedef.new", 
    "    VectorTypedef.new()\n"
    "    VectorTypedef.new(std::vector< TruckBoris::Typedef > const &)\n"
    "    VectorTypedef.new(std::vector< TruckBoris::Typedef >::size_type size)\n"
    "    VectorTypedef.new(std::vector< TruckBoris::Typedef >::size_type size, std::vector< TruckBoris::Typedef >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.front

  call-seq:
    front -> Typedef

Return the first element in VectorTypedef.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_front(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Typedef >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  result = (std::vector< TruckBoris::Typedef >::value_type *) &((std::vector< TruckBoris::Typedef > const *)arg1)->front();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TruckBoris__Typedef, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.back

  call-seq:
    back -> Typedef

Return the last element in VectorTypedef.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_back(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Typedef >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  result = (std::vector< TruckBoris::Typedef >::value_type *) &((std::vector< TruckBoris::Typedef > const *)arg1)->back();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TruckBoris__Typedef, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.assign

  call-seq:
    assign(n, x)

Assign a new VectorTypedef or portion of it.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_assign(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  std::vector< TruckBoris::Typedef >::size_type arg2 ;
  std::vector< TruckBoris::Typedef >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Typedef >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__Typedef,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::value_type const &","assign", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Typedef >::value_type const &","assign", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::Typedef >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< TruckBoris::Typedef >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the VectorTypedef.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  std::vector< TruckBoris::Typedef >::size_type arg2 ;
  std::vector< TruckBoris::Typedef >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Typedef >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__Typedef,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::value_type const &","resize", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Typedef >::value_type const &","resize", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::Typedef >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< TruckBoris::Typedef >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorTypedef_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorTypedef_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TruckBoris__Typedef, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorTypedef_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "VectorTypedef.resize", 
    "    void VectorTypedef.resize(std::vector< TruckBoris::Typedef >::size_type new_size)\n"
    "    void VectorTypedef.resize(std::vector< TruckBoris::Typedef >::size_type new_size, std::vector< TruckBoris::Typedef >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.insert

  call-seq:
    insert(pos, argc) -> VectorTypedef
    insert(pos, x) -> std::vector< TruckBoris::Typedef >::iterator
    insert(pos, n, x)

Insert one or more new elements in the VectorTypedef.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  std::vector< TruckBoris::Typedef >::iterator arg2 ;
  std::vector< TruckBoris::Typedef >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< TruckBoris::Typedef >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Typedef >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Typedef >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::iterator","insert", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TruckBoris__Typedef,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::value_type const &","insert", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Typedef >::value_type const &","insert", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< TruckBoris::Typedef >::value_type * >(argp3);
  result = std_vector_Sl_TruckBoris_Typedef_Sg__insert__SWIG_1(arg1,arg2,(TruckBoris::Typedef const &)*arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< TruckBoris::Typedef >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorTypedef_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  std::vector< TruckBoris::Typedef >::iterator arg2 ;
  std::vector< TruckBoris::Typedef >::size_type arg3 ;
  std::vector< TruckBoris::Typedef >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< TruckBoris::Typedef >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Typedef >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< TruckBoris::Typedef >::size_type >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_TruckBoris__Typedef,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::value_type const &","insert", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< TruckBoris::Typedef >::value_type const &","insert", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< std::vector< TruckBoris::Typedef >::value_type * >(argp4);
  std_vector_Sl_TruckBoris_Typedef_Sg__insert__SWIG_2(arg1,arg2,arg3,(TruckBoris::Typedef const &)*arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorTypedef_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Typedef >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TruckBoris__Typedef, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorTypedef_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_VectorTypedef_insert__SWIG_0(nargs, args, self);
          }
          return _wrap_VectorTypedef_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< TruckBoris::Typedef >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_TruckBoris__Typedef, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorTypedef_insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< TruckBoris::Typedef >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< TruckBoris::Typedef >::iterator pos, std::vector< TruckBoris::Typedef >::value_type const &x)\n"
    "    void insert(std::vector< TruckBoris::Typedef >::iterator pos, std::vector< TruckBoris::Typedef >::size_type n, std::vector< TruckBoris::Typedef >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.reserve

  call-seq:
    reserve(n)

Reserve memory in the VectorTypedef for a number of elements.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  std::vector< TruckBoris::Typedef >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< TruckBoris::Typedef >::size_type >(val2);
  (arg1)->reserve(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorTypedef.capacity

  call-seq:
    capacity -> std::vector< TruckBoris::Typedef >::size_type

Reserved capacity of the VectorTypedef.
*/
SWIGINTERN VALUE
_wrap_VectorTypedef_capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< TruckBoris::Typedef > *arg1 = (std::vector< TruckBoris::Typedef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Typedef >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< TruckBoris::Typedef > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< TruckBoris::Typedef > * >(argp1);
  result = ((std::vector< TruckBoris::Typedef > const *)arg1)->capacity();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_TruckBoris_Typedef_Sg_(std::vector< TruckBoris::Typedef > *arg1) {
    delete arg1;
}

static swig_class SwigClassVectorString;


/*
  Document-method: Rtruckboris::VectorString.dup

  call-seq:
    dup -> VectorString

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_VectorString_dup(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg__dup(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_VectorString_inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (VALUE)std_vector_Sl_std_string_Sg__inspect(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.to_a

  call-seq:
    to_a -> VALUE

Convert VectorString to an Array.
*/
SWIGINTERN VALUE
_wrap_VectorString_to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (VALUE)std_vector_Sl_std_string_Sg__to_a(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_VectorString_to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (VALUE)std_vector_Sl_std_string_Sg__to_s(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the VectorString.
*/
SWIGINTERN VALUE
_wrap_VectorString_slice(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::string >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< std::string >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_std_string_Sg__slice(arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.each

  call-seq:
    each -> VectorString

Iterate thru each element in the VectorString.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_VectorString_each(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg__each(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.select

  call-seq:
    select -> VectorString

Iterate thru each element in the VectorString and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_VectorString_select(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg__select(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_VectorString_delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::string >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_std_string_Sg__delete_at(arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorString___delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< std::string >::value_type const &","__delete2__", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::string >::value_type const &","__delete2__", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = (VALUE)std_vector_Sl_std_string_Sg____delete2__(arg1,(std::string const &)*arg2);
  vresult = result;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.reject!

  call-seq:
    reject! -> VectorString

Iterate thru each element in the VectorString and reject those that fail a condition.  A block must be provided.  VectorString is modified in place.
*/
SWIGINTERN VALUE
_wrap_VectorString_rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg__reject_bang(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the VectorString.
*/
SWIGINTERN VALUE
_wrap_VectorString_pop(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (VALUE)std_vector_Sl_std_string_Sg__pop(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.push

  call-seq:
    push(e) -> std::vector< std::string >::value_type const

Add an element at the end of the VectorString.
*/
SWIGINTERN VALUE
_wrap_VectorString_push(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::string >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< std::string >::value_type const &","push", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::string >::value_type const &","push", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = std_vector_Sl_std_string_Sg__push(arg1,(std::string const &)*arg2);
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.reject

  call-seq:
    reject -> VectorString

Iterate thru each element in the VectorString and reject those that fail a condition returning a new VectorString.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_VectorString_reject(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg__reject(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_VectorString_at(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::string >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_std_string_Sg__at((std::vector< std::string > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_VectorString___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::string >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< std::string >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_std_string_Sg____getitem____SWIG_0((std::vector< std::string > const *)arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorString___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::string >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_std_string_Sg____getitem____SWIG_1((std::vector< std::string > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorString___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  arg2 = argv[0];
  result = (VALUE)std_vector_Sl_std_string_Sg____getitem____SWIG_2((std::vector< std::string > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorString___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorString___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_VectorString___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorString___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)\n"
    "    VALUE __getitem__(std::vector< std::string >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_VectorString___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::string >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< std::string >::value_type const &","__setitem__", 3, argv[1] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::string >::value_type const &","__setitem__", 3, argv[1])); 
    }
    arg3 = ptr;
  }
  result = (VALUE)std_vector_Sl_std_string_Sg____setitem____SWIG_0(arg1,arg2,(std::string const &)*arg3);
  vresult = result;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorString___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::string >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< std::string >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< std::string,std::allocator< std::string > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::string,std::allocator< std::string > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  try {
    result = (VALUE)std_vector_Sl_std_string_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorString___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorString___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<std::string,std::allocator< std::string > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorString___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, std::vector< std::string,std::allocator< std::string > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the VectorString.
*/
SWIGINTERN VALUE
_wrap_VectorString_shift(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (VALUE)std_vector_Sl_std_string_Sg__shift(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.insert

  call-seq:
    insert(pos, argc) -> VectorString
    insert(pos, x) -> std::vector< std::string >::iterator
    insert(pos, n, x)

Insert one or more new elements in the VectorString.
*/
SWIGINTERN VALUE
_wrap_VectorString_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::string >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.unshift

  call-seq:
    unshift(argc) -> VectorString

Add one or more elements at the beginning of the VectorString.
*/
SWIGINTERN VALUE
_wrap_VectorString_unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg__unshift(arg1,arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VectorString__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VectorString__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::string > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > const &","vector<(std::string)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::string > const &","vector<(std::string)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.empty?

  call-seq:
    empty? -> bool

Check if the VectorString is empty or not.
*/
SWIGINTERN VALUE
_wrap_VectorString_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.size

  call-seq:
    size -> std::vector< std::string >::size_type

Size or Length of the VectorString.
*/
SWIGINTERN VALUE
_wrap_VectorString_size(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->size();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.clear

  call-seq:
    clear

Clear VectorString contents.
*/
SWIGINTERN VALUE
_wrap_VectorString_clear(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorString_swap(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< std::string > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::string > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  (arg1)->swap(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorString_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< std::string > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->get_allocator();
  vresult = SWIG_NewPointerObj((new std::vector< std::string >::allocator_type(static_cast< const std::vector< std::string >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__string_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.begin

  call-seq:
    begin -> std::vector< std::string >::iterator

Return an iterator to the beginning of the VectorString.
*/
SWIGINTERN VALUE
_wrap_VectorString_begin(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (arg1)->begin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< std::string >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.end

  call-seq:
    end -> std::vector< std::string >::iterator

Return an iterator to past the end of the VectorString.
*/
SWIGINTERN VALUE
_wrap_VectorString_end(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (arg1)->end();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< std::string >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.rbegin

  call-seq:
    rbegin -> std::vector< std::string >::reverse_iterator

Return a reverse iterator to the beginning (the end) of the VectorString.
*/
SWIGINTERN VALUE
_wrap_VectorString_rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (arg1)->rbegin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.rend

  call-seq:
    rend -> std::vector< std::string >::reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the VectorString.
*/
SWIGINTERN VALUE
_wrap_VectorString_rend(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (arg1)->rend();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VectorString__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< std::string >::size_type","vector<(std::string)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the VectorString.
*/
SWIGINTERN VALUE
_wrap_VectorString_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::string >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->resize(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.erase

  call-seq:
    erase(pos) -> std::vector< std::string >::iterator
    erase(first, last) -> std::vector< std::string >::iterator

Delete a portion of the VectorString.
*/
SWIGINTERN VALUE
_wrap_VectorString_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::string >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::string >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::string >::iterator","erase", 2, argv[0] ));
    }
  }
  result = std_vector_Sl_std_string_Sg__erase__SWIG_0(arg1,arg2);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< std::string >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorString_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::string >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::string >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::string >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::string >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::string >::iterator","erase", 3, argv[1] ));
    }
  }
  result = std_vector_Sl_std_string_Sg__erase__SWIG_1(arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< std::string >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorString_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorString_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorString_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "erase", 
    "    std::vector< std::string >::iterator erase(std::vector< std::string >::iterator pos)\n"
    "    std::vector< std::string >::iterator erase(std::vector< std::string >::iterator first, std::vector< std::string >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_VectorString_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_VectorString_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_VectorString__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::string > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< std::string >::size_type","vector<(std::string)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< std::string >::value_type const &","vector<(std::string)>", 2, argv[1] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::string >::value_type const &","vector<(std::string)>", 2, argv[1])); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1,(std::vector< std::string >::value_type const &)*arg2);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return self;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_VectorString(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_VectorString__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorString__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorString__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorString__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "VectorString.new", 
    "    VectorString.new()\n"
    "    VectorString.new(std::vector< std::string > const &)\n"
    "    VectorString.new(std::vector< std::string >::size_type size)\n"
    "    VectorString.new(std::vector< std::string >::size_type size, std::vector< std::string >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.front

  call-seq:
    front -> std::vector< std::string >::value_type const &

Return the first element in VectorString.
*/
SWIGINTERN VALUE
_wrap_VectorString_front(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->front();
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.back

  call-seq:
    back -> std::vector< std::string >::value_type const &

Return the last element in VectorString.
*/
SWIGINTERN VALUE
_wrap_VectorString_back(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->back();
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.assign

  call-seq:
    assign(n, x)

Assign a new VectorString or portion of it.
*/
SWIGINTERN VALUE
_wrap_VectorString_assign(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::string >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< std::string >::value_type const &","assign", 3, argv[1] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::string >::value_type const &","assign", 3, argv[1])); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::string >::value_type const &)*arg3);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the VectorString.
*/
SWIGINTERN VALUE
_wrap_VectorString_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::string >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< std::string >::value_type const &","resize", 3, argv[1] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::string >::value_type const &","resize", 3, argv[1])); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::string >::value_type const &)*arg3);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorString_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorString_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorString_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "VectorString.resize", 
    "    void VectorString.resize(std::vector< std::string >::size_type new_size)\n"
    "    void VectorString.resize(std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.insert

  call-seq:
    insert(pos, argc) -> VectorString
    insert(pos, x) -> std::vector< std::string >::iterator
    insert(pos, n, x)

Insert one or more new elements in the VectorString.
*/
SWIGINTERN VALUE
_wrap_VectorString_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  std::vector< std::string >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::string >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::string >::iterator","insert", 2, argv[0] ));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< std::string >::value_type const &","insert", 3, argv[1] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::string >::value_type const &","insert", 3, argv[1])); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_string_Sg__insert__SWIG_1(arg1,arg2,(std::string const &)*arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< std::string >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorString_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::size_type arg3 ;
  std::vector< std::string >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::string >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::string >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< std::string >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< std::string >::size_type >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< std::string >::value_type const &","insert", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::string >::value_type const &","insert", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_string_Sg__insert__SWIG_2(arg1,arg2,arg3,(std::string const &)*arg4);
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorString_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorString_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_VectorString_insert__SWIG_0(nargs, args, self);
          }
          return _wrap_VectorString_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorString_insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< std::string >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const &x)\n"
    "    void insert(std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.reserve

  call-seq:
    reserve(n)

Reserve memory in the VectorString for a number of elements.
*/
SWIGINTERN VALUE
_wrap_VectorString_reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::string >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->reserve(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.capacity

  call-seq:
    capacity -> std::vector< std::string >::size_type

Reserved capacity of the VectorString.
*/
SWIGINTERN VALUE
_wrap_VectorString_capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->capacity();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorString_map_bang(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","map_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg__map_bang(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rtruckboris::VectorString.__delete__

  call-seq:
    __delete__(val) -> VALUE

Delete a matching element.
*/
SWIGINTERN VALUE
_wrap_VectorString___delete__(int argc, VALUE *argv, VALUE self) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::string > *","__delete__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","__delete__", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","__delete__", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = (VALUE)std_vector_Sl_std_string_Sg____delete__(arg1,(std::string const &)*arg2);
  vresult = result;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_std_string_Sg_(std::vector< std::string > *arg1) {
    delete arg1;
}

static swig_class SwigClassType;

SWIGINTERN VALUE
_wrap_new_Type__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Type *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TruckBoris::Type *)new TruckBoris::Type();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Type_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Type_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TruckBoris__Type);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Type__SWIG_1(int argc, VALUE *argv, VALUE self) {
  clang::QualType *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  TruckBoris::Type *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_clang__QualType,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "clang::QualType const &","Type", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "clang::QualType const &","Type", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< clang::QualType * >(argp1);
  result = (TruckBoris::Type *)new TruckBoris::Type((clang::QualType const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Type(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Type__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_clang__QualType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Type__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Type.new", 
    "    Type.new()\n"
    "    Type.new(clang::QualType const &type)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TruckBoris_Type(TruckBoris::Type *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Type_getName(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Type *arg1 = (TruckBoris::Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Type const *","getName", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Type * >(argp1);
  result = ((TruckBoris::Type const *)arg1)->getName();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Type_isCanonical(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Type *arg1 = (TruckBoris::Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Type const *","isCanonical", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Type * >(argp1);
  result = (bool)((TruckBoris::Type const *)arg1)->isCanonical();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Type_withConst(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Type *arg1 = (TruckBoris::Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TruckBoris::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Type const *","withConst", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Type * >(argp1);
  result = ((TruckBoris::Type const *)arg1)->withConst();
  vresult = SWIG_NewPointerObj((new TruckBoris::Type(static_cast< const TruckBoris::Type& >(result))), SWIGTYPE_p_TruckBoris__Type, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Type_withVolatile(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Type *arg1 = (TruckBoris::Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TruckBoris::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Type const *","withVolatile", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Type * >(argp1);
  result = ((TruckBoris::Type const *)arg1)->withVolatile();
  vresult = SWIG_NewPointerObj((new TruckBoris::Type(static_cast< const TruckBoris::Type& >(result))), SWIGTYPE_p_TruckBoris__Type, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Type_withRestrict(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Type *arg1 = (TruckBoris::Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TruckBoris::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Type const *","withRestrict", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Type * >(argp1);
  result = ((TruckBoris::Type const *)arg1)->withRestrict();
  vresult = SWIG_NewPointerObj((new TruckBoris::Type(static_cast< const TruckBoris::Type& >(result))), SWIGTYPE_p_TruckBoris__Type, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Type_getCanonicalType(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Type *arg1 = (TruckBoris::Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TruckBoris::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Type const *","getCanonicalType", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Type * >(argp1);
  result = ((TruckBoris::Type const *)arg1)->getCanonicalType();
  vresult = SWIG_NewPointerObj((new TruckBoris::Type(static_cast< const TruckBoris::Type& >(result))), SWIGTYPE_p_TruckBoris__Type, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Type_getUnqualifiedType(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Type *arg1 = (TruckBoris::Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TruckBoris::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Type const *","getUnqualifiedType", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Type * >(argp1);
  result = ((TruckBoris::Type const *)arg1)->getUnqualifiedType();
  vresult = SWIG_NewPointerObj((new TruckBoris::Type(static_cast< const TruckBoris::Type& >(result))), SWIGTYPE_p_TruckBoris__Type, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Type_getLocalUnqualifiedType(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Type *arg1 = (TruckBoris::Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TruckBoris::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Type const *","getLocalUnqualifiedType", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Type * >(argp1);
  result = ((TruckBoris::Type const *)arg1)->getLocalUnqualifiedType();
  vresult = SWIG_NewPointerObj((new TruckBoris::Type(static_cast< const TruckBoris::Type& >(result))), SWIGTYPE_p_TruckBoris__Type, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Type_getLocallyUnqualifiedSingleStepDesugaredType(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Type *arg1 = (TruckBoris::Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TruckBoris::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Type const *","getLocallyUnqualifiedSingleStepDesugaredType", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Type * >(argp1);
  result = ((TruckBoris::Type const *)arg1)->getLocallyUnqualifiedSingleStepDesugaredType();
  vresult = SWIG_NewPointerObj((new TruckBoris::Type(static_cast< const TruckBoris::Type& >(result))), SWIGTYPE_p_TruckBoris__Type, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Type_getNonReferenceType(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Type *arg1 = (TruckBoris::Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TruckBoris::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Type const *","getNonReferenceType", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Type * >(argp1);
  result = ((TruckBoris::Type const *)arg1)->getNonReferenceType();
  vresult = SWIG_NewPointerObj((new TruckBoris::Type(static_cast< const TruckBoris::Type& >(result))), SWIGTYPE_p_TruckBoris__Type, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Type_isEmpty(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Type *arg1 = (TruckBoris::Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Type const *","isEmpty", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Type * >(argp1);
  result = (bool)((TruckBoris::Type const *)arg1)->isEmpty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Type_setClangQualType(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Type *arg1 = (TruckBoris::Type *) 0 ;
  clang::QualType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Type *","setClangQualType", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Type * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_clang__QualType,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "clang::QualType const &","setClangQualType", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "clang::QualType const &","setClangQualType", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< clang::QualType * >(argp2);
  (arg1)->setClangQualType((clang::QualType const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Type_getClangQualType(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Type *arg1 = (TruckBoris::Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  clang::QualType result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Type const *","getClangQualType", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Type * >(argp1);
  result = ((TruckBoris::Type const *)arg1)->getClangQualType();
  vresult = SWIG_NewPointerObj((new clang::QualType(static_cast< const clang::QualType& >(result))), SWIGTYPE_p_clang__QualType, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Type_getClangTypePtr(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Type *arg1 = (TruckBoris::Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  clang::Type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Type const *","getClangTypePtr", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Type * >(argp1);
  result = (clang::Type *)((TruckBoris::Type const *)arg1)->getClangTypePtr();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_clang__Type, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Type_getClangTypeClassName(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Type *arg1 = (TruckBoris::Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Type const *","getClangTypeClassName", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Type * >(argp1);
  result = ((TruckBoris::Type const *)arg1)->getClangTypeClassName();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassTypedef;

SWIGINTERN VALUE
_wrap_new_Typedef__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Typedef *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TruckBoris::Typedef *)new TruckBoris::Typedef();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Typedef_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Typedef_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TruckBoris__Typedef);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Typedef__SWIG_1(int argc, VALUE *argv, VALUE self) {
  clang::TypedefDecl *arg1 = (clang::TypedefDecl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TruckBoris::Typedef *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_clang__TypedefDecl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "clang::TypedefDecl *","Typedef", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< clang::TypedefDecl * >(argp1);
  result = (TruckBoris::Typedef *)new TruckBoris::Typedef(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Typedef(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Typedef__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_clang__TypedefDecl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Typedef__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Typedef.new", 
    "    Typedef.new()\n"
    "    Typedef.new(clang::TypedefDecl *var)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TruckBoris_Typedef(TruckBoris::Typedef *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Typedef_getName(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Typedef *arg1 = (TruckBoris::Typedef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Typedef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Typedef const *","getName", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Typedef * >(argp1);
  result = ((TruckBoris::Typedef const *)arg1)->getName();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Typedef_getType(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Typedef *arg1 = (TruckBoris::Typedef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TruckBoris::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Typedef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Typedef const *","getType", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Typedef * >(argp1);
  result = ((TruckBoris::Typedef const *)arg1)->getType();
  vresult = SWIG_NewPointerObj((new TruckBoris::Type(static_cast< const TruckBoris::Type& >(result))), SWIGTYPE_p_TruckBoris__Type, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Typedef_getRaw(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Typedef *arg1 = (TruckBoris::Typedef *) 0 ;
  clang::SourceManager *arg2 = 0 ;
  clang::LangOptions *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Typedef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Typedef const *","getRaw", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Typedef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_clang__SourceManager,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "clang::SourceManager &","getRaw", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "clang::SourceManager &","getRaw", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< clang::SourceManager * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_clang__LangOptions,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "clang::LangOptions const &","getRaw", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "clang::LangOptions const &","getRaw", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< clang::LangOptions * >(argp3);
  result = ((TruckBoris::Typedef const *)arg1)->getRaw(*arg2,(clang::LangOptions const &)*arg3);
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassParameter;

SWIGINTERN VALUE
_wrap_new_Parameter__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Parameter *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TruckBoris::Parameter *)new TruckBoris::Parameter();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Parameter_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Parameter_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TruckBoris__Parameter);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Parameter__SWIG_1(int argc, VALUE *argv, VALUE self) {
  clang::ParmVarDecl *arg1 = (clang::ParmVarDecl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TruckBoris::Parameter *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_clang__ParmVarDecl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "clang::ParmVarDecl *","Parameter", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< clang::ParmVarDecl * >(argp1);
  result = (TruckBoris::Parameter *)new TruckBoris::Parameter(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Parameter(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Parameter__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_clang__ParmVarDecl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Parameter__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Parameter.new", 
    "    Parameter.new()\n"
    "    Parameter.new(clang::ParmVarDecl *var)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TruckBoris_Parameter(TruckBoris::Parameter *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Parameter_Equals(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Parameter *arg1 = (TruckBoris::Parameter *) 0 ;
  TruckBoris::Parameter *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  TruckBoris::Parameter *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Parameter *","Equals", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Parameter * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TruckBoris__Parameter,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TruckBoris::Parameter const &","Equals", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TruckBoris::Parameter const &","Equals", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TruckBoris::Parameter * >(argp2);
  result = (TruckBoris::Parameter *) &(arg1)->Equals((TruckBoris::Parameter const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TruckBoris__Parameter, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Parameter_getName(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Parameter *arg1 = (TruckBoris::Parameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Parameter const *","getName", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Parameter * >(argp1);
  result = ((TruckBoris::Parameter const *)arg1)->getName();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Parameter_getType(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Parameter *arg1 = (TruckBoris::Parameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TruckBoris::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Parameter const *","getType", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Parameter * >(argp1);
  result = ((TruckBoris::Parameter const *)arg1)->getType();
  vresult = SWIG_NewPointerObj((new TruckBoris::Type(static_cast< const TruckBoris::Type& >(result))), SWIGTYPE_p_TruckBoris__Type, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassField;

SWIGINTERN VALUE
_wrap_new_Field__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Field *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TruckBoris::Field *)new TruckBoris::Field();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Field_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Field_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TruckBoris__Field);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Field__SWIG_1(int argc, VALUE *argv, VALUE self) {
  clang::FieldDecl *arg1 = (clang::FieldDecl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TruckBoris::Field *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_clang__FieldDecl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "clang::FieldDecl *","Field", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< clang::FieldDecl * >(argp1);
  result = (TruckBoris::Field *)new TruckBoris::Field(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Field(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Field__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_clang__FieldDecl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Field__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Field.new", 
    "    Field.new()\n"
    "    Field.new(clang::FieldDecl *var)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TruckBoris_Field(TruckBoris::Field *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Field_getName(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Field *arg1 = (TruckBoris::Field *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Field const *","getName", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Field * >(argp1);
  result = ((TruckBoris::Field const *)arg1)->getName();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Field_getType(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Field *arg1 = (TruckBoris::Field *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TruckBoris::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Field const *","getType", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Field * >(argp1);
  result = ((TruckBoris::Field const *)arg1)->getType();
  vresult = SWIG_NewPointerObj((new TruckBoris::Type(static_cast< const TruckBoris::Type& >(result))), SWIGTYPE_p_TruckBoris__Type, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassTagDeclaration;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_TagDeclaration_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_TagDeclaration_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TruckBoris__TagDeclaration);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_TagDeclaration(int argc, VALUE *argv, VALUE self) {
  clang::TagDecl *arg1 = (clang::TagDecl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TruckBoris::TagDeclaration *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_clang__TagDecl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "clang::TagDecl *","TagDeclaration", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< clang::TagDecl * >(argp1);
  result = (TruckBoris::TagDeclaration *)new TruckBoris::TagDeclaration(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_TruckBoris_TagDeclaration(TruckBoris::TagDeclaration *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_TagDeclaration_getName(int argc, VALUE *argv, VALUE self) {
  TruckBoris::TagDeclaration *arg1 = (TruckBoris::TagDeclaration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__TagDeclaration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::TagDeclaration const *","getName", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::TagDeclaration * >(argp1);
  result = ((TruckBoris::TagDeclaration const *)arg1)->getName();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TagDeclaration_hasNameForLinkage(int argc, VALUE *argv, VALUE self) {
  TruckBoris::TagDeclaration *arg1 = (TruckBoris::TagDeclaration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__TagDeclaration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::TagDeclaration const *","hasNameForLinkage", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::TagDeclaration * >(argp1);
  result = (bool)((TruckBoris::TagDeclaration const *)arg1)->hasNameForLinkage();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TagDeclaration_hasLinkage(int argc, VALUE *argv, VALUE self) {
  TruckBoris::TagDeclaration *arg1 = (TruckBoris::TagDeclaration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__TagDeclaration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::TagDeclaration const *","hasLinkage", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::TagDeclaration * >(argp1);
  result = (bool)((TruckBoris::TagDeclaration const *)arg1)->hasLinkage();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TagDeclaration_getTypedefName(int argc, VALUE *argv, VALUE self) {
  TruckBoris::TagDeclaration *arg1 = (TruckBoris::TagDeclaration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__TagDeclaration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::TagDeclaration const *","getTypedefName", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::TagDeclaration * >(argp1);
  result = ((TruckBoris::TagDeclaration const *)arg1)->getTypedefName();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TagDeclaration_getRaw(int argc, VALUE *argv, VALUE self) {
  TruckBoris::TagDeclaration *arg1 = (TruckBoris::TagDeclaration *) 0 ;
  clang::SourceManager *arg2 = 0 ;
  clang::LangOptions *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__TagDeclaration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::TagDeclaration const *","getRaw", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::TagDeclaration * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_clang__SourceManager,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "clang::SourceManager &","getRaw", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "clang::SourceManager &","getRaw", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< clang::SourceManager * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_clang__LangOptions,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "clang::LangOptions const &","getRaw", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "clang::LangOptions const &","getRaw", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< clang::LangOptions * >(argp3);
  result = ((TruckBoris::TagDeclaration const *)arg1)->getRaw(*arg2,(clang::LangOptions const &)*arg3);
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassStructure;

SWIGINTERN VALUE
_wrap_new_Structure__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Structure *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TruckBoris::Structure *)new TruckBoris::Structure();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Structure_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Structure_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TruckBoris__Structure);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Structure__SWIG_1(int argc, VALUE *argv, VALUE self) {
  clang::TagDecl *arg1 = (clang::TagDecl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TruckBoris::Structure *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_clang__TagDecl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "clang::TagDecl *","Structure", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< clang::TagDecl * >(argp1);
  result = (TruckBoris::Structure *)new TruckBoris::Structure(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Structure(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Structure__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_clang__TagDecl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Structure__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Structure.new", 
    "    Structure.new()\n"
    "    Structure.new(clang::TagDecl *var)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TruckBoris_Structure(TruckBoris::Structure *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Structure_getTagType(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Structure *arg1 = (TruckBoris::Structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Structure const *","getTagType", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Structure * >(argp1);
  result = ((TruckBoris::Structure const *)arg1)->getTagType();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Structure_getFields(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Structure *arg1 = (TruckBoris::Structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Structure const *","getFields", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Structure * >(argp1);
  result = ((TruckBoris::Structure const *)arg1)->getFields();
  vresult = swig::from(static_cast< std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > > >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassUnion;

SWIGINTERN VALUE
_wrap_new_Union__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Union *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TruckBoris::Union *)new TruckBoris::Union();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Union_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Union_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TruckBoris__Union);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Union__SWIG_1(int argc, VALUE *argv, VALUE self) {
  clang::TagDecl *arg1 = (clang::TagDecl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TruckBoris::Union *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_clang__TagDecl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "clang::TagDecl *","Union", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< clang::TagDecl * >(argp1);
  result = (TruckBoris::Union *)new TruckBoris::Union(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Union(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Union__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_clang__TagDecl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Union__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Union.new", 
    "    Union.new()\n"
    "    Union.new(clang::TagDecl *var)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TruckBoris_Union(TruckBoris::Union *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Union_Equals(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Union *arg1 = (TruckBoris::Union *) 0 ;
  TruckBoris::Union *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  TruckBoris::Union *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Union, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Union *","Equals", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Union * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TruckBoris__Union,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TruckBoris::Union const &","Equals", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TruckBoris::Union const &","Equals", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TruckBoris::Union * >(argp2);
  result = (TruckBoris::Union *) &(arg1)->Equals((TruckBoris::Union const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TruckBoris__Union, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Union_getTagType(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Union *arg1 = (TruckBoris::Union *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Union, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Union const *","getTagType", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Union * >(argp1);
  result = ((TruckBoris::Union const *)arg1)->getTagType();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Union_getFieldsNumber(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Union *arg1 = (TruckBoris::Union *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Union, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Union const *","getFieldsNumber", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Union * >(argp1);
  result = (int)((TruckBoris::Union const *)arg1)->getFieldsNumber();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Union_getFields(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Union *arg1 = (TruckBoris::Union *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Union, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Union const *","getFields", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Union * >(argp1);
  result = ((TruckBoris::Union const *)arg1)->getFields();
  vresult = swig::from(static_cast< std::vector<TruckBoris::Field,std::allocator< TruckBoris::Field > > >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Union_getField(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Union *arg1 = (TruckBoris::Union *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  clang::FieldDecl *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Union, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Union const *","getField", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Union * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","getField", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (clang::FieldDecl *)((TruckBoris::Union const *)arg1)->getField(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_clang__FieldDecl, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassEnumConstant;

SWIGINTERN VALUE
_wrap_new_EnumConstant__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TruckBoris::EnumConstant *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TruckBoris::EnumConstant *)new TruckBoris::EnumConstant();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_EnumConstant_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_EnumConstant_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TruckBoris__EnumConstant);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_EnumConstant__SWIG_1(int argc, VALUE *argv, VALUE self) {
  clang::EnumConstantDecl *arg1 = (clang::EnumConstantDecl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TruckBoris::EnumConstant *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_clang__EnumConstantDecl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "clang::EnumConstantDecl *","EnumConstant", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< clang::EnumConstantDecl * >(argp1);
  result = (TruckBoris::EnumConstant *)new TruckBoris::EnumConstant(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_EnumConstant(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_EnumConstant__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_clang__EnumConstantDecl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EnumConstant__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "EnumConstant.new", 
    "    EnumConstant.new()\n"
    "    EnumConstant.new(clang::EnumConstantDecl *constant)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TruckBoris_EnumConstant(TruckBoris::EnumConstant *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_EnumConstant_getName(int argc, VALUE *argv, VALUE self) {
  TruckBoris::EnumConstant *arg1 = (TruckBoris::EnumConstant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__EnumConstant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::EnumConstant const *","getName", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::EnumConstant * >(argp1);
  result = ((TruckBoris::EnumConstant const *)arg1)->getName();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_EnumConstant_getValue(int argc, VALUE *argv, VALUE self) {
  TruckBoris::EnumConstant *arg1 = (TruckBoris::EnumConstant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__EnumConstant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::EnumConstant const *","getValue", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::EnumConstant * >(argp1);
  result = (int)((TruckBoris::EnumConstant const *)arg1)->getValue();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassEnum;

SWIGINTERN VALUE
_wrap_new_Enum__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Enum *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TruckBoris::Enum *)new TruckBoris::Enum();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Enum_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Enum_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TruckBoris__Enum);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Enum__SWIG_1(int argc, VALUE *argv, VALUE self) {
  clang::TagDecl *arg1 = (clang::TagDecl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TruckBoris::Enum *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_clang__TagDecl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "clang::TagDecl *","Enum", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< clang::TagDecl * >(argp1);
  result = (TruckBoris::Enum *)new TruckBoris::Enum(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Enum(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Enum__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_clang__TagDecl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Enum__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Enum.new", 
    "    Enum.new()\n"
    "    Enum.new(clang::TagDecl *var)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TruckBoris_Enum(TruckBoris::Enum *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Enum_getTagType(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Enum *arg1 = (TruckBoris::Enum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Enum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Enum const *","getTagType", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Enum * >(argp1);
  result = ((TruckBoris::Enum const *)arg1)->getTagType();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Enum_getConstants(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Enum *arg1 = (TruckBoris::Enum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Enum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Enum const *","getConstants", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Enum * >(argp1);
  result = ((TruckBoris::Enum const *)arg1)->getConstants();
  vresult = swig::from(static_cast< std::vector<TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassFunction;

SWIGINTERN VALUE
_wrap_new_Function__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Function *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TruckBoris::Function *)new TruckBoris::Function();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Function_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Function_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TruckBoris__Function);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Function__SWIG_1(int argc, VALUE *argv, VALUE self) {
  clang::FunctionDecl *arg1 = (clang::FunctionDecl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TruckBoris::Function *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_clang__FunctionDecl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "clang::FunctionDecl *","Function", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< clang::FunctionDecl * >(argp1);
  result = (TruckBoris::Function *)new TruckBoris::Function(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Function(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Function__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_clang__FunctionDecl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Function__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Function.new", 
    "    Function.new()\n"
    "    Function.new(clang::FunctionDecl *fn)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TruckBoris_Function(TruckBoris::Function *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Function_getName(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Function *arg1 = (TruckBoris::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Function const *","getName", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Function * >(argp1);
  result = ((TruckBoris::Function const *)arg1)->getName();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Function_isMain(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Function *arg1 = (TruckBoris::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Function const *","isMain", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Function * >(argp1);
  result = (bool)((TruckBoris::Function const *)arg1)->isMain();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Function_getReturn(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Function *arg1 = (TruckBoris::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TruckBoris::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Function const *","getReturn", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Function * >(argp1);
  result = ((TruckBoris::Function const *)arg1)->getReturn();
  vresult = SWIG_NewPointerObj((new TruckBoris::Type(static_cast< const TruckBoris::Type& >(result))), SWIGTYPE_p_TruckBoris__Type, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Function_getParameters(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Function *arg1 = (TruckBoris::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Function const *","getParameters", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Function * >(argp1);
  result = ((TruckBoris::Function const *)arg1)->getParameters();
  vresult = swig::from(static_cast< std::vector<TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Function_getRaw(int argc, VALUE *argv, VALUE self) {
  TruckBoris::Function *arg1 = (TruckBoris::Function *) 0 ;
  clang::SourceManager *arg2 = 0 ;
  clang::LangOptions *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::Function const *","getRaw", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::Function * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_clang__SourceManager,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "clang::SourceManager &","getRaw", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "clang::SourceManager &","getRaw", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< clang::SourceManager * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_clang__LangOptions,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "clang::LangOptions const &","getRaw", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "clang::LangOptions const &","getRaw", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< clang::LangOptions * >(argp3);
  result = ((TruckBoris::Function const *)arg1)->getRaw(*arg2,(clang::LangOptions const &)*arg3);
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassHeaderParser;

SWIGINTERN VALUE
_wrap_new_HeaderParser__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TruckBoris::HeaderParser *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TruckBoris::HeaderParser *)new TruckBoris::HeaderParser();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_HeaderParser_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_HeaderParser_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TruckBoris__HeaderParser);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_HeaderParser__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::string *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  TruckBoris::HeaderParser *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::string const &","HeaderParser", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","HeaderParser", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< std::string,std::allocator< std::string > > const &","HeaderParser", 2, argv[1] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::string,std::allocator< std::string > > const &","HeaderParser", 2, argv[1])); 
    }
    arg2 = ptr;
  }
  result = (TruckBoris::HeaderParser *)new TruckBoris::HeaderParser((std::string const &)*arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_HeaderParser(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_HeaderParser__SWIG_0(nargs, args, self);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_HeaderParser__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "HeaderParser.new", 
    "    HeaderParser.new()\n"
    "    HeaderParser.new(std::string const &sourceFile, std::vector< std::string,std::allocator< std::string > > const &headersPaths)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TruckBoris_HeaderParser(TruckBoris::HeaderParser *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_HeaderParser_addSourceFile(int argc, VALUE *argv, VALUE self) {
  TruckBoris::HeaderParser *arg1 = (TruckBoris::HeaderParser *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__HeaderParser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::HeaderParser *","addSourceFile", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::HeaderParser * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","addSourceFile", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","addSourceFile", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->addSourceFile((std::string const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HeaderParser_addSearchPath(int argc, VALUE *argv, VALUE self) {
  TruckBoris::HeaderParser *arg1 = (TruckBoris::HeaderParser *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__HeaderParser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::HeaderParser *","addSearchPath", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::HeaderParser * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","addSearchPath", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","addSearchPath", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  (arg1)->addSearchPath((std::string const &)*arg2);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HeaderParser_addSearchPaths(int argc, VALUE *argv, VALUE self) {
  TruckBoris::HeaderParser *arg1 = (TruckBoris::HeaderParser *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__HeaderParser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::HeaderParser *","addSearchPaths", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::HeaderParser * >(argp1);
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< std::string,std::allocator< std::string > > const &","addSearchPaths", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::string,std::allocator< std::string > > const &","addSearchPaths", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  (arg1)->addSearchPaths((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HeaderParser_parse__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TruckBoris::HeaderParser *arg1 = (TruckBoris::HeaderParser *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__HeaderParser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::HeaderParser *","parse", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::HeaderParser * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","parse", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->parse(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HeaderParser_parse__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TruckBoris::HeaderParser *arg1 = (TruckBoris::HeaderParser *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__HeaderParser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::HeaderParser *","parse", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::HeaderParser * >(argp1);
  result = (bool)(arg1)->parse();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_HeaderParser_parse(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TruckBoris__HeaderParser, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_HeaderParser_parse__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TruckBoris__HeaderParser, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_HeaderParser_parse__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "HeaderParser.parse", 
    "    bool HeaderParser.parse(bool mainFile)\n"
    "    bool HeaderParser.parse()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HeaderParser_getLangOpts(int argc, VALUE *argv, VALUE self) {
  TruckBoris::HeaderParser *arg1 = (TruckBoris::HeaderParser *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  clang::LangOptions *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__HeaderParser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::HeaderParser *","getLangOpts", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::HeaderParser * >(argp1);
  result = (clang::LangOptions *) &(arg1)->getLangOpts();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_clang__LangOptions, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HeaderParser_getSourceManager(int argc, VALUE *argv, VALUE self) {
  TruckBoris::HeaderParser *arg1 = (TruckBoris::HeaderParser *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  clang::SourceManager *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__HeaderParser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::HeaderParser const *","getSourceManager", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::HeaderParser * >(argp1);
  result = (clang::SourceManager *) &((TruckBoris::HeaderParser const *)arg1)->getSourceManager();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_clang__SourceManager, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HeaderParser_getFunctions(int argc, VALUE *argv, VALUE self) {
  TruckBoris::HeaderParser *arg1 = (TruckBoris::HeaderParser *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__HeaderParser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::HeaderParser const *","getFunctions", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::HeaderParser * >(argp1);
  result = ((TruckBoris::HeaderParser const *)arg1)->getFunctions();
  vresult = swig::from(static_cast< std::vector<TruckBoris::Function,std::allocator< TruckBoris::Function > > >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HeaderParser_getStructures(int argc, VALUE *argv, VALUE self) {
  TruckBoris::HeaderParser *arg1 = (TruckBoris::HeaderParser *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__HeaderParser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::HeaderParser const *","getStructures", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::HeaderParser * >(argp1);
  result = ((TruckBoris::HeaderParser const *)arg1)->getStructures();
  vresult = swig::from(static_cast< std::vector<TruckBoris::Structure,std::allocator< TruckBoris::Structure > > >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HeaderParser_getUnions(int argc, VALUE *argv, VALUE self) {
  TruckBoris::HeaderParser *arg1 = (TruckBoris::HeaderParser *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< TruckBoris::Union,std::allocator< TruckBoris::Union > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__HeaderParser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::HeaderParser const *","getUnions", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::HeaderParser * >(argp1);
  result = ((TruckBoris::HeaderParser const *)arg1)->getUnions();
  vresult = SWIG_NewPointerObj((new std::vector< TruckBoris::Union,std::allocator< TruckBoris::Union > >(static_cast< const std::vector< TruckBoris::Union,std::allocator< TruckBoris::Union > >& >(result))), SWIGTYPE_p_std__vectorT_TruckBoris__Union_std__allocatorT_TruckBoris__Union_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HeaderParser_getEnums(int argc, VALUE *argv, VALUE self) {
  TruckBoris::HeaderParser *arg1 = (TruckBoris::HeaderParser *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__HeaderParser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::HeaderParser const *","getEnums", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::HeaderParser * >(argp1);
  result = ((TruckBoris::HeaderParser const *)arg1)->getEnums();
  vresult = swig::from(static_cast< std::vector<TruckBoris::Enum,std::allocator< TruckBoris::Enum > > >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HeaderParser_getTypedefs(int argc, VALUE *argv, VALUE self) {
  TruckBoris::HeaderParser *arg1 = (TruckBoris::HeaderParser *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__HeaderParser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::HeaderParser const *","getTypedefs", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::HeaderParser * >(argp1);
  result = ((TruckBoris::HeaderParser const *)arg1)->getTypedefs();
  vresult = swig::from(static_cast< std::vector<TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HeaderParser_getSourceFile(int argc, VALUE *argv, VALUE self) {
  TruckBoris::HeaderParser *arg1 = (TruckBoris::HeaderParser *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__HeaderParser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::HeaderParser const *","getSourceFile", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::HeaderParser * >(argp1);
  result = ((TruckBoris::HeaderParser const *)arg1)->getSourceFile();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HeaderParser_getHeadersPaths(int argc, VALUE *argv, VALUE self) {
  TruckBoris::HeaderParser *arg1 = (TruckBoris::HeaderParser *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__HeaderParser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::HeaderParser const *","getHeadersPaths", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::HeaderParser * >(argp1);
  result = ((TruckBoris::HeaderParser const *)arg1)->getHeadersPaths();
  vresult = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HeaderParser_isInitialized(int argc, VALUE *argv, VALUE self) {
  TruckBoris::HeaderParser *arg1 = (TruckBoris::HeaderParser *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TruckBoris__HeaderParser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TruckBoris::HeaderParser const *","isInitialized", 1, self )); 
  }
  arg1 = reinterpret_cast< TruckBoris::HeaderParser * >(argp1);
  result = (bool)((TruckBoris::HeaderParser const *)arg1)->isInitialized();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_TruckBoris__UnionTo_p_TruckBoris__TagDeclaration(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TruckBoris::TagDeclaration *)  ((TruckBoris::Union *) x));
}
static void *_p_TruckBoris__StructureTo_p_TruckBoris__TagDeclaration(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TruckBoris::TagDeclaration *)  ((TruckBoris::Structure *) x));
}
static void *_p_TruckBoris__EnumTo_p_TruckBoris__TagDeclaration(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TruckBoris::TagDeclaration *)  ((TruckBoris::Enum *) x));
}
static void *_p_swig__IteratorTo_p_swig__ConstIterator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((swig::ConstIterator *)  ((swig::Iterator *) x));
}
static swig_type_info _swigt__p_TruckBoris__Enum = {"_p_TruckBoris__Enum", "std::vector< TruckBoris::Enum >::value_type *|TruckBoris::Enum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TruckBoris__EnumConstant = {"_p_TruckBoris__EnumConstant", "TruckBoris::EnumConstant *|std::vector< TruckBoris::EnumConstant >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TruckBoris__Field = {"_p_TruckBoris__Field", "std::vector< TruckBoris::Field >::value_type *|TruckBoris::Field *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TruckBoris__Function = {"_p_TruckBoris__Function", "std::vector< TruckBoris::Function >::value_type *|TruckBoris::Function *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TruckBoris__HeaderParser = {"_p_TruckBoris__HeaderParser", "TruckBoris::HeaderParser *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TruckBoris__Parameter = {"_p_TruckBoris__Parameter", "TruckBoris::Parameter *|std::vector< TruckBoris::Parameter >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TruckBoris__Structure = {"_p_TruckBoris__Structure", "TruckBoris::Structure *|std::vector< TruckBoris::Structure >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TruckBoris__TagDeclaration = {"_p_TruckBoris__TagDeclaration", "TruckBoris::TagDeclaration *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TruckBoris__Type = {"_p_TruckBoris__Type", "TruckBoris::Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TruckBoris__Typedef = {"_p_TruckBoris__Typedef", "std::vector< TruckBoris::Typedef >::value_type *|TruckBoris::Typedef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TruckBoris__Union = {"_p_TruckBoris__Union", "TruckBoris::Union *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_clang__EnumConstantDecl = {"_p_clang__EnumConstantDecl", "clang::EnumConstantDecl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_clang__FieldDecl = {"_p_clang__FieldDecl", "clang::FieldDecl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_clang__FunctionDecl = {"_p_clang__FunctionDecl", "clang::FunctionDecl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_clang__LangOptions = {"_p_clang__LangOptions", "clang::LangOptions *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_clang__ParmVarDecl = {"_p_clang__ParmVarDecl", "clang::ParmVarDecl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_clang__QualType = {"_p_clang__QualType", "clang::QualType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_clang__SourceManager = {"_p_clang__SourceManager", "clang::SourceManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_clang__TagDecl = {"_p_clang__TagDecl", "clang::TagDecl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_clang__Type = {"_p_clang__Type", "clang::Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_clang__TypedefDecl = {"_p_clang__TypedefDecl", "clang::TypedefDecl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **|VALUE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_TruckBoris__EnumConstant_t = {"_p_std__allocatorT_TruckBoris__EnumConstant_t", "std::vector< TruckBoris::EnumConstant >::allocator_type *|std::allocator< TruckBoris::EnumConstant > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_TruckBoris__Enum_t = {"_p_std__allocatorT_TruckBoris__Enum_t", "std::allocator< TruckBoris::Enum > *|std::vector< TruckBoris::Enum >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_TruckBoris__Field_t = {"_p_std__allocatorT_TruckBoris__Field_t", "std::vector< TruckBoris::Field >::allocator_type *|std::allocator< TruckBoris::Field > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_TruckBoris__Function_t = {"_p_std__allocatorT_TruckBoris__Function_t", "std::vector< TruckBoris::Function >::allocator_type *|std::allocator< TruckBoris::Function > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_TruckBoris__Parameter_t = {"_p_std__allocatorT_TruckBoris__Parameter_t", "std::vector< TruckBoris::Parameter >::allocator_type *|std::allocator< TruckBoris::Parameter > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_TruckBoris__Structure_t = {"_p_std__allocatorT_TruckBoris__Structure_t", "std::vector< TruckBoris::Structure >::allocator_type *|std::allocator< TruckBoris::Structure > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_TruckBoris__Typedef_t = {"_p_std__allocatorT_TruckBoris__Typedef_t", "std::vector< TruckBoris::Typedef >::allocator_type *|std::allocator< TruckBoris::Typedef > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__string_t = {"_p_std__allocatorT_std__string_t", "std::vector< std::string >::allocator_type *|std::allocator< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t = {"_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t", "std::vector< TruckBoris::EnumConstant,std::allocator< TruckBoris::EnumConstant > > *|std::vector< TruckBoris::EnumConstant > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t = {"_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t", "std::vector< TruckBoris::Enum > *|std::vector< TruckBoris::Enum,std::allocator< TruckBoris::Enum > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t = {"_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t", "std::vector< TruckBoris::Field > *|std::vector< TruckBoris::Field,std::allocator< TruckBoris::Field > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t = {"_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t", "std::vector< TruckBoris::Function > *|std::vector< TruckBoris::Function,std::allocator< TruckBoris::Function > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t = {"_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t", "std::vector< TruckBoris::Parameter > *|std::vector< TruckBoris::Parameter,std::allocator< TruckBoris::Parameter > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t = {"_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t", "std::vector< TruckBoris::Structure,std::allocator< TruckBoris::Structure > > *|std::vector< TruckBoris::Structure > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t = {"_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t", "std::vector< TruckBoris::Typedef > *|std::vector< TruckBoris::Typedef,std::allocator< TruckBoris::Typedef > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_TruckBoris__Union_std__allocatorT_TruckBoris__Union_t_t = {"_p_std__vectorT_TruckBoris__Union_std__allocatorT_TruckBoris__Union_t_t", "std::vector< TruckBoris::Union,std::allocator< TruckBoris::Union > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *|std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__ConstIterator = {"_p_swig__ConstIterator", "swig::ConstIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__GC_VALUE = {"_p_swig__GC_VALUE", "swig::GC_VALUE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__Iterator = {"_p_swig__Iterator", "swig::Iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "VALUE|void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_TruckBoris__Enum,
  &_swigt__p_TruckBoris__EnumConstant,
  &_swigt__p_TruckBoris__Field,
  &_swigt__p_TruckBoris__Function,
  &_swigt__p_TruckBoris__HeaderParser,
  &_swigt__p_TruckBoris__Parameter,
  &_swigt__p_TruckBoris__Structure,
  &_swigt__p_TruckBoris__TagDeclaration,
  &_swigt__p_TruckBoris__Type,
  &_swigt__p_TruckBoris__Typedef,
  &_swigt__p_TruckBoris__Union,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_clang__EnumConstantDecl,
  &_swigt__p_clang__FieldDecl,
  &_swigt__p_clang__FunctionDecl,
  &_swigt__p_clang__LangOptions,
  &_swigt__p_clang__ParmVarDecl,
  &_swigt__p_clang__QualType,
  &_swigt__p_clang__SourceManager,
  &_swigt__p_clang__TagDecl,
  &_swigt__p_clang__Type,
  &_swigt__p_clang__TypedefDecl,
  &_swigt__p_difference_type,
  &_swigt__p_p_void,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_TruckBoris__EnumConstant_t,
  &_swigt__p_std__allocatorT_TruckBoris__Enum_t,
  &_swigt__p_std__allocatorT_TruckBoris__Field_t,
  &_swigt__p_std__allocatorT_TruckBoris__Function_t,
  &_swigt__p_std__allocatorT_TruckBoris__Parameter_t,
  &_swigt__p_std__allocatorT_TruckBoris__Structure_t,
  &_swigt__p_std__allocatorT_TruckBoris__Typedef_t,
  &_swigt__p_std__allocatorT_std__string_t,
  &_swigt__p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t,
  &_swigt__p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t,
  &_swigt__p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t,
  &_swigt__p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t,
  &_swigt__p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t,
  &_swigt__p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t,
  &_swigt__p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t,
  &_swigt__p_std__vectorT_TruckBoris__Union_std__allocatorT_TruckBoris__Union_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_swig__ConstIterator,
  &_swigt__p_swig__GC_VALUE,
  &_swigt__p_swig__Iterator,
  &_swigt__p_value_type,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_TruckBoris__Enum[] = {  {&_swigt__p_TruckBoris__Enum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TruckBoris__EnumConstant[] = {  {&_swigt__p_TruckBoris__EnumConstant, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TruckBoris__Field[] = {  {&_swigt__p_TruckBoris__Field, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TruckBoris__Function[] = {  {&_swigt__p_TruckBoris__Function, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TruckBoris__HeaderParser[] = {  {&_swigt__p_TruckBoris__HeaderParser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TruckBoris__Parameter[] = {  {&_swigt__p_TruckBoris__Parameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TruckBoris__Structure[] = {  {&_swigt__p_TruckBoris__Structure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TruckBoris__TagDeclaration[] = {  {&_swigt__p_TruckBoris__Union, _p_TruckBoris__UnionTo_p_TruckBoris__TagDeclaration, 0, 0},  {&_swigt__p_TruckBoris__TagDeclaration, 0, 0, 0},  {&_swigt__p_TruckBoris__Structure, _p_TruckBoris__StructureTo_p_TruckBoris__TagDeclaration, 0, 0},  {&_swigt__p_TruckBoris__Enum, _p_TruckBoris__EnumTo_p_TruckBoris__TagDeclaration, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TruckBoris__Type[] = {  {&_swigt__p_TruckBoris__Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TruckBoris__Typedef[] = {  {&_swigt__p_TruckBoris__Typedef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TruckBoris__Union[] = {  {&_swigt__p_TruckBoris__Union, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_clang__EnumConstantDecl[] = {  {&_swigt__p_clang__EnumConstantDecl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_clang__FieldDecl[] = {  {&_swigt__p_clang__FieldDecl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_clang__FunctionDecl[] = {  {&_swigt__p_clang__FunctionDecl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_clang__LangOptions[] = {  {&_swigt__p_clang__LangOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_clang__ParmVarDecl[] = {  {&_swigt__p_clang__ParmVarDecl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_clang__QualType[] = {  {&_swigt__p_clang__QualType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_clang__SourceManager[] = {  {&_swigt__p_clang__SourceManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_clang__TagDecl[] = {  {&_swigt__p_clang__TagDecl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_clang__Type[] = {  {&_swigt__p_clang__Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_clang__TypedefDecl[] = {  {&_swigt__p_clang__TypedefDecl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_TruckBoris__EnumConstant_t[] = {  {&_swigt__p_std__allocatorT_TruckBoris__EnumConstant_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_TruckBoris__Enum_t[] = {  {&_swigt__p_std__allocatorT_TruckBoris__Enum_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_TruckBoris__Field_t[] = {  {&_swigt__p_std__allocatorT_TruckBoris__Field_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_TruckBoris__Function_t[] = {  {&_swigt__p_std__allocatorT_TruckBoris__Function_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_TruckBoris__Parameter_t[] = {  {&_swigt__p_std__allocatorT_TruckBoris__Parameter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_TruckBoris__Structure_t[] = {  {&_swigt__p_std__allocatorT_TruckBoris__Structure_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_TruckBoris__Typedef_t[] = {  {&_swigt__p_std__allocatorT_TruckBoris__Typedef_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__string_t[] = {  {&_swigt__p_std__allocatorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t[] = {  {&_swigt__p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t[] = {  {&_swigt__p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t[] = {  {&_swigt__p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t[] = {  {&_swigt__p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t[] = {  {&_swigt__p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t[] = {  {&_swigt__p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t[] = {  {&_swigt__p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_TruckBoris__Union_std__allocatorT_TruckBoris__Union_t_t[] = {  {&_swigt__p_std__vectorT_TruckBoris__Union_std__allocatorT_TruckBoris__Union_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__ConstIterator[] = {  {&_swigt__p_swig__ConstIterator, 0, 0, 0},  {&_swigt__p_swig__Iterator, _p_swig__IteratorTo_p_swig__ConstIterator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__GC_VALUE[] = {  {&_swigt__p_swig__GC_VALUE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__Iterator[] = {  {&_swigt__p_swig__Iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_TruckBoris__Enum,
  _swigc__p_TruckBoris__EnumConstant,
  _swigc__p_TruckBoris__Field,
  _swigc__p_TruckBoris__Function,
  _swigc__p_TruckBoris__HeaderParser,
  _swigc__p_TruckBoris__Parameter,
  _swigc__p_TruckBoris__Structure,
  _swigc__p_TruckBoris__TagDeclaration,
  _swigc__p_TruckBoris__Type,
  _swigc__p_TruckBoris__Typedef,
  _swigc__p_TruckBoris__Union,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_clang__EnumConstantDecl,
  _swigc__p_clang__FieldDecl,
  _swigc__p_clang__FunctionDecl,
  _swigc__p_clang__LangOptions,
  _swigc__p_clang__ParmVarDecl,
  _swigc__p_clang__QualType,
  _swigc__p_clang__SourceManager,
  _swigc__p_clang__TagDecl,
  _swigc__p_clang__Type,
  _swigc__p_clang__TypedefDecl,
  _swigc__p_difference_type,
  _swigc__p_p_void,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_TruckBoris__EnumConstant_t,
  _swigc__p_std__allocatorT_TruckBoris__Enum_t,
  _swigc__p_std__allocatorT_TruckBoris__Field_t,
  _swigc__p_std__allocatorT_TruckBoris__Function_t,
  _swigc__p_std__allocatorT_TruckBoris__Parameter_t,
  _swigc__p_std__allocatorT_TruckBoris__Structure_t,
  _swigc__p_std__allocatorT_TruckBoris__Typedef_t,
  _swigc__p_std__allocatorT_std__string_t,
  _swigc__p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t,
  _swigc__p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t,
  _swigc__p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t,
  _swigc__p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t,
  _swigc__p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t,
  _swigc__p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t,
  _swigc__p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t,
  _swigc__p_std__vectorT_TruckBoris__Union_std__allocatorT_TruckBoris__Union_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_swig__ConstIterator,
  _swigc__p_swig__GC_VALUE,
  _swigc__p_swig__Iterator,
  _swigc__p_value_type,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_rtruckboris(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mRtruckboris = rb_define_module("Rtruckboris");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  
  SwigClassGC_VALUE.klass = rb_define_class_under(mRtruckboris, "GC_VALUE", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_swig__GC_VALUE, (void *) &SwigClassGC_VALUE);
  rb_undef_alloc_func(SwigClassGC_VALUE.klass);
  rb_define_method(SwigClassGC_VALUE.klass, "inspect", VALUEFUNC(_wrap_GC_VALUE_inspect), -1);
  rb_define_method(SwigClassGC_VALUE.klass, "to_s", VALUEFUNC(_wrap_GC_VALUE_to_s), -1);
  SwigClassGC_VALUE.mark = 0;
  SwigClassGC_VALUE.trackObjects = 0;
  
  swig::SwigGCReferences::initialize();
  
  
  SwigClassConstIterator.klass = rb_define_class_under(mRtruckboris, "ConstIterator", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_swig__ConstIterator, (void *) &SwigClassConstIterator);
  rb_undef_alloc_func(SwigClassConstIterator.klass);
  rb_define_method(SwigClassConstIterator.klass, "value", VALUEFUNC(_wrap_ConstIterator_value), -1);
  rb_define_method(SwigClassConstIterator.klass, "dup", VALUEFUNC(_wrap_ConstIterator_dup), -1);
  rb_define_method(SwigClassConstIterator.klass, "inspect", VALUEFUNC(_wrap_ConstIterator_inspect), -1);
  rb_define_method(SwigClassConstIterator.klass, "to_s", VALUEFUNC(_wrap_ConstIterator_to_s), -1);
  rb_define_method(SwigClassConstIterator.klass, "next", VALUEFUNC(_wrap_ConstIterator_next), -1);
  rb_define_method(SwigClassConstIterator.klass, "previous", VALUEFUNC(_wrap_ConstIterator_previous), -1);
  rb_define_method(SwigClassConstIterator.klass, "==", VALUEFUNC(_wrap_ConstIterator___eq__), -1);
  rb_define_method(SwigClassConstIterator.klass, "+", VALUEFUNC(_wrap_ConstIterator___add__), -1);
  rb_define_method(SwigClassConstIterator.klass, "-", VALUEFUNC(_wrap_ConstIterator___sub__), -1);
  SwigClassConstIterator.mark = 0;
  SwigClassConstIterator.destroy = (void (*)(void *)) free_swig_ConstIterator;
  SwigClassConstIterator.trackObjects = 0;
  
  SwigClassIterator.klass = rb_define_class_under(mRtruckboris, "Iterator", ((swig_class *) SWIGTYPE_p_swig__ConstIterator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_swig__Iterator, (void *) &SwigClassIterator);
  rb_undef_alloc_func(SwigClassIterator.klass);
  rb_define_method(SwigClassIterator.klass, "value=", VALUEFUNC(_wrap_Iterator_valuee___), -1);
  rb_define_method(SwigClassIterator.klass, "dup", VALUEFUNC(_wrap_Iterator_dup), -1);
  rb_define_method(SwigClassIterator.klass, "next", VALUEFUNC(_wrap_Iterator_next), -1);
  rb_define_method(SwigClassIterator.klass, "previous", VALUEFUNC(_wrap_Iterator_previous), -1);
  rb_define_method(SwigClassIterator.klass, "inspect", VALUEFUNC(_wrap_Iterator_inspect), -1);
  rb_define_method(SwigClassIterator.klass, "to_s", VALUEFUNC(_wrap_Iterator_to_s), -1);
  rb_define_method(SwigClassIterator.klass, "==", VALUEFUNC(_wrap_Iterator___eq__), -1);
  rb_define_method(SwigClassIterator.klass, "+", VALUEFUNC(_wrap_Iterator___add__), -1);
  rb_define_method(SwigClassIterator.klass, "-", VALUEFUNC(_wrap_Iterator___sub__), -1);
  SwigClassIterator.mark = 0;
  SwigClassIterator.destroy = (void (*)(void *)) free_swig_Iterator;
  SwigClassIterator.trackObjects = 0;
  
  SwigClassVectorEnum.klass = rb_define_class_under(mRtruckboris, "VectorEnum", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_TruckBoris__Enum_std__allocatorT_TruckBoris__Enum_t_t, (void *) &SwigClassVectorEnum);
  rb_include_module(SwigClassVectorEnum.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassVectorEnum.klass, _wrap_VectorEnum_allocate);
  rb_define_method(SwigClassVectorEnum.klass, "initialize", VALUEFUNC(_wrap_new_VectorEnum), -1);
  rb_define_method(SwigClassVectorEnum.klass, "dup", VALUEFUNC(_wrap_VectorEnum_dup), -1);
  rb_define_method(SwigClassVectorEnum.klass, "inspect", VALUEFUNC(_wrap_VectorEnum_inspect), -1);
  rb_define_method(SwigClassVectorEnum.klass, "to_a", VALUEFUNC(_wrap_VectorEnum_to_a), -1);
  rb_define_method(SwigClassVectorEnum.klass, "to_s", VALUEFUNC(_wrap_VectorEnum_to_s), -1);
  rb_define_method(SwigClassVectorEnum.klass, "slice", VALUEFUNC(_wrap_VectorEnum_slice), -1);
  rb_define_method(SwigClassVectorEnum.klass, "each", VALUEFUNC(_wrap_VectorEnum_each), -1);
  rb_define_method(SwigClassVectorEnum.klass, "select", VALUEFUNC(_wrap_VectorEnum_select), -1);
  rb_define_method(SwigClassVectorEnum.klass, "delete_at", VALUEFUNC(_wrap_VectorEnum_delete_at), -1);
  rb_define_method(SwigClassVectorEnum.klass, "__delete2__", VALUEFUNC(_wrap_VectorEnum___delete2__), -1);
  rb_define_method(SwigClassVectorEnum.klass, "reject!", VALUEFUNC(_wrap_VectorEnum_rejectN___), -1);
  rb_define_alias(SwigClassVectorEnum.klass, "delete_if", "reject!");
  rb_define_method(SwigClassVectorEnum.klass, "pop", VALUEFUNC(_wrap_VectorEnum_pop), -1);
  rb_define_method(SwigClassVectorEnum.klass, "push", VALUEFUNC(_wrap_VectorEnum_push), -1);
  rb_define_alias(SwigClassVectorEnum.klass, "<<", "push");
  rb_define_method(SwigClassVectorEnum.klass, "reject", VALUEFUNC(_wrap_VectorEnum_reject), -1);
  rb_define_method(SwigClassVectorEnum.klass, "at", VALUEFUNC(_wrap_VectorEnum_at), -1);
  rb_define_method(SwigClassVectorEnum.klass, "[]", VALUEFUNC(_wrap_VectorEnum___getitem__), -1);
  rb_define_method(SwigClassVectorEnum.klass, "[]=", VALUEFUNC(_wrap_VectorEnum___setitem__), -1);
  rb_define_method(SwigClassVectorEnum.klass, "shift", VALUEFUNC(_wrap_VectorEnum_shift), -1);
  rb_define_method(SwigClassVectorEnum.klass, "unshift", VALUEFUNC(_wrap_VectorEnum_unshift), -1);
  rb_define_method(SwigClassVectorEnum.klass, "empty?", VALUEFUNC(_wrap_VectorEnum_emptyq___), -1);
  rb_define_method(SwigClassVectorEnum.klass, "size", VALUEFUNC(_wrap_VectorEnum_size), -1);
  rb_define_method(SwigClassVectorEnum.klass, "clear", VALUEFUNC(_wrap_VectorEnum_clear), -1);
  rb_define_method(SwigClassVectorEnum.klass, "swap", VALUEFUNC(_wrap_VectorEnum_swap), -1);
  rb_define_method(SwigClassVectorEnum.klass, "get_allocator", VALUEFUNC(_wrap_VectorEnum_get_allocator), -1);
  rb_define_method(SwigClassVectorEnum.klass, "begin", VALUEFUNC(_wrap_VectorEnum_begin), -1);
  rb_define_method(SwigClassVectorEnum.klass, "end", VALUEFUNC(_wrap_VectorEnum_end), -1);
  rb_define_method(SwigClassVectorEnum.klass, "rbegin", VALUEFUNC(_wrap_VectorEnum_rbegin), -1);
  rb_define_method(SwigClassVectorEnum.klass, "rend", VALUEFUNC(_wrap_VectorEnum_rend), -1);
  rb_define_method(SwigClassVectorEnum.klass, "erase", VALUEFUNC(_wrap_VectorEnum_erase), -1);
  rb_define_method(SwigClassVectorEnum.klass, "front", VALUEFUNC(_wrap_VectorEnum_front), -1);
  rb_define_method(SwigClassVectorEnum.klass, "back", VALUEFUNC(_wrap_VectorEnum_back), -1);
  rb_define_method(SwigClassVectorEnum.klass, "assign", VALUEFUNC(_wrap_VectorEnum_assign), -1);
  rb_define_method(SwigClassVectorEnum.klass, "resize", VALUEFUNC(_wrap_VectorEnum_resize), -1);
  rb_define_method(SwigClassVectorEnum.klass, "insert", VALUEFUNC(_wrap_VectorEnum_insert), -1);
  rb_define_method(SwigClassVectorEnum.klass, "reserve", VALUEFUNC(_wrap_VectorEnum_reserve), -1);
  rb_define_method(SwigClassVectorEnum.klass, "capacity", VALUEFUNC(_wrap_VectorEnum_capacity), -1);
  SwigClassVectorEnum.mark = 0;
  SwigClassVectorEnum.destroy = (void (*)(void *)) free_std_vector_Sl_TruckBoris_Enum_Sg_;
  SwigClassVectorEnum.trackObjects = 0;
  
  SwigClassVectorEnumConstant.klass = rb_define_class_under(mRtruckboris, "VectorEnumConstant", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_TruckBoris__EnumConstant_std__allocatorT_TruckBoris__EnumConstant_t_t, (void *) &SwigClassVectorEnumConstant);
  rb_include_module(SwigClassVectorEnumConstant.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassVectorEnumConstant.klass, _wrap_VectorEnumConstant_allocate);
  rb_define_method(SwigClassVectorEnumConstant.klass, "initialize", VALUEFUNC(_wrap_new_VectorEnumConstant), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "dup", VALUEFUNC(_wrap_VectorEnumConstant_dup), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "inspect", VALUEFUNC(_wrap_VectorEnumConstant_inspect), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "to_a", VALUEFUNC(_wrap_VectorEnumConstant_to_a), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "to_s", VALUEFUNC(_wrap_VectorEnumConstant_to_s), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "slice", VALUEFUNC(_wrap_VectorEnumConstant_slice), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "each", VALUEFUNC(_wrap_VectorEnumConstant_each), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "select", VALUEFUNC(_wrap_VectorEnumConstant_select), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "delete_at", VALUEFUNC(_wrap_VectorEnumConstant_delete_at), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "__delete2__", VALUEFUNC(_wrap_VectorEnumConstant___delete2__), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "reject!", VALUEFUNC(_wrap_VectorEnumConstant_rejectN___), -1);
  rb_define_alias(SwigClassVectorEnumConstant.klass, "delete_if", "reject!");
  rb_define_method(SwigClassVectorEnumConstant.klass, "pop", VALUEFUNC(_wrap_VectorEnumConstant_pop), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "push", VALUEFUNC(_wrap_VectorEnumConstant_push), -1);
  rb_define_alias(SwigClassVectorEnumConstant.klass, "<<", "push");
  rb_define_method(SwigClassVectorEnumConstant.klass, "reject", VALUEFUNC(_wrap_VectorEnumConstant_reject), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "at", VALUEFUNC(_wrap_VectorEnumConstant_at), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "[]", VALUEFUNC(_wrap_VectorEnumConstant___getitem__), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "[]=", VALUEFUNC(_wrap_VectorEnumConstant___setitem__), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "shift", VALUEFUNC(_wrap_VectorEnumConstant_shift), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "unshift", VALUEFUNC(_wrap_VectorEnumConstant_unshift), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "empty?", VALUEFUNC(_wrap_VectorEnumConstant_emptyq___), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "size", VALUEFUNC(_wrap_VectorEnumConstant_size), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "clear", VALUEFUNC(_wrap_VectorEnumConstant_clear), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "swap", VALUEFUNC(_wrap_VectorEnumConstant_swap), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "get_allocator", VALUEFUNC(_wrap_VectorEnumConstant_get_allocator), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "begin", VALUEFUNC(_wrap_VectorEnumConstant_begin), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "end", VALUEFUNC(_wrap_VectorEnumConstant_end), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "rbegin", VALUEFUNC(_wrap_VectorEnumConstant_rbegin), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "rend", VALUEFUNC(_wrap_VectorEnumConstant_rend), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "erase", VALUEFUNC(_wrap_VectorEnumConstant_erase), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "front", VALUEFUNC(_wrap_VectorEnumConstant_front), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "back", VALUEFUNC(_wrap_VectorEnumConstant_back), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "assign", VALUEFUNC(_wrap_VectorEnumConstant_assign), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "resize", VALUEFUNC(_wrap_VectorEnumConstant_resize), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "insert", VALUEFUNC(_wrap_VectorEnumConstant_insert), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "reserve", VALUEFUNC(_wrap_VectorEnumConstant_reserve), -1);
  rb_define_method(SwigClassVectorEnumConstant.klass, "capacity", VALUEFUNC(_wrap_VectorEnumConstant_capacity), -1);
  SwigClassVectorEnumConstant.mark = 0;
  SwigClassVectorEnumConstant.destroy = (void (*)(void *)) free_std_vector_Sl_TruckBoris_EnumConstant_Sg_;
  SwigClassVectorEnumConstant.trackObjects = 0;
  
  SwigClassVectorFunction.klass = rb_define_class_under(mRtruckboris, "VectorFunction", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_TruckBoris__Function_std__allocatorT_TruckBoris__Function_t_t, (void *) &SwigClassVectorFunction);
  rb_include_module(SwigClassVectorFunction.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassVectorFunction.klass, _wrap_VectorFunction_allocate);
  rb_define_method(SwigClassVectorFunction.klass, "initialize", VALUEFUNC(_wrap_new_VectorFunction), -1);
  rb_define_method(SwigClassVectorFunction.klass, "dup", VALUEFUNC(_wrap_VectorFunction_dup), -1);
  rb_define_method(SwigClassVectorFunction.klass, "inspect", VALUEFUNC(_wrap_VectorFunction_inspect), -1);
  rb_define_method(SwigClassVectorFunction.klass, "to_a", VALUEFUNC(_wrap_VectorFunction_to_a), -1);
  rb_define_method(SwigClassVectorFunction.klass, "to_s", VALUEFUNC(_wrap_VectorFunction_to_s), -1);
  rb_define_method(SwigClassVectorFunction.klass, "slice", VALUEFUNC(_wrap_VectorFunction_slice), -1);
  rb_define_method(SwigClassVectorFunction.klass, "each", VALUEFUNC(_wrap_VectorFunction_each), -1);
  rb_define_method(SwigClassVectorFunction.klass, "select", VALUEFUNC(_wrap_VectorFunction_select), -1);
  rb_define_method(SwigClassVectorFunction.klass, "delete_at", VALUEFUNC(_wrap_VectorFunction_delete_at), -1);
  rb_define_method(SwigClassVectorFunction.klass, "__delete2__", VALUEFUNC(_wrap_VectorFunction___delete2__), -1);
  rb_define_method(SwigClassVectorFunction.klass, "reject!", VALUEFUNC(_wrap_VectorFunction_rejectN___), -1);
  rb_define_alias(SwigClassVectorFunction.klass, "delete_if", "reject!");
  rb_define_method(SwigClassVectorFunction.klass, "pop", VALUEFUNC(_wrap_VectorFunction_pop), -1);
  rb_define_method(SwigClassVectorFunction.klass, "push", VALUEFUNC(_wrap_VectorFunction_push), -1);
  rb_define_alias(SwigClassVectorFunction.klass, "<<", "push");
  rb_define_method(SwigClassVectorFunction.klass, "reject", VALUEFUNC(_wrap_VectorFunction_reject), -1);
  rb_define_method(SwigClassVectorFunction.klass, "at", VALUEFUNC(_wrap_VectorFunction_at), -1);
  rb_define_method(SwigClassVectorFunction.klass, "[]", VALUEFUNC(_wrap_VectorFunction___getitem__), -1);
  rb_define_method(SwigClassVectorFunction.klass, "[]=", VALUEFUNC(_wrap_VectorFunction___setitem__), -1);
  rb_define_method(SwigClassVectorFunction.klass, "shift", VALUEFUNC(_wrap_VectorFunction_shift), -1);
  rb_define_method(SwigClassVectorFunction.klass, "unshift", VALUEFUNC(_wrap_VectorFunction_unshift), -1);
  rb_define_method(SwigClassVectorFunction.klass, "empty?", VALUEFUNC(_wrap_VectorFunction_emptyq___), -1);
  rb_define_method(SwigClassVectorFunction.klass, "size", VALUEFUNC(_wrap_VectorFunction_size), -1);
  rb_define_method(SwigClassVectorFunction.klass, "clear", VALUEFUNC(_wrap_VectorFunction_clear), -1);
  rb_define_method(SwigClassVectorFunction.klass, "swap", VALUEFUNC(_wrap_VectorFunction_swap), -1);
  rb_define_method(SwigClassVectorFunction.klass, "get_allocator", VALUEFUNC(_wrap_VectorFunction_get_allocator), -1);
  rb_define_method(SwigClassVectorFunction.klass, "begin", VALUEFUNC(_wrap_VectorFunction_begin), -1);
  rb_define_method(SwigClassVectorFunction.klass, "end", VALUEFUNC(_wrap_VectorFunction_end), -1);
  rb_define_method(SwigClassVectorFunction.klass, "rbegin", VALUEFUNC(_wrap_VectorFunction_rbegin), -1);
  rb_define_method(SwigClassVectorFunction.klass, "rend", VALUEFUNC(_wrap_VectorFunction_rend), -1);
  rb_define_method(SwigClassVectorFunction.klass, "erase", VALUEFUNC(_wrap_VectorFunction_erase), -1);
  rb_define_method(SwigClassVectorFunction.klass, "front", VALUEFUNC(_wrap_VectorFunction_front), -1);
  rb_define_method(SwigClassVectorFunction.klass, "back", VALUEFUNC(_wrap_VectorFunction_back), -1);
  rb_define_method(SwigClassVectorFunction.klass, "assign", VALUEFUNC(_wrap_VectorFunction_assign), -1);
  rb_define_method(SwigClassVectorFunction.klass, "resize", VALUEFUNC(_wrap_VectorFunction_resize), -1);
  rb_define_method(SwigClassVectorFunction.klass, "insert", VALUEFUNC(_wrap_VectorFunction_insert), -1);
  rb_define_method(SwigClassVectorFunction.klass, "reserve", VALUEFUNC(_wrap_VectorFunction_reserve), -1);
  rb_define_method(SwigClassVectorFunction.klass, "capacity", VALUEFUNC(_wrap_VectorFunction_capacity), -1);
  SwigClassVectorFunction.mark = 0;
  SwigClassVectorFunction.destroy = (void (*)(void *)) free_std_vector_Sl_TruckBoris_Function_Sg_;
  SwigClassVectorFunction.trackObjects = 0;
  
  SwigClassVectorParameter.klass = rb_define_class_under(mRtruckboris, "VectorParameter", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_TruckBoris__Parameter_std__allocatorT_TruckBoris__Parameter_t_t, (void *) &SwigClassVectorParameter);
  rb_include_module(SwigClassVectorParameter.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassVectorParameter.klass, _wrap_VectorParameter_allocate);
  rb_define_method(SwigClassVectorParameter.klass, "initialize", VALUEFUNC(_wrap_new_VectorParameter), -1);
  rb_define_method(SwigClassVectorParameter.klass, "dup", VALUEFUNC(_wrap_VectorParameter_dup), -1);
  rb_define_method(SwigClassVectorParameter.klass, "inspect", VALUEFUNC(_wrap_VectorParameter_inspect), -1);
  rb_define_method(SwigClassVectorParameter.klass, "to_a", VALUEFUNC(_wrap_VectorParameter_to_a), -1);
  rb_define_method(SwigClassVectorParameter.klass, "to_s", VALUEFUNC(_wrap_VectorParameter_to_s), -1);
  rb_define_method(SwigClassVectorParameter.klass, "slice", VALUEFUNC(_wrap_VectorParameter_slice), -1);
  rb_define_method(SwigClassVectorParameter.klass, "each", VALUEFUNC(_wrap_VectorParameter_each), -1);
  rb_define_method(SwigClassVectorParameter.klass, "select", VALUEFUNC(_wrap_VectorParameter_select), -1);
  rb_define_method(SwigClassVectorParameter.klass, "delete_at", VALUEFUNC(_wrap_VectorParameter_delete_at), -1);
  rb_define_method(SwigClassVectorParameter.klass, "__delete2__", VALUEFUNC(_wrap_VectorParameter___delete2__), -1);
  rb_define_method(SwigClassVectorParameter.klass, "reject!", VALUEFUNC(_wrap_VectorParameter_rejectN___), -1);
  rb_define_alias(SwigClassVectorParameter.klass, "delete_if", "reject!");
  rb_define_method(SwigClassVectorParameter.klass, "pop", VALUEFUNC(_wrap_VectorParameter_pop), -1);
  rb_define_method(SwigClassVectorParameter.klass, "push", VALUEFUNC(_wrap_VectorParameter_push), -1);
  rb_define_alias(SwigClassVectorParameter.klass, "<<", "push");
  rb_define_method(SwigClassVectorParameter.klass, "reject", VALUEFUNC(_wrap_VectorParameter_reject), -1);
  rb_define_method(SwigClassVectorParameter.klass, "at", VALUEFUNC(_wrap_VectorParameter_at), -1);
  rb_define_method(SwigClassVectorParameter.klass, "[]", VALUEFUNC(_wrap_VectorParameter___getitem__), -1);
  rb_define_method(SwigClassVectorParameter.klass, "[]=", VALUEFUNC(_wrap_VectorParameter___setitem__), -1);
  rb_define_method(SwigClassVectorParameter.klass, "shift", VALUEFUNC(_wrap_VectorParameter_shift), -1);
  rb_define_method(SwigClassVectorParameter.klass, "unshift", VALUEFUNC(_wrap_VectorParameter_unshift), -1);
  rb_define_method(SwigClassVectorParameter.klass, "empty?", VALUEFUNC(_wrap_VectorParameter_emptyq___), -1);
  rb_define_method(SwigClassVectorParameter.klass, "size", VALUEFUNC(_wrap_VectorParameter_size), -1);
  rb_define_method(SwigClassVectorParameter.klass, "clear", VALUEFUNC(_wrap_VectorParameter_clear), -1);
  rb_define_method(SwigClassVectorParameter.klass, "swap", VALUEFUNC(_wrap_VectorParameter_swap), -1);
  rb_define_method(SwigClassVectorParameter.klass, "get_allocator", VALUEFUNC(_wrap_VectorParameter_get_allocator), -1);
  rb_define_method(SwigClassVectorParameter.klass, "begin", VALUEFUNC(_wrap_VectorParameter_begin), -1);
  rb_define_method(SwigClassVectorParameter.klass, "end", VALUEFUNC(_wrap_VectorParameter_end), -1);
  rb_define_method(SwigClassVectorParameter.klass, "rbegin", VALUEFUNC(_wrap_VectorParameter_rbegin), -1);
  rb_define_method(SwigClassVectorParameter.klass, "rend", VALUEFUNC(_wrap_VectorParameter_rend), -1);
  rb_define_method(SwigClassVectorParameter.klass, "erase", VALUEFUNC(_wrap_VectorParameter_erase), -1);
  rb_define_method(SwigClassVectorParameter.klass, "front", VALUEFUNC(_wrap_VectorParameter_front), -1);
  rb_define_method(SwigClassVectorParameter.klass, "back", VALUEFUNC(_wrap_VectorParameter_back), -1);
  rb_define_method(SwigClassVectorParameter.klass, "assign", VALUEFUNC(_wrap_VectorParameter_assign), -1);
  rb_define_method(SwigClassVectorParameter.klass, "resize", VALUEFUNC(_wrap_VectorParameter_resize), -1);
  rb_define_method(SwigClassVectorParameter.klass, "insert", VALUEFUNC(_wrap_VectorParameter_insert), -1);
  rb_define_method(SwigClassVectorParameter.klass, "reserve", VALUEFUNC(_wrap_VectorParameter_reserve), -1);
  rb_define_method(SwigClassVectorParameter.klass, "capacity", VALUEFUNC(_wrap_VectorParameter_capacity), -1);
  SwigClassVectorParameter.mark = 0;
  SwigClassVectorParameter.destroy = (void (*)(void *)) free_std_vector_Sl_TruckBoris_Parameter_Sg_;
  SwigClassVectorParameter.trackObjects = 0;
  
  SwigClassVectorStructure.klass = rb_define_class_under(mRtruckboris, "VectorStructure", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_TruckBoris__Structure_std__allocatorT_TruckBoris__Structure_t_t, (void *) &SwigClassVectorStructure);
  rb_include_module(SwigClassVectorStructure.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassVectorStructure.klass, _wrap_VectorStructure_allocate);
  rb_define_method(SwigClassVectorStructure.klass, "initialize", VALUEFUNC(_wrap_new_VectorStructure), -1);
  rb_define_method(SwigClassVectorStructure.klass, "dup", VALUEFUNC(_wrap_VectorStructure_dup), -1);
  rb_define_method(SwigClassVectorStructure.klass, "inspect", VALUEFUNC(_wrap_VectorStructure_inspect), -1);
  rb_define_method(SwigClassVectorStructure.klass, "to_a", VALUEFUNC(_wrap_VectorStructure_to_a), -1);
  rb_define_method(SwigClassVectorStructure.klass, "to_s", VALUEFUNC(_wrap_VectorStructure_to_s), -1);
  rb_define_method(SwigClassVectorStructure.klass, "slice", VALUEFUNC(_wrap_VectorStructure_slice), -1);
  rb_define_method(SwigClassVectorStructure.klass, "each", VALUEFUNC(_wrap_VectorStructure_each), -1);
  rb_define_method(SwigClassVectorStructure.klass, "select", VALUEFUNC(_wrap_VectorStructure_select), -1);
  rb_define_method(SwigClassVectorStructure.klass, "delete_at", VALUEFUNC(_wrap_VectorStructure_delete_at), -1);
  rb_define_method(SwigClassVectorStructure.klass, "__delete2__", VALUEFUNC(_wrap_VectorStructure___delete2__), -1);
  rb_define_method(SwigClassVectorStructure.klass, "reject!", VALUEFUNC(_wrap_VectorStructure_rejectN___), -1);
  rb_define_alias(SwigClassVectorStructure.klass, "delete_if", "reject!");
  rb_define_method(SwigClassVectorStructure.klass, "pop", VALUEFUNC(_wrap_VectorStructure_pop), -1);
  rb_define_method(SwigClassVectorStructure.klass, "push", VALUEFUNC(_wrap_VectorStructure_push), -1);
  rb_define_alias(SwigClassVectorStructure.klass, "<<", "push");
  rb_define_method(SwigClassVectorStructure.klass, "reject", VALUEFUNC(_wrap_VectorStructure_reject), -1);
  rb_define_method(SwigClassVectorStructure.klass, "at", VALUEFUNC(_wrap_VectorStructure_at), -1);
  rb_define_method(SwigClassVectorStructure.klass, "[]", VALUEFUNC(_wrap_VectorStructure___getitem__), -1);
  rb_define_method(SwigClassVectorStructure.klass, "[]=", VALUEFUNC(_wrap_VectorStructure___setitem__), -1);
  rb_define_method(SwigClassVectorStructure.klass, "shift", VALUEFUNC(_wrap_VectorStructure_shift), -1);
  rb_define_method(SwigClassVectorStructure.klass, "unshift", VALUEFUNC(_wrap_VectorStructure_unshift), -1);
  rb_define_method(SwigClassVectorStructure.klass, "empty?", VALUEFUNC(_wrap_VectorStructure_emptyq___), -1);
  rb_define_method(SwigClassVectorStructure.klass, "size", VALUEFUNC(_wrap_VectorStructure_size), -1);
  rb_define_method(SwigClassVectorStructure.klass, "clear", VALUEFUNC(_wrap_VectorStructure_clear), -1);
  rb_define_method(SwigClassVectorStructure.klass, "swap", VALUEFUNC(_wrap_VectorStructure_swap), -1);
  rb_define_method(SwigClassVectorStructure.klass, "get_allocator", VALUEFUNC(_wrap_VectorStructure_get_allocator), -1);
  rb_define_method(SwigClassVectorStructure.klass, "begin", VALUEFUNC(_wrap_VectorStructure_begin), -1);
  rb_define_method(SwigClassVectorStructure.klass, "end", VALUEFUNC(_wrap_VectorStructure_end), -1);
  rb_define_method(SwigClassVectorStructure.klass, "rbegin", VALUEFUNC(_wrap_VectorStructure_rbegin), -1);
  rb_define_method(SwigClassVectorStructure.klass, "rend", VALUEFUNC(_wrap_VectorStructure_rend), -1);
  rb_define_method(SwigClassVectorStructure.klass, "erase", VALUEFUNC(_wrap_VectorStructure_erase), -1);
  rb_define_method(SwigClassVectorStructure.klass, "front", VALUEFUNC(_wrap_VectorStructure_front), -1);
  rb_define_method(SwigClassVectorStructure.klass, "back", VALUEFUNC(_wrap_VectorStructure_back), -1);
  rb_define_method(SwigClassVectorStructure.klass, "assign", VALUEFUNC(_wrap_VectorStructure_assign), -1);
  rb_define_method(SwigClassVectorStructure.klass, "resize", VALUEFUNC(_wrap_VectorStructure_resize), -1);
  rb_define_method(SwigClassVectorStructure.klass, "insert", VALUEFUNC(_wrap_VectorStructure_insert), -1);
  rb_define_method(SwigClassVectorStructure.klass, "reserve", VALUEFUNC(_wrap_VectorStructure_reserve), -1);
  rb_define_method(SwigClassVectorStructure.klass, "capacity", VALUEFUNC(_wrap_VectorStructure_capacity), -1);
  SwigClassVectorStructure.mark = 0;
  SwigClassVectorStructure.destroy = (void (*)(void *)) free_std_vector_Sl_TruckBoris_Structure_Sg_;
  SwigClassVectorStructure.trackObjects = 0;
  
  SwigClassVectorField.klass = rb_define_class_under(mRtruckboris, "VectorField", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_TruckBoris__Field_std__allocatorT_TruckBoris__Field_t_t, (void *) &SwigClassVectorField);
  rb_include_module(SwigClassVectorField.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassVectorField.klass, _wrap_VectorField_allocate);
  rb_define_method(SwigClassVectorField.klass, "initialize", VALUEFUNC(_wrap_new_VectorField), -1);
  rb_define_method(SwigClassVectorField.klass, "dup", VALUEFUNC(_wrap_VectorField_dup), -1);
  rb_define_method(SwigClassVectorField.klass, "inspect", VALUEFUNC(_wrap_VectorField_inspect), -1);
  rb_define_method(SwigClassVectorField.klass, "to_a", VALUEFUNC(_wrap_VectorField_to_a), -1);
  rb_define_method(SwigClassVectorField.klass, "to_s", VALUEFUNC(_wrap_VectorField_to_s), -1);
  rb_define_method(SwigClassVectorField.klass, "slice", VALUEFUNC(_wrap_VectorField_slice), -1);
  rb_define_method(SwigClassVectorField.klass, "each", VALUEFUNC(_wrap_VectorField_each), -1);
  rb_define_method(SwigClassVectorField.klass, "select", VALUEFUNC(_wrap_VectorField_select), -1);
  rb_define_method(SwigClassVectorField.klass, "delete_at", VALUEFUNC(_wrap_VectorField_delete_at), -1);
  rb_define_method(SwigClassVectorField.klass, "__delete2__", VALUEFUNC(_wrap_VectorField___delete2__), -1);
  rb_define_method(SwigClassVectorField.klass, "reject!", VALUEFUNC(_wrap_VectorField_rejectN___), -1);
  rb_define_alias(SwigClassVectorField.klass, "delete_if", "reject!");
  rb_define_method(SwigClassVectorField.klass, "pop", VALUEFUNC(_wrap_VectorField_pop), -1);
  rb_define_method(SwigClassVectorField.klass, "push", VALUEFUNC(_wrap_VectorField_push), -1);
  rb_define_alias(SwigClassVectorField.klass, "<<", "push");
  rb_define_method(SwigClassVectorField.klass, "reject", VALUEFUNC(_wrap_VectorField_reject), -1);
  rb_define_method(SwigClassVectorField.klass, "at", VALUEFUNC(_wrap_VectorField_at), -1);
  rb_define_method(SwigClassVectorField.klass, "[]", VALUEFUNC(_wrap_VectorField___getitem__), -1);
  rb_define_method(SwigClassVectorField.klass, "[]=", VALUEFUNC(_wrap_VectorField___setitem__), -1);
  rb_define_method(SwigClassVectorField.klass, "shift", VALUEFUNC(_wrap_VectorField_shift), -1);
  rb_define_method(SwigClassVectorField.klass, "unshift", VALUEFUNC(_wrap_VectorField_unshift), -1);
  rb_define_method(SwigClassVectorField.klass, "empty?", VALUEFUNC(_wrap_VectorField_emptyq___), -1);
  rb_define_method(SwigClassVectorField.klass, "size", VALUEFUNC(_wrap_VectorField_size), -1);
  rb_define_method(SwigClassVectorField.klass, "clear", VALUEFUNC(_wrap_VectorField_clear), -1);
  rb_define_method(SwigClassVectorField.klass, "swap", VALUEFUNC(_wrap_VectorField_swap), -1);
  rb_define_method(SwigClassVectorField.klass, "get_allocator", VALUEFUNC(_wrap_VectorField_get_allocator), -1);
  rb_define_method(SwigClassVectorField.klass, "begin", VALUEFUNC(_wrap_VectorField_begin), -1);
  rb_define_method(SwigClassVectorField.klass, "end", VALUEFUNC(_wrap_VectorField_end), -1);
  rb_define_method(SwigClassVectorField.klass, "rbegin", VALUEFUNC(_wrap_VectorField_rbegin), -1);
  rb_define_method(SwigClassVectorField.klass, "rend", VALUEFUNC(_wrap_VectorField_rend), -1);
  rb_define_method(SwigClassVectorField.klass, "erase", VALUEFUNC(_wrap_VectorField_erase), -1);
  rb_define_method(SwigClassVectorField.klass, "front", VALUEFUNC(_wrap_VectorField_front), -1);
  rb_define_method(SwigClassVectorField.klass, "back", VALUEFUNC(_wrap_VectorField_back), -1);
  rb_define_method(SwigClassVectorField.klass, "assign", VALUEFUNC(_wrap_VectorField_assign), -1);
  rb_define_method(SwigClassVectorField.klass, "resize", VALUEFUNC(_wrap_VectorField_resize), -1);
  rb_define_method(SwigClassVectorField.klass, "insert", VALUEFUNC(_wrap_VectorField_insert), -1);
  rb_define_method(SwigClassVectorField.klass, "reserve", VALUEFUNC(_wrap_VectorField_reserve), -1);
  rb_define_method(SwigClassVectorField.klass, "capacity", VALUEFUNC(_wrap_VectorField_capacity), -1);
  SwigClassVectorField.mark = 0;
  SwigClassVectorField.destroy = (void (*)(void *)) free_std_vector_Sl_TruckBoris_Field_Sg_;
  SwigClassVectorField.trackObjects = 0;
  
  SwigClassVectorTypedef.klass = rb_define_class_under(mRtruckboris, "VectorTypedef", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_TruckBoris__Typedef_std__allocatorT_TruckBoris__Typedef_t_t, (void *) &SwigClassVectorTypedef);
  rb_include_module(SwigClassVectorTypedef.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassVectorTypedef.klass, _wrap_VectorTypedef_allocate);
  rb_define_method(SwigClassVectorTypedef.klass, "initialize", VALUEFUNC(_wrap_new_VectorTypedef), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "dup", VALUEFUNC(_wrap_VectorTypedef_dup), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "inspect", VALUEFUNC(_wrap_VectorTypedef_inspect), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "to_a", VALUEFUNC(_wrap_VectorTypedef_to_a), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "to_s", VALUEFUNC(_wrap_VectorTypedef_to_s), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "slice", VALUEFUNC(_wrap_VectorTypedef_slice), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "each", VALUEFUNC(_wrap_VectorTypedef_each), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "select", VALUEFUNC(_wrap_VectorTypedef_select), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "delete_at", VALUEFUNC(_wrap_VectorTypedef_delete_at), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "__delete2__", VALUEFUNC(_wrap_VectorTypedef___delete2__), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "reject!", VALUEFUNC(_wrap_VectorTypedef_rejectN___), -1);
  rb_define_alias(SwigClassVectorTypedef.klass, "delete_if", "reject!");
  rb_define_method(SwigClassVectorTypedef.klass, "pop", VALUEFUNC(_wrap_VectorTypedef_pop), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "push", VALUEFUNC(_wrap_VectorTypedef_push), -1);
  rb_define_alias(SwigClassVectorTypedef.klass, "<<", "push");
  rb_define_method(SwigClassVectorTypedef.klass, "reject", VALUEFUNC(_wrap_VectorTypedef_reject), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "at", VALUEFUNC(_wrap_VectorTypedef_at), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "[]", VALUEFUNC(_wrap_VectorTypedef___getitem__), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "[]=", VALUEFUNC(_wrap_VectorTypedef___setitem__), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "shift", VALUEFUNC(_wrap_VectorTypedef_shift), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "unshift", VALUEFUNC(_wrap_VectorTypedef_unshift), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "empty?", VALUEFUNC(_wrap_VectorTypedef_emptyq___), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "size", VALUEFUNC(_wrap_VectorTypedef_size), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "clear", VALUEFUNC(_wrap_VectorTypedef_clear), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "swap", VALUEFUNC(_wrap_VectorTypedef_swap), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "get_allocator", VALUEFUNC(_wrap_VectorTypedef_get_allocator), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "begin", VALUEFUNC(_wrap_VectorTypedef_begin), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "end", VALUEFUNC(_wrap_VectorTypedef_end), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "rbegin", VALUEFUNC(_wrap_VectorTypedef_rbegin), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "rend", VALUEFUNC(_wrap_VectorTypedef_rend), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "erase", VALUEFUNC(_wrap_VectorTypedef_erase), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "front", VALUEFUNC(_wrap_VectorTypedef_front), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "back", VALUEFUNC(_wrap_VectorTypedef_back), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "assign", VALUEFUNC(_wrap_VectorTypedef_assign), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "resize", VALUEFUNC(_wrap_VectorTypedef_resize), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "insert", VALUEFUNC(_wrap_VectorTypedef_insert), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "reserve", VALUEFUNC(_wrap_VectorTypedef_reserve), -1);
  rb_define_method(SwigClassVectorTypedef.klass, "capacity", VALUEFUNC(_wrap_VectorTypedef_capacity), -1);
  SwigClassVectorTypedef.mark = 0;
  SwigClassVectorTypedef.destroy = (void (*)(void *)) free_std_vector_Sl_TruckBoris_Typedef_Sg_;
  SwigClassVectorTypedef.trackObjects = 0;
  
  SwigClassVectorString.klass = rb_define_class_under(mRtruckboris, "VectorString", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, (void *) &SwigClassVectorString);
  rb_include_module(SwigClassVectorString.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassVectorString.klass, _wrap_VectorString_allocate);
  rb_define_method(SwigClassVectorString.klass, "initialize", VALUEFUNC(_wrap_new_VectorString), -1);
  rb_define_method(SwigClassVectorString.klass, "dup", VALUEFUNC(_wrap_VectorString_dup), -1);
  rb_define_method(SwigClassVectorString.klass, "inspect", VALUEFUNC(_wrap_VectorString_inspect), -1);
  rb_define_method(SwigClassVectorString.klass, "to_a", VALUEFUNC(_wrap_VectorString_to_a), -1);
  rb_define_method(SwigClassVectorString.klass, "to_s", VALUEFUNC(_wrap_VectorString_to_s), -1);
  rb_define_method(SwigClassVectorString.klass, "slice", VALUEFUNC(_wrap_VectorString_slice), -1);
  rb_define_method(SwigClassVectorString.klass, "each", VALUEFUNC(_wrap_VectorString_each), -1);
  rb_define_method(SwigClassVectorString.klass, "select", VALUEFUNC(_wrap_VectorString_select), -1);
  rb_define_method(SwigClassVectorString.klass, "delete_at", VALUEFUNC(_wrap_VectorString_delete_at), -1);
  rb_define_method(SwigClassVectorString.klass, "__delete2__", VALUEFUNC(_wrap_VectorString___delete2__), -1);
  rb_define_method(SwigClassVectorString.klass, "reject!", VALUEFUNC(_wrap_VectorString_rejectN___), -1);
  rb_define_alias(SwigClassVectorString.klass, "delete_if", "reject!");
  rb_define_method(SwigClassVectorString.klass, "pop", VALUEFUNC(_wrap_VectorString_pop), -1);
  rb_define_method(SwigClassVectorString.klass, "push", VALUEFUNC(_wrap_VectorString_push), -1);
  rb_define_alias(SwigClassVectorString.klass, "<<", "push");
  rb_define_method(SwigClassVectorString.klass, "reject", VALUEFUNC(_wrap_VectorString_reject), -1);
  rb_define_method(SwigClassVectorString.klass, "at", VALUEFUNC(_wrap_VectorString_at), -1);
  rb_define_method(SwigClassVectorString.klass, "[]", VALUEFUNC(_wrap_VectorString___getitem__), -1);
  rb_define_method(SwigClassVectorString.klass, "[]=", VALUEFUNC(_wrap_VectorString___setitem__), -1);
  rb_define_method(SwigClassVectorString.klass, "shift", VALUEFUNC(_wrap_VectorString_shift), -1);
  rb_define_method(SwigClassVectorString.klass, "unshift", VALUEFUNC(_wrap_VectorString_unshift), -1);
  rb_define_method(SwigClassVectorString.klass, "empty?", VALUEFUNC(_wrap_VectorString_emptyq___), -1);
  rb_define_method(SwigClassVectorString.klass, "size", VALUEFUNC(_wrap_VectorString_size), -1);
  rb_define_method(SwigClassVectorString.klass, "clear", VALUEFUNC(_wrap_VectorString_clear), -1);
  rb_define_method(SwigClassVectorString.klass, "swap", VALUEFUNC(_wrap_VectorString_swap), -1);
  rb_define_method(SwigClassVectorString.klass, "get_allocator", VALUEFUNC(_wrap_VectorString_get_allocator), -1);
  rb_define_method(SwigClassVectorString.klass, "begin", VALUEFUNC(_wrap_VectorString_begin), -1);
  rb_define_method(SwigClassVectorString.klass, "end", VALUEFUNC(_wrap_VectorString_end), -1);
  rb_define_method(SwigClassVectorString.klass, "rbegin", VALUEFUNC(_wrap_VectorString_rbegin), -1);
  rb_define_method(SwigClassVectorString.klass, "rend", VALUEFUNC(_wrap_VectorString_rend), -1);
  rb_define_method(SwigClassVectorString.klass, "erase", VALUEFUNC(_wrap_VectorString_erase), -1);
  rb_define_method(SwigClassVectorString.klass, "front", VALUEFUNC(_wrap_VectorString_front), -1);
  rb_define_method(SwigClassVectorString.klass, "back", VALUEFUNC(_wrap_VectorString_back), -1);
  rb_define_method(SwigClassVectorString.klass, "assign", VALUEFUNC(_wrap_VectorString_assign), -1);
  rb_define_method(SwigClassVectorString.klass, "resize", VALUEFUNC(_wrap_VectorString_resize), -1);
  rb_define_method(SwigClassVectorString.klass, "insert", VALUEFUNC(_wrap_VectorString_insert), -1);
  rb_define_method(SwigClassVectorString.klass, "reserve", VALUEFUNC(_wrap_VectorString_reserve), -1);
  rb_define_method(SwigClassVectorString.klass, "capacity", VALUEFUNC(_wrap_VectorString_capacity), -1);
  rb_define_method(SwigClassVectorString.klass, "map_bang", VALUEFUNC(_wrap_VectorString_map_bang), -1);
  rb_define_method(SwigClassVectorString.klass, "__delete__", VALUEFUNC(_wrap_VectorString___delete__), -1);
  SwigClassVectorString.mark = 0;
  SwigClassVectorString.destroy = (void (*)(void *)) free_std_vector_Sl_std_string_Sg_;
  SwigClassVectorString.trackObjects = 0;
  
  SwigClassType.klass = rb_define_class_under(mRtruckboris, "Type", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TruckBoris__Type, (void *) &SwigClassType);
  rb_define_alloc_func(SwigClassType.klass, _wrap_Type_allocate);
  rb_define_method(SwigClassType.klass, "initialize", VALUEFUNC(_wrap_new_Type), -1);
  rb_define_method(SwigClassType.klass, "getName", VALUEFUNC(_wrap_Type_getName), -1);
  rb_define_method(SwigClassType.klass, "isCanonical", VALUEFUNC(_wrap_Type_isCanonical), -1);
  rb_define_method(SwigClassType.klass, "withConst", VALUEFUNC(_wrap_Type_withConst), -1);
  rb_define_method(SwigClassType.klass, "withVolatile", VALUEFUNC(_wrap_Type_withVolatile), -1);
  rb_define_method(SwigClassType.klass, "withRestrict", VALUEFUNC(_wrap_Type_withRestrict), -1);
  rb_define_method(SwigClassType.klass, "getCanonicalType", VALUEFUNC(_wrap_Type_getCanonicalType), -1);
  rb_define_method(SwigClassType.klass, "getUnqualifiedType", VALUEFUNC(_wrap_Type_getUnqualifiedType), -1);
  rb_define_method(SwigClassType.klass, "getLocalUnqualifiedType", VALUEFUNC(_wrap_Type_getLocalUnqualifiedType), -1);
  rb_define_method(SwigClassType.klass, "getLocallyUnqualifiedSingleStepDesugaredType", VALUEFUNC(_wrap_Type_getLocallyUnqualifiedSingleStepDesugaredType), -1);
  rb_define_method(SwigClassType.klass, "getNonReferenceType", VALUEFUNC(_wrap_Type_getNonReferenceType), -1);
  rb_define_method(SwigClassType.klass, "isEmpty", VALUEFUNC(_wrap_Type_isEmpty), -1);
  rb_define_method(SwigClassType.klass, "setClangQualType", VALUEFUNC(_wrap_Type_setClangQualType), -1);
  rb_define_method(SwigClassType.klass, "getClangQualType", VALUEFUNC(_wrap_Type_getClangQualType), -1);
  rb_define_method(SwigClassType.klass, "getClangTypePtr", VALUEFUNC(_wrap_Type_getClangTypePtr), -1);
  rb_define_method(SwigClassType.klass, "getClangTypeClassName", VALUEFUNC(_wrap_Type_getClangTypeClassName), -1);
  SwigClassType.mark = 0;
  SwigClassType.destroy = (void (*)(void *)) free_TruckBoris_Type;
  SwigClassType.trackObjects = 0;
  
  SwigClassTypedef.klass = rb_define_class_under(mRtruckboris, "Typedef", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TruckBoris__Typedef, (void *) &SwigClassTypedef);
  rb_define_alloc_func(SwigClassTypedef.klass, _wrap_Typedef_allocate);
  rb_define_method(SwigClassTypedef.klass, "initialize", VALUEFUNC(_wrap_new_Typedef), -1);
  rb_define_method(SwigClassTypedef.klass, "getName", VALUEFUNC(_wrap_Typedef_getName), -1);
  rb_define_method(SwigClassTypedef.klass, "getType", VALUEFUNC(_wrap_Typedef_getType), -1);
  rb_define_method(SwigClassTypedef.klass, "getRaw", VALUEFUNC(_wrap_Typedef_getRaw), -1);
  SwigClassTypedef.mark = 0;
  SwigClassTypedef.destroy = (void (*)(void *)) free_TruckBoris_Typedef;
  SwigClassTypedef.trackObjects = 0;
  
  SwigClassParameter.klass = rb_define_class_under(mRtruckboris, "Parameter", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TruckBoris__Parameter, (void *) &SwigClassParameter);
  rb_define_alloc_func(SwigClassParameter.klass, _wrap_Parameter_allocate);
  rb_define_method(SwigClassParameter.klass, "initialize", VALUEFUNC(_wrap_new_Parameter), -1);
  rb_define_method(SwigClassParameter.klass, "Equals", VALUEFUNC(_wrap_Parameter_Equals), -1);
  rb_define_method(SwigClassParameter.klass, "getName", VALUEFUNC(_wrap_Parameter_getName), -1);
  rb_define_method(SwigClassParameter.klass, "getType", VALUEFUNC(_wrap_Parameter_getType), -1);
  SwigClassParameter.mark = 0;
  SwigClassParameter.destroy = (void (*)(void *)) free_TruckBoris_Parameter;
  SwigClassParameter.trackObjects = 0;
  
  SwigClassField.klass = rb_define_class_under(mRtruckboris, "Field", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TruckBoris__Field, (void *) &SwigClassField);
  rb_define_alloc_func(SwigClassField.klass, _wrap_Field_allocate);
  rb_define_method(SwigClassField.klass, "initialize", VALUEFUNC(_wrap_new_Field), -1);
  rb_define_method(SwigClassField.klass, "getName", VALUEFUNC(_wrap_Field_getName), -1);
  rb_define_method(SwigClassField.klass, "getType", VALUEFUNC(_wrap_Field_getType), -1);
  SwigClassField.mark = 0;
  SwigClassField.destroy = (void (*)(void *)) free_TruckBoris_Field;
  SwigClassField.trackObjects = 0;
  
  SwigClassTagDeclaration.klass = rb_define_class_under(mRtruckboris, "TagDeclaration", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TruckBoris__TagDeclaration, (void *) &SwigClassTagDeclaration);
  rb_define_alloc_func(SwigClassTagDeclaration.klass, _wrap_TagDeclaration_allocate);
  rb_define_method(SwigClassTagDeclaration.klass, "initialize", VALUEFUNC(_wrap_new_TagDeclaration), -1);
  rb_define_method(SwigClassTagDeclaration.klass, "getName", VALUEFUNC(_wrap_TagDeclaration_getName), -1);
  rb_define_method(SwigClassTagDeclaration.klass, "hasNameForLinkage", VALUEFUNC(_wrap_TagDeclaration_hasNameForLinkage), -1);
  rb_define_method(SwigClassTagDeclaration.klass, "hasLinkage", VALUEFUNC(_wrap_TagDeclaration_hasLinkage), -1);
  rb_define_method(SwigClassTagDeclaration.klass, "getTypedefName", VALUEFUNC(_wrap_TagDeclaration_getTypedefName), -1);
  rb_define_method(SwigClassTagDeclaration.klass, "getRaw", VALUEFUNC(_wrap_TagDeclaration_getRaw), -1);
  SwigClassTagDeclaration.mark = 0;
  SwigClassTagDeclaration.destroy = (void (*)(void *)) free_TruckBoris_TagDeclaration;
  SwigClassTagDeclaration.trackObjects = 0;
  
  SwigClassStructure.klass = rb_define_class_under(mRtruckboris, "Structure", ((swig_class *) SWIGTYPE_p_TruckBoris__TagDeclaration->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TruckBoris__Structure, (void *) &SwigClassStructure);
  rb_define_alloc_func(SwigClassStructure.klass, _wrap_Structure_allocate);
  rb_define_method(SwigClassStructure.klass, "initialize", VALUEFUNC(_wrap_new_Structure), -1);
  rb_define_method(SwigClassStructure.klass, "getTagType", VALUEFUNC(_wrap_Structure_getTagType), -1);
  rb_define_method(SwigClassStructure.klass, "getFields", VALUEFUNC(_wrap_Structure_getFields), -1);
  SwigClassStructure.mark = 0;
  SwigClassStructure.destroy = (void (*)(void *)) free_TruckBoris_Structure;
  SwigClassStructure.trackObjects = 0;
  
  SwigClassUnion.klass = rb_define_class_under(mRtruckboris, "Union", ((swig_class *) SWIGTYPE_p_TruckBoris__TagDeclaration->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TruckBoris__Union, (void *) &SwigClassUnion);
  rb_define_alloc_func(SwigClassUnion.klass, _wrap_Union_allocate);
  rb_define_method(SwigClassUnion.klass, "initialize", VALUEFUNC(_wrap_new_Union), -1);
  rb_define_method(SwigClassUnion.klass, "Equals", VALUEFUNC(_wrap_Union_Equals), -1);
  rb_define_method(SwigClassUnion.klass, "getTagType", VALUEFUNC(_wrap_Union_getTagType), -1);
  rb_define_method(SwigClassUnion.klass, "getFieldsNumber", VALUEFUNC(_wrap_Union_getFieldsNumber), -1);
  rb_define_method(SwigClassUnion.klass, "getFields", VALUEFUNC(_wrap_Union_getFields), -1);
  rb_define_method(SwigClassUnion.klass, "getField", VALUEFUNC(_wrap_Union_getField), -1);
  SwigClassUnion.mark = 0;
  SwigClassUnion.destroy = (void (*)(void *)) free_TruckBoris_Union;
  SwigClassUnion.trackObjects = 0;
  
  SwigClassEnumConstant.klass = rb_define_class_under(mRtruckboris, "EnumConstant", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TruckBoris__EnumConstant, (void *) &SwigClassEnumConstant);
  rb_define_alloc_func(SwigClassEnumConstant.klass, _wrap_EnumConstant_allocate);
  rb_define_method(SwigClassEnumConstant.klass, "initialize", VALUEFUNC(_wrap_new_EnumConstant), -1);
  rb_define_method(SwigClassEnumConstant.klass, "getName", VALUEFUNC(_wrap_EnumConstant_getName), -1);
  rb_define_method(SwigClassEnumConstant.klass, "getValue", VALUEFUNC(_wrap_EnumConstant_getValue), -1);
  SwigClassEnumConstant.mark = 0;
  SwigClassEnumConstant.destroy = (void (*)(void *)) free_TruckBoris_EnumConstant;
  SwigClassEnumConstant.trackObjects = 0;
  
  SwigClassEnum.klass = rb_define_class_under(mRtruckboris, "Enum", ((swig_class *) SWIGTYPE_p_TruckBoris__TagDeclaration->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TruckBoris__Enum, (void *) &SwigClassEnum);
  rb_define_alloc_func(SwigClassEnum.klass, _wrap_Enum_allocate);
  rb_define_method(SwigClassEnum.klass, "initialize", VALUEFUNC(_wrap_new_Enum), -1);
  rb_define_method(SwigClassEnum.klass, "getTagType", VALUEFUNC(_wrap_Enum_getTagType), -1);
  rb_define_method(SwigClassEnum.klass, "getConstants", VALUEFUNC(_wrap_Enum_getConstants), -1);
  SwigClassEnum.mark = 0;
  SwigClassEnum.destroy = (void (*)(void *)) free_TruckBoris_Enum;
  SwigClassEnum.trackObjects = 0;
  
  SwigClassFunction.klass = rb_define_class_under(mRtruckboris, "Function", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TruckBoris__Function, (void *) &SwigClassFunction);
  rb_define_alloc_func(SwigClassFunction.klass, _wrap_Function_allocate);
  rb_define_method(SwigClassFunction.klass, "initialize", VALUEFUNC(_wrap_new_Function), -1);
  rb_define_method(SwigClassFunction.klass, "getName", VALUEFUNC(_wrap_Function_getName), -1);
  rb_define_method(SwigClassFunction.klass, "isMain", VALUEFUNC(_wrap_Function_isMain), -1);
  rb_define_method(SwigClassFunction.klass, "getReturn", VALUEFUNC(_wrap_Function_getReturn), -1);
  rb_define_method(SwigClassFunction.klass, "getParameters", VALUEFUNC(_wrap_Function_getParameters), -1);
  rb_define_method(SwigClassFunction.klass, "getRaw", VALUEFUNC(_wrap_Function_getRaw), -1);
  SwigClassFunction.mark = 0;
  SwigClassFunction.destroy = (void (*)(void *)) free_TruckBoris_Function;
  SwigClassFunction.trackObjects = 0;
  
  SwigClassHeaderParser.klass = rb_define_class_under(mRtruckboris, "HeaderParser", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TruckBoris__HeaderParser, (void *) &SwigClassHeaderParser);
  rb_define_alloc_func(SwigClassHeaderParser.klass, _wrap_HeaderParser_allocate);
  rb_define_method(SwigClassHeaderParser.klass, "initialize", VALUEFUNC(_wrap_new_HeaderParser), -1);
  rb_define_method(SwigClassHeaderParser.klass, "addSourceFile", VALUEFUNC(_wrap_HeaderParser_addSourceFile), -1);
  rb_define_method(SwigClassHeaderParser.klass, "addSearchPath", VALUEFUNC(_wrap_HeaderParser_addSearchPath), -1);
  rb_define_method(SwigClassHeaderParser.klass, "addSearchPaths", VALUEFUNC(_wrap_HeaderParser_addSearchPaths), -1);
  rb_define_method(SwigClassHeaderParser.klass, "parse", VALUEFUNC(_wrap_HeaderParser_parse), -1);
  rb_define_method(SwigClassHeaderParser.klass, "getLangOpts", VALUEFUNC(_wrap_HeaderParser_getLangOpts), -1);
  rb_define_method(SwigClassHeaderParser.klass, "getSourceManager", VALUEFUNC(_wrap_HeaderParser_getSourceManager), -1);
  rb_define_method(SwigClassHeaderParser.klass, "getFunctions", VALUEFUNC(_wrap_HeaderParser_getFunctions), -1);
  rb_define_method(SwigClassHeaderParser.klass, "getStructures", VALUEFUNC(_wrap_HeaderParser_getStructures), -1);
  rb_define_method(SwigClassHeaderParser.klass, "getUnions", VALUEFUNC(_wrap_HeaderParser_getUnions), -1);
  rb_define_method(SwigClassHeaderParser.klass, "getEnums", VALUEFUNC(_wrap_HeaderParser_getEnums), -1);
  rb_define_method(SwigClassHeaderParser.klass, "getTypedefs", VALUEFUNC(_wrap_HeaderParser_getTypedefs), -1);
  rb_define_method(SwigClassHeaderParser.klass, "getSourceFile", VALUEFUNC(_wrap_HeaderParser_getSourceFile), -1);
  rb_define_method(SwigClassHeaderParser.klass, "getHeadersPaths", VALUEFUNC(_wrap_HeaderParser_getHeadersPaths), -1);
  rb_define_method(SwigClassHeaderParser.klass, "isInitialized", VALUEFUNC(_wrap_HeaderParser_isInitialized), -1);
  SwigClassHeaderParser.mark = 0;
  SwigClassHeaderParser.destroy = (void (*)(void *)) free_TruckBoris_HeaderParser;
  SwigClassHeaderParser.trackObjects = 0;
}

